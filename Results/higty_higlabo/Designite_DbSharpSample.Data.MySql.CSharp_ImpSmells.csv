Implementation smell,Namespace,Class,File,Method,Description
Long Method,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The method has 246 lines of code.
Long Method,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The method has 462 lines of code.
Long Method,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The method has 474 lines of code.
Long Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The method has 880 lines of code.
Long Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The method has 119 lines of code.
Complex Method,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,Cyclomatic complexity of the method is 37
Complex Method,HigLabo.DbSharpSample.MySql,alldatatypetableSelectAll,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,SetResultSet,Cyclomatic complexity of the method is 35
Complex Method,HigLabo.DbSharpSample.MySql,alldatatypetableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectByPrimaryKey.cs,SetResultSet,Cyclomatic complexity of the method is 35
Complex Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,Cyclomatic complexity of the method is 70
Complex Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,Cyclomatic complexity of the method is 210
Complex Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,Cyclomatic complexity of the method is 27
Long Parameter List,HigLabo.DbSharpSample.MySql,multipktable,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\multipktable.cs,Delete,The method has 5 parameters. Parameters: database' bigIntColumn' intColumn' floatColumn' timestampColumn
Long Identifier,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,,The length of the parameter _NotNullSmallIntUnsignedColumn is 30.
Long Identifier,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,,The length of the parameter _NotNullMediumIntUnsignedColumn is 31.
Long Identifier,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,,The length of the parameter _NotNullSmallIntUnsignedColumn is 30.
Long Identifier,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,,The length of the parameter _NotNullMediumIntUnsignedColumn is 31.
Long Identifier,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,,The length of the parameter _NotNullSmallIntUnsignedColumn is 30.
Long Identifier,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,,The length of the parameter _NotNullMediumIntUnsignedColumn is 31.
Long Identifier,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,,The length of the parameter _NotNullSmallIntUnsignedColumn is 30.
Long Identifier,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,,The length of the parameter _NotNullMediumIntUnsignedColumn is 31.
Long Identifier,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,,The length of the parameter _NotNullSmallIntUnsignedColumn is 30.
Long Identifier,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,,The length of the parameter _NotNullMediumIntUnsignedColumn is 31.
Long Statement,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The length of the statement  "            if (p.Value != DBNull.Value && p.Value != null) this.EnumColumn = StoredProcedure.ToEnum<MyEnum>(p.Value as String) ?? this.EnumColumn; " is 135.
Long Statement,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The length of the statement  "            if (p.Value != DBNull.Value && p.Value != null) this.SetColumn = StoredProcedure.ToEnum<MySet>(p.Value as String) ?? this.SetColumn; " is 132.
Long Statement,HigLabo.DbSharpSample.MySql,alldatatypetableSelectAll,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.EnumColumn = StoredProcedure.ToEnum<MyEnum>(reader[index] as String) ?? r.EnumColumn; " is 134.
Long Statement,HigLabo.DbSharpSample.MySql,alldatatypetableSelectAll,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.SetColumn = StoredProcedure.ToEnum<MySet>(reader[index] as String) ?? r.SetColumn; " is 131.
Long Statement,HigLabo.DbSharpSample.MySql,alldatatypetableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectByPrimaryKey.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.EnumColumn = StoredProcedure.ToEnum<MyEnum>(reader[index] as String) ?? r.EnumColumn; " is 134.
Long Statement,HigLabo.DbSharpSample.MySql,alldatatypetableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectByPrimaryKey.cs,SetResultSet,The length of the statement  "                index += 1; if (reader[index] != DBNull.Value) r.SetColumn = StoredProcedure.ToEnum<MySet>(reader[index] as String) ?? r.SetColumn; " is 131.
Long Statement,HigLabo.DbSharpSample.MySql,alldatatypetable,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Long Statement,HigLabo.DbSharpSample.MySql,identitytable,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\identitytable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Long Statement,HigLabo.DbSharpSample.MySql,multipktable,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\multipktable.cs,CreateStoredProcedureWithResultSet,The length of the statement  "                case TableStoredProcedureTypeWithResultSet.SelectByPrimaryKey: return this.CreateSelectByPrimaryKeyStoredProcedure(record); " is 123.
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("TinyIntColumn"' MySqlDbType.Byte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("SmallIntColumn"' MySqlDbType.Int16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("MediumIntColumn"' MySqlDbType.Int24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("TinyIntUnsignedColumn"' MySqlDbType.UByte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("SmallIntUnsignedColumn"' MySqlDbType.UInt16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("MediumIntUnsignedColumn"' MySqlDbType.UInt24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntUnsignedColumn"' MySqlDbType.UInt32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntUnsignedColumn"' MySqlDbType.UInt64' 20' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NumericColumn"' MySqlDbType.Decimal' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DateTimeColumn"' MySqlDbType.DateTime' null' 5);
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 65535;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 65535;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 7;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[2] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[3] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[4] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[5] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[6] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[7] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[8] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[9] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[10] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[11] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[12] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[13] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[14] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[15] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[16] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[17] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[18] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[19] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[20] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[21] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[22] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[23] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[24] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[25] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[26] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[27] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[28] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[29] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[30] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[31] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[32] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[33] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[34] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[35] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,Usp_OutputParameter,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\StoredProcedure\Usp_OutputParameter.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_PrimaryKeyColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PrimaryKeyColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("TinyIntColumn"' MySqlDbType.Byte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("SmallIntColumn"' MySqlDbType.Int16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("MediumIntColumn"' MySqlDbType.Int24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("TinyIntUnsignedColumn"' MySqlDbType.UByte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("SmallIntUnsignedColumn"' MySqlDbType.UInt16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("MediumIntUnsignedColumn"' MySqlDbType.UInt24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntUnsignedColumn"' MySqlDbType.UInt32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntUnsignedColumn"' MySqlDbType.UInt64' 20' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NumericColumn"' MySqlDbType.Decimal' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 65535;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 7;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullTinyIntColumn"' MySqlDbType.Byte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullSmallIntColumn"' MySqlDbType.Int16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullMediumIntColumn"' MySqlDbType.Int24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullIntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullBigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullTinyIntUnsignedColumn"' MySqlDbType.UByte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullSmallIntUnsignedColumn"' MySqlDbType.UInt16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullMediumIntUnsignedColumn"' MySqlDbType.UInt24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullIntUnsignedColumn"' MySqlDbType.UInt32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullBigIntUnsignedColumn"' MySqlDbType.UInt64' 20' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullFloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullFloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullNumericColumn"' MySqlDbType.Decimal' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 65535;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 7;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableSelectAll,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.MySql,ResultSet,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(64);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_PrimaryKeyColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PrimaryKeyColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("TinyIntColumn"' MySqlDbType.Byte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("SmallIntColumn"' MySqlDbType.Int16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("MediumIntColumn"' MySqlDbType.Int24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("TinyIntUnsignedColumn"' MySqlDbType.UByte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("SmallIntUnsignedColumn"' MySqlDbType.UInt16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("MediumIntUnsignedColumn"' MySqlDbType.UInt24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntUnsignedColumn"' MySqlDbType.UInt32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntUnsignedColumn"' MySqlDbType.UInt64' 20' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("DecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NumericColumn"' MySqlDbType.Decimal' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 65535;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 7;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullTinyIntColumn"' MySqlDbType.Byte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullSmallIntColumn"' MySqlDbType.Int16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullMediumIntColumn"' MySqlDbType.Int24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullIntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullBigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullTinyIntUnsignedColumn"' MySqlDbType.UByte' 3' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullSmallIntUnsignedColumn"' MySqlDbType.UInt16' 5' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullMediumIntUnsignedColumn"' MySqlDbType.UInt24' 7' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullIntUnsignedColumn"' MySqlDbType.UInt32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullBigIntUnsignedColumn"' MySqlDbType.UInt64' 20' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullFloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullFloatColumn"' MySqlDbType.Float' 8' 4);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDoubleColumn"' MySqlDbType.Double' 9' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullDecimalColumn"' MySqlDbType.Decimal' 10' 5);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("NotNullNumericColumn"' MySqlDbType.Decimal' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 255;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 65535;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 16777215;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 2147483647;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 7;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 20;
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_PrimaryKeyColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,alldatatypetableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\alldatatypetableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,identitytableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableSelectAll,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,identitytableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,identitytableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\identitytableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableDelete.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_FloatColumn"' MySqlDbType.Float' 12' null);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableDelete,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableDelete.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 12' null);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[4] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableInsert,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableInsert.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableSelectAll,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableSelectAll.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableSelectByPrimaryKey.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_FloatColumn"' MySqlDbType.Float' 12' null);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableSelectByPrimaryKey,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableSelectByPrimaryKey.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("FloatColumn"' MySqlDbType.Float' 12' null);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p.Size = 100;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_BigIntColumn"' MySqlDbType.Int64' 19' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_IntColumn"' MySqlDbType.Int32' 10' 0);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,CreateCommand,The following statement contains a magic number: p = db.CreateParameter("PK_FloatColumn"' MySqlDbType.Float' 12' null);
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,SetOutputParameterValue,The following statement contains a magic number: p = cm.Parameters[4] as DbParameter;
Magic Number,HigLabo.DbSharpSample.MySql,multipktableUpdate,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\TableStoredProcedure\multipktableUpdate.cs,ToString,The following statement contains a magic number: var sb = new StringBuilder(32);
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetColumnCount,The following statement contains a magic number: return 70;
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.IntColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetColumnCount,The following statement contains a magic number: return 3;
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following statement contains a magic number: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following statement contains a magic number: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Magic Number,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetColumnCount,The following statement contains a magic number: return 9;
Missing Default,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.PrimaryKeyColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.CharColumn;                      case 3: return this.VarCharColumn;                      case 4: return this.BitColumn;                      case 5: return this.TinyIntColumn;                      case 6: return this.SmallIntColumn;                      case 7: return this.MediumIntColumn;                      case 8: return this.IntColumn;                      case 9: return this.BigIntColumn;                      case 10: return this.TinyIntUnsignedColumn;                      case 11: return this.SmallIntUnsignedColumn;                      case 12: return this.MediumIntUnsignedColumn;                      case 13: return this.IntUnsignedColumn;                      case 14: return this.BigIntUnsignedColumn;                      case 15: return this.FloatColumn;                      case 16: return this.DoubleColumn;                      case 17: return this.DecimalColumn;                      case 18: return this.NumericColumn;                      case 19: return this.DateColumn;                      case 20: return this.DateTimeColumn;                      case 21: return this.TimeColumn;                      case 22: return this.YearColumn;                      case 23: return this.BinaryColumn;                      case 24: return this.VarBinaryColumn;                      case 25: return this.TinyBlobColumn;                      case 26: return this.MediumBlobColumn;                      case 27: return this.BlobColumn;                      case 28: return this.LongBlobColumn;                      case 29: return this.TinyTextColumn;                      case 30: return this.MediumTextColumn;                      case 31: return this.TextColumn;                      case 32: return this.LongTextColumn;                      case 33: return this.GeometryColumn;                      case 34: return this.EnumColumn;                      case 35: return this.SetColumn;                      case 36: return this.NotNullCharColumn;                      case 37: return this.NotNullVarCharColumn;                      case 38: return this.NotNullBitColumn;                      case 39: return this.NotNullTinyIntColumn;                      case 40: return this.NotNullSmallIntColumn;                      case 41: return this.NotNullMediumIntColumn;                      case 42: return this.NotNullIntColumn;                      case 43: return this.NotNullBigIntColumn;                      case 44: return this.NotNullTinyIntUnsignedColumn;                      case 45: return this.NotNullSmallIntUnsignedColumn;                      case 46: return this.NotNullMediumIntUnsignedColumn;                      case 47: return this.NotNullIntUnsignedColumn;                      case 48: return this.NotNullBigIntUnsignedColumn;                      case 49: return this.NotNullFloatColumn;                      case 50: return this.NotNullDoubleColumn;                      case 51: return this.NotNullDecimalColumn;                      case 52: return this.NotNullNumericColumn;                      case 53: return this.NotNullDateColumn;                      case 54: return this.NotNullDateTimeColumn;                      case 55: return this.NotNullTimeColumn;                      case 56: return this.NotNullYearColumn;                      case 57: return this.NotNullBinaryColumn;                      case 58: return this.NotNullVarBinaryColumn;                      case 59: return this.NotNullTinyBlobColumn;                      case 60: return this.NotNullTinyTextColumn;                      case 61: return this.NotNullBlobColumn;                      case 62: return this.NotNullTextColumn;                      case 63: return this.NotNullMediumBlobColumn;                      case 64: return this.NotNullMediumTextColumn;                      case 65: return this.NotNullLongBlobColumn;                      case 66: return this.NotNullLongTextColumn;                      case 67: return this.NotNullGeometryColumn;                      case 68: return this.NotNullEnumColumn;                      case 69: return this.NotNullSetColumn;                  }
Missing Default,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.PrimaryKeyColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.CharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.CharColumn = newValue;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.VarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.VarCharColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.TinyIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.TinyIntColumn = newValue.Value;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.SmallIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.SmallIntColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.MediumIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.MediumIntColumn = newValue.Value;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.IntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 9:                          if (value == null)                          {                              this.BigIntColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 10:                          if (value == null)                          {                              this.TinyIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.TinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 11:                          if (value == null)                          {                              this.SmallIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.SmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 12:                          if (value == null)                          {                              this.MediumIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.MediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 13:                          if (value == null)                          {                              this.IntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.IntUnsignedColumn = newValue.Value;                              return true;                          }                      case 14:                          if (value == null)                          {                              this.BigIntUnsignedColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.BigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 15:                          if (value == null)                          {                              this.FloatColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 16:                          if (value == null)                          {                              this.DoubleColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.DoubleColumn = newValue.Value;                              return true;                          }                      case 17:                          if (value == null)                          {                              this.DecimalColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.DecimalColumn = newValue.Value;                              return true;                          }                      case 18:                          if (value == null)                          {                              this.NumericColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NumericColumn = newValue.Value;                              return true;                          }                      case 19:                          if (value == null)                          {                              this.DateColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateColumn = newValue.Value;                              return true;                          }                      case 20:                          if (value == null)                          {                              this.DateTimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.DateTimeColumn = newValue.Value;                              return true;                          }                      case 21:                          if (value == null)                          {                              this.TimeColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.TimeColumn = newValue.Value;                              return true;                          }                      case 22:                          if (value == null)                          {                              this.YearColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.YearColumn = newValue.Value;                              return true;                          }                      case 23:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 24:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 25:                          if (value == null)                          {                              this.TinyBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.TinyBlobColumn = newValue;                              return true;                          }                      case 26:                          if (value == null)                          {                              this.MediumBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.MediumBlobColumn = newValue;                              return true;                          }                      case 27:                          if (value == null)                          {                              this.BlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BlobColumn = newValue;                              return true;                          }                      case 28:                          if (value == null)                          {                              this.LongBlobColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.LongBlobColumn = newValue;                              return true;                          }                      case 29:                          if (value == null)                          {                              this.TinyTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TinyTextColumn = newValue;                              return true;                          }                      case 30:                          if (value == null)                          {                              this.MediumTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.MediumTextColumn = newValue;                              return true;                          }                      case 31:                          if (value == null)                          {                              this.TextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.TextColumn = newValue;                              return true;                          }                      case 32:                          if (value == null)                          {                              this.LongTextColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.LongTextColumn = newValue;                              return true;                          }                      case 33:                          if (value == null)                          {                              this.GeometryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.GeometryColumn = newValue.Value;                              return true;                          }                      case 34:                          if (value == null)                          {                              this.EnumColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.EnumColumn = newValue.Value;                              return true;                          }                      case 35:                          if (value == null)                          {                              this.SetColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.SetColumn = newValue.Value;                              return true;                          }                      case 36:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullCharColumn = newValue;                              return true;                          }                      case 37:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullVarCharColumn = newValue;                              return true;                          }                      case 38:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.NotNullBitColumn = newValue.Value;                              return true;                          }                      case 39:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntColumn = newValue.Value;                              return true;                          }                      case 40:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntColumn = newValue.Value;                              return true;                          }                      case 41:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntColumn = newValue.Value;                              return true;                          }                      case 42:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullIntColumn = newValue.Value;                              return true;                          }                      case 43:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntColumn = newValue.Value;                              return true;                          }                      case 44:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToByte(value);                              if (newValue == null) return false;                              this.NotNullTinyIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 45:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt16(value);                              if (newValue == null) return false;                              this.NotNullSmallIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 46:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullMediumIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 47:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt32(value);                              if (newValue == null) return false;                              this.NotNullIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 48:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToUInt64(value);                              if (newValue == null) return false;                              this.NotNullBigIntUnsignedColumn = newValue.Value;                              return true;                          }                      case 49:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.NotNullFloatColumn = newValue.Value;                              return true;                          }                      case 50:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDouble(value);                              if (newValue == null) return false;                              this.NotNullDoubleColumn = newValue.Value;                              return true;                          }                      case 51:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullDecimalColumn = newValue.Value;                              return true;                          }                      case 52:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDecimal(value);                              if (newValue == null) return false;                              this.NotNullNumericColumn = newValue.Value;                              return true;                          }                      case 53:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateColumn = newValue.Value;                              return true;                          }                      case 54:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.NotNullDateTimeColumn = newValue.Value;                              return true;                          }                      case 55:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToTimeSpan(value);                              if (newValue == null) return false;                              this.NotNullTimeColumn = newValue.Value;                              return true;                          }                      case 56:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.NotNullYearColumn = newValue.Value;                              return true;                          }                      case 57:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBinaryColumn = newValue;                              return true;                          }                      case 58:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullVarBinaryColumn = newValue;                              return true;                          }                      case 59:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullTinyBlobColumn = newValue;                              return true;                          }                      case 60:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTinyTextColumn = newValue;                              return true;                          }                      case 61:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullBlobColumn = newValue;                              return true;                          }                      case 62:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullTextColumn = newValue;                              return true;                          }                      case 63:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullMediumBlobColumn = newValue;                              return true;                          }                      case 64:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullMediumTextColumn = newValue;                              return true;                          }                      case 65:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.NotNullLongBlobColumn = newValue;                              return true;                          }                      case 66:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NotNullLongTextColumn = newValue;                              return true;                          }                      case 67:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = value as global::MySql.Data.Types.MySqlGeometry?;                              if (newValue == null) return false;                              this.NotNullGeometryColumn = newValue.Value;                              return true;                          }                      case 68:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MyEnum>(value);                              if (newValue == null) return false;                              this.NotNullEnumColumn = newValue.Value;                              return true;                          }                      case 69:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToEnum<MySet>(value);                              if (newValue == null) return false;                              this.NotNullSetColumn = newValue.Value;                              return true;                          }                  }
Missing Default,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.IntColumn;                      case 1: return this.TimestampColumn;                      case 2: return this.NVarCharColumn;                  }
Missing Default,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
Missing Default,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,GetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0: return this.BigIntColumn;                      case 1: return this.IntColumn;                      case 2: return this.FloatColumn;                      case 3: return this.BinaryColumn;                      case 4: return this.TimestampColumn;                      case 5: return this.VarBinaryColumn;                      case 6: return this.BitColumn;                      case 7: return this.NCharColumn;                      case 8: return this.NVarCharColumn;                  }
Missing Default,HigLabo.DbSharpSample.MySql,Record,D:\research\architectureSmells\repos\higty_higlabo\Tools\DbSharp\HigLabo.DbSharp.Sample\DbSharpSample.Data.MySql.CSharp\GeneratedFiles\Table\alldatatypetable.Record.cs,SetValue,The following switch statement is missing a default case: switch (index)                  {                      case 0:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt64(value);                              if (newValue == null) return false;                              this.BigIntColumn = newValue.Value;                              return true;                          }                      case 1:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToInt32(value);                              if (newValue == null) return false;                              this.IntColumn = newValue.Value;                              return true;                          }                      case 2:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToSingle(value);                              if (newValue == null) return false;                              this.FloatColumn = newValue.Value;                              return true;                          }                      case 3:                          if (value == null)                          {                              this.BinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.BinaryColumn = newValue;                              return true;                          }                      case 4:                          if (value == null)                          {                              return false;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToDateTime(value);                              if (newValue == null) return false;                              this.TimestampColumn = newValue.Value;                              return true;                          }                      case 5:                          if (value == null)                          {                              this.VarBinaryColumn = null;                              return true;                          }                          else                          {                              var newValue = value as Byte[];                              if (newValue == null) return false;                              this.VarBinaryColumn = newValue;                              return true;                          }                      case 6:                          if (value == null)                          {                              this.BitColumn = null;                              return true;                          }                          else                          {                              var newValue = TableRecord.TypeConverter.ToBoolean(value);                              if (newValue == null) return false;                              this.BitColumn = newValue.Value;                              return true;                          }                      case 7:                          if (value == null)                          {                              this.NCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NCharColumn = newValue;                              return true;                          }                      case 8:                          if (value == null)                          {                              this.NVarCharColumn = null;                              return true;                          }                          else                          {                              var newValue = value as String;                              if (newValue == null) return false;                              this.NVarCharColumn = newValue;                              return true;                          }                  }
