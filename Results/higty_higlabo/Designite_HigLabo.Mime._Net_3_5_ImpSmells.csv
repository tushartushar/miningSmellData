Implementation smell,Namespace,Class,File,Method,Description
Long Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The method has 137 lines of code.
Complex Method,HigLabo.Mime,TransferEncodingExtensions,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Core\TransferEncoding.cs,ToHeaderText,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,Cyclomatic complexity of the method is 11
Complex Method,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,CreateMailAddressList,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadHeaderAndMessageBody,Cyclomatic complexity of the method is 14
Complex Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseMimeHeaderParameter,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,Cyclomatic complexity of the method is 11
Complex Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,SetMimeMessageBodyText,Cyclomatic complexity of the method is 15
Complex Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,Cyclomatic complexity of the method is 38
Complex Method,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,SetMimeContentBody,Cyclomatic complexity of the method is 20
Complex Method,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,Cyclomatic complexity of the method is 10
Complex Method,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,Cyclomatic complexity of the method is 14
Long Statement,HigLabo.Mime,MimeContent,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeContent.cs,GetDecodedData,The length of the statement  "		throw new InvalidOperationException ("BodyData is not loaded.Please ensure to set MimeParser.Filter.LoadContentBodyData = true when you download mail."); " is 153.
Long Statement,HigLabo.Mime,MimeMessage,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeMessage.cs,GetRawText,The length of the statement  "		throw new InvalidOperationException ("RawData is not loaded.Please ensure to set MimeParser.Filter.LoadContentBodyData = true when you download mail."); " is 152.
Long Statement,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseContentType,The length of the statement  "	header.FormatFlowed = String.Equals (header.GetParameterValue ("format")' "flowed"' StringComparison.OrdinalIgnoreCase); " is 120.
Long Statement,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The length of the statement  "			p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value)); " is 139.
Long Statement,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The length of the statement  "	Boolean endWithNewline = lastBytes.Length > 1 && lastBytes [lastBytes.Length - 2] == 13 && lastBytes [lastBytes.Length - 1] == 10; " is 130.
Complex Conditional,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ParseMimeHeaderParameter,The conditional expression  "(insideDoubleQuatation == false && c == ';') || //attribute=value;  (insideDoubleQuatation == true && previousChar == '"' && c == ';') || // attribute="value";  c == '\n' || c == '\r' || c == '\t' || i == length - 1"  is complex.
Magic Number,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: for (int i = 0; i < trimValue.Length; i++) {  	if ((Byte)trimValue [i] >= 128) {  		m.AsciiCharOnly = false;  	}  	if (trimValue [i] == ' ') {  		displayNameEndIndex = i;  	}  	if (trimValue [i] == '<') {  		valueIndex = i + 1;  	}  	if (trimValue [i] == '@') {  		atmarkIndex = i;  	}  	if (atmarkIndex > -1 && trimValue [i] == '>') {  		valueEndIndex = i;  		break;  	}  }  
Magic Number,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: if ((Byte)trimValue [i] >= 128) {  	m.AsciiCharOnly = false;  }  
Magic Number,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: if (valueIndex > -1) {  	//"Bill Gates" <bill@microsoft.com>  	//Bill <bill@microsoft.com>  	//<bill@microsoft.com>  	m.DisplayName = trimValue.Substring (0' displayNameEndIndex).Trim ();  	if (m.DisplayName.Length > 1 && m.DisplayName [0] == '"' && m.DisplayName [m.DisplayName.Length - 1] == '"') {  		m.DisplayName = m.DisplayName.Substring (1' m.DisplayName.Length - 2);  	}  	m.Value = trimValue.Substring (valueIndex' valueEndIndex - valueIndex);  	m.UserName = trimValue.Substring (valueIndex' atmarkIndex - valueIndex);  	m.DomainName = trimValue.Substring (atmarkIndex + 1' valueEndIndex - atmarkIndex - 1);  } else {  	//bill@microsoft.com  	valueIndex = 0;  	m.Value = value;  	m.UserName = trimValue.Substring (valueIndex' atmarkIndex - valueIndex);  	m.DomainName = trimValue.Substring (atmarkIndex + 1' valueEndIndex - atmarkIndex);  }  
Magic Number,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: if (m.DisplayName.Length > 1 && m.DisplayName [0] == '"' && m.DisplayName [m.DisplayName.Length - 1] == '"') {  	m.DisplayName = m.DisplayName.Substring (1' m.DisplayName.Length - 2);  }  
Magic Number,HigLabo.Mime,MailAddress,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mail\MailAddress.cs,SetProperty,The following statement contains a magic number: m.DisplayName = m.DisplayName.Substring (1' m.DisplayName.Length - 2);  
Magic Number,HigLabo.Mime,MimeContent,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeContent.cs,GetDecodedData,The following statement contains a magic number: if (this.ContentTransferEncoding == TransferEncoding.Base64) {  	var cv = new Base64Converter (9000);  	bb = cv.Decode (bb);  } else if (this.ContentTransferEncoding == TransferEncoding.QuotedPrintable) {  	var cv = new QuotedPrintableConverter (9000' QuotedPrintableConvertMode.Default);  	bb = cv.Decode (bb);  }  
Magic Number,HigLabo.Mime,MimeContent,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeContent.cs,GetDecodedData,The following statement contains a magic number: if (this.ContentTransferEncoding == TransferEncoding.Base64) {  	var cv = new Base64Converter (9000);  	bb = cv.Decode (bb);  } else if (this.ContentTransferEncoding == TransferEncoding.QuotedPrintable) {  	var cv = new QuotedPrintableConverter (9000' QuotedPrintableConvertMode.Default);  	bb = cv.Decode (bb);  }  
Magic Number,HigLabo.Mime,MimeContent,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeContent.cs,GetDecodedData,The following statement contains a magic number: if (this.ContentTransferEncoding == TransferEncoding.QuotedPrintable) {  	var cv = new QuotedPrintableConverter (9000' QuotedPrintableConvertMode.Default);  	bb = cv.Decode (bb);  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,AddToRawDataWithNewline,The following statement contains a magic number: _RawData.Add (new Byte[] {  	13'  	10  });  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,AddToRawDataWithNewline,The following statement contains a magic number: _RawData.Add (new Byte[] {  	13'  	10  });  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadFromStream,The following statement contains a magic number: buffer [lastLineLength + readLength] = 10;  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual == -1) {  	p.RawText = rawText;  	p.RawValue = p.RawText;  	p.Value = p.RawValue;  } else if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual == -1) {  	p.RawText = rawText;  	p.RawValue = p.RawText;  	p.Value = p.RawValue;  } else if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual == -1) {  	p.RawText = rawText;  	p.RawValue = p.RawText;  	p.Value = p.RawValue;  } else if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual == -1) {  	p.RawText = rawText;  	p.RawValue = p.RawText;  	p.Value = p.RawValue;  } else if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (indexOfEqual > -1) {  	Int32? startIndexOfOrdinal = null;  	Int32? lastIndexOfOrdinal = null;  	p.RawText = rawText;  	p.RawValue = rawText.Substring (indexOfEqual + 1' p.RawText.Length - (indexOfEqual + 1));  	//filename*=value  	//filename*0=value  	//filename*0*=value  	for (int i = indexOfEqual - 1; i > 0; i--) {  		var c = (Byte)p.RawText [i];  		if (i == indexOfEqual - 1 && c == 42)//*  		 {  			p.IsEncoded = true;  			continue;  		} else if (c >= 48 && c <= 57)//0-9  		 {  			if (lastIndexOfOrdinal.HasValue == false) {  				lastIndexOfOrdinal = i;  			}  			startIndexOfOrdinal = i;  			continue;  		}  		if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  		 {  			startIndexOfOrdinal = null;  			lastIndexOfOrdinal = null;  		}  		break;  	}  	if (startIndexOfOrdinal.HasValue == true) {  		p.Rfc2231Ordinal = Int32.Parse (p.RawText.Substring (startIndexOfOrdinal.Value' lastIndexOfOrdinal.Value + 1 - startIndexOfOrdinal.Value));  		p.Key = p.RawText.Substring (0' startIndexOfOrdinal.Value - 1);  		p.Value = p.RawValue;  	} else {  		if (p.IsEncoded == true) {  			p.Key = p.RawText.Substring (0' indexOfEqual - 1);  			p.Value = _Rfc2231Converter.Decode (p.RawValue);  		} else {  			p.Key = p.RawText.Substring (0' indexOfEqual);  			p.Value = p.RawValue;  		}  	}  	if (p.Value.StartsWith ("\"") && p.Value.EndsWith ("\"")) {  		p.Value = p.Value.Trim ('"');  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: for (int i = indexOfEqual - 1; i > 0; i--) {  	var c = (Byte)p.RawText [i];  	if (i == indexOfEqual - 1 && c == 42)//*  	 {  		p.IsEncoded = true;  		continue;  	} else if (c >= 48 && c <= 57)//0-9  	 {  		if (lastIndexOfOrdinal.HasValue == false) {  			lastIndexOfOrdinal = i;  		}  		startIndexOfOrdinal = i;  		continue;  	}  	if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  	 {  		startIndexOfOrdinal = null;  		lastIndexOfOrdinal = null;  	}  	break;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: for (int i = indexOfEqual - 1; i > 0; i--) {  	var c = (Byte)p.RawText [i];  	if (i == indexOfEqual - 1 && c == 42)//*  	 {  		p.IsEncoded = true;  		continue;  	} else if (c >= 48 && c <= 57)//0-9  	 {  		if (lastIndexOfOrdinal.HasValue == false) {  			lastIndexOfOrdinal = i;  		}  		startIndexOfOrdinal = i;  		continue;  	}  	if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  	 {  		startIndexOfOrdinal = null;  		lastIndexOfOrdinal = null;  	}  	break;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: for (int i = indexOfEqual - 1; i > 0; i--) {  	var c = (Byte)p.RawText [i];  	if (i == indexOfEqual - 1 && c == 42)//*  	 {  		p.IsEncoded = true;  		continue;  	} else if (c >= 48 && c <= 57)//0-9  	 {  		if (lastIndexOfOrdinal.HasValue == false) {  			lastIndexOfOrdinal = i;  		}  		startIndexOfOrdinal = i;  		continue;  	}  	if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  	 {  		startIndexOfOrdinal = null;  		lastIndexOfOrdinal = null;  	}  	break;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: for (int i = indexOfEqual - 1; i > 0; i--) {  	var c = (Byte)p.RawText [i];  	if (i == indexOfEqual - 1 && c == 42)//*  	 {  		p.IsEncoded = true;  		continue;  	} else if (c >= 48 && c <= 57)//0-9  	 {  		if (lastIndexOfOrdinal.HasValue == false) {  			lastIndexOfOrdinal = i;  		}  		startIndexOfOrdinal = i;  		continue;  	}  	if (lastIndexOfOrdinal.HasValue == true && c != 42)//*  	 {  		startIndexOfOrdinal = null;  		lastIndexOfOrdinal = null;  	}  	break;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (i == indexOfEqual - 1 && c == 42)//*   {  	p.IsEncoded = true;  	continue;  } else if (c >= 48 && c <= 57)//0-9   {  	if (lastIndexOfOrdinal.HasValue == false) {  		lastIndexOfOrdinal = i;  	}  	startIndexOfOrdinal = i;  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (i == indexOfEqual - 1 && c == 42)//*   {  	p.IsEncoded = true;  	continue;  } else if (c >= 48 && c <= 57)//0-9   {  	if (lastIndexOfOrdinal.HasValue == false) {  		lastIndexOfOrdinal = i;  	}  	startIndexOfOrdinal = i;  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (i == indexOfEqual - 1 && c == 42)//*   {  	p.IsEncoded = true;  	continue;  } else if (c >= 48 && c <= 57)//0-9   {  	if (lastIndexOfOrdinal.HasValue == false) {  		lastIndexOfOrdinal = i;  	}  	startIndexOfOrdinal = i;  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (c >= 48 && c <= 57)//0-9   {  	if (lastIndexOfOrdinal.HasValue == false) {  		lastIndexOfOrdinal = i;  	}  	startIndexOfOrdinal = i;  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (c >= 48 && c <= 57)//0-9   {  	if (lastIndexOfOrdinal.HasValue == false) {  		lastIndexOfOrdinal = i;  	}  	startIndexOfOrdinal = i;  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,CreateMimeHeaderParameter,The following statement contains a magic number: if (lastIndexOfOrdinal.HasValue == true && c != 42)//*   {  	startIndexOfOrdinal = null;  	lastIndexOfOrdinal = null;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: while (true) {  	if (context == null) {  		this.ReadFromStream (cx);  	}  	context = null;  	while (true) {  		switch (state) {  		case MimeContentParserState.Boundary:  			#region  			{  				line = cx.ReadLine ();  				if (line.Length == 0) {  					continue;  				}  				this.AddToRawData (line);  				if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  					continue;  				}  				bodyBuffer.AddBoundaryLine (line);  				if (IsEndByNewLine (line) == true) {  					boundaryResult = bodyBuffer.CheckBoundary (boundary);  					switch (boundaryResult) {  					case CheckBoundaryResult.None: {  						var lineText = this.Encoding.GetString (line);  						throw new InvalidMimeFormatException (""' lineText);  					}  					case CheckBoundaryResult.Boundary:  						{  							headerPointer.Clear ();  							state = MimeContentParserState.Header;  						}  						break;  					case CheckBoundaryResult.EndBoundary:  						break;  					default:  						throw new InvalidOperationException ();  					}  				}  			}  			break;  		#endregion  		case MimeContentParserState.Header:  			#region  			{  				headerPointer = cx.ReadHeader (headerPointer);  				if (headerPointer.IsEmptyNewLine () == true) {  					var bb = headerPointer.ToArray ();  					this.AddToRawData (bb);  					bodyBuffer.AddHeaderLine (bb);  					bodyBuffer.HeaderLength = bodyBuffer.Length;  					headerPointer.Clear ();  					if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  						childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  						state = MimeContentParserState.ChildContent;  					} else {  						state = MimeContentParserState.Body;  					}  				} else if (headerPointer.IsEnd == true) {  					var bb = headerPointer.ToArray ();  					this.AddToRawData (bb);  					//New MimeHeader  					var header = ParseHeader (headerPointer);  					mc.Headers.Add (header);  					headerPointer.Clear ();  					bodyBuffer.AddHeaderLine (bb);  				}  			}  			break;  		#endregion  		case MimeContentParserState.Body:  			#region  			{  				var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  				bodyBuffer.AddBodyLine (bodyLine);  				if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  					this.SetMimeContentBody (mc' bodyBuffer);  					l.Add (mc);  					headerPointer.Clear ();  					bodyBuffer.Clear ();  					mc = new MimeContent ();  					state = MimeContentParserState.Boundary;  				}  			}  			break;  		#endregion  		case MimeContentParserState.ChildContent:  			#region  			{  				var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  				bodyBuffer.AddBodyLine (bodyLine);  				if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  					if (bodyBuffer.Length > 0) {  						this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  					}  					mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  					bodyBuffer.Clear ();  					state = MimeContentParserState.Body;  				}  			}  			break;  		#endregion  		default:  			throw new InvalidOperationException ();  		}  		if (cx.IsEnd () == true) {  			break;  		}  		if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary) {  			break;  		}  	}  	if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary || cx.EndOfStream == true) {  		break;  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: while (true) {  	if (context == null) {  		this.ReadFromStream (cx);  	}  	context = null;  	while (true) {  		switch (state) {  		case MimeContentParserState.Boundary:  			#region  			{  				line = cx.ReadLine ();  				if (line.Length == 0) {  					continue;  				}  				this.AddToRawData (line);  				if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  					continue;  				}  				bodyBuffer.AddBoundaryLine (line);  				if (IsEndByNewLine (line) == true) {  					boundaryResult = bodyBuffer.CheckBoundary (boundary);  					switch (boundaryResult) {  					case CheckBoundaryResult.None: {  						var lineText = this.Encoding.GetString (line);  						throw new InvalidMimeFormatException (""' lineText);  					}  					case CheckBoundaryResult.Boundary:  						{  							headerPointer.Clear ();  							state = MimeContentParserState.Header;  						}  						break;  					case CheckBoundaryResult.EndBoundary:  						break;  					default:  						throw new InvalidOperationException ();  					}  				}  			}  			break;  		#endregion  		case MimeContentParserState.Header:  			#region  			{  				headerPointer = cx.ReadHeader (headerPointer);  				if (headerPointer.IsEmptyNewLine () == true) {  					var bb = headerPointer.ToArray ();  					this.AddToRawData (bb);  					bodyBuffer.AddHeaderLine (bb);  					bodyBuffer.HeaderLength = bodyBuffer.Length;  					headerPointer.Clear ();  					if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  						childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  						state = MimeContentParserState.ChildContent;  					} else {  						state = MimeContentParserState.Body;  					}  				} else if (headerPointer.IsEnd == true) {  					var bb = headerPointer.ToArray ();  					this.AddToRawData (bb);  					//New MimeHeader  					var header = ParseHeader (headerPointer);  					mc.Headers.Add (header);  					headerPointer.Clear ();  					bodyBuffer.AddHeaderLine (bb);  				}  			}  			break;  		#endregion  		case MimeContentParserState.Body:  			#region  			{  				var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  				bodyBuffer.AddBodyLine (bodyLine);  				if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  					this.SetMimeContentBody (mc' bodyBuffer);  					l.Add (mc);  					headerPointer.Clear ();  					bodyBuffer.Clear ();  					mc = new MimeContent ();  					state = MimeContentParserState.Boundary;  				}  			}  			break;  		#endregion  		case MimeContentParserState.ChildContent:  			#region  			{  				var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  				bodyBuffer.AddBodyLine (bodyLine);  				if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  					if (bodyBuffer.Length > 0) {  						this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  					}  					mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  					bodyBuffer.Clear ();  					state = MimeContentParserState.Body;  				}  			}  			break;  		#endregion  		default:  			throw new InvalidOperationException ();  		}  		if (cx.IsEnd () == true) {  			break;  		}  		if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary) {  			break;  		}  	}  	if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary || cx.EndOfStream == true) {  		break;  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: while (true) {  	if (context == null) {  		this.ReadFromStream (cx);  	}  	context = null;  	while (true) {  		switch (state) {  		case MimeContentParserState.Boundary:  			#region  			{  				line = cx.ReadLine ();  				if (line.Length == 0) {  					continue;  				}  				this.AddToRawData (line);  				if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  					continue;  				}  				bodyBuffer.AddBoundaryLine (line);  				if (IsEndByNewLine (line) == true) {  					boundaryResult = bodyBuffer.CheckBoundary (boundary);  					switch (boundaryResult) {  					case CheckBoundaryResult.None: {  						var lineText = this.Encoding.GetString (line);  						throw new InvalidMimeFormatException (""' lineText);  					}  					case CheckBoundaryResult.Boundary:  						{  							headerPointer.Clear ();  							state = MimeContentParserState.Header;  						}  						break;  					case CheckBoundaryResult.EndBoundary:  						break;  					default:  						throw new InvalidOperationException ();  					}  				}  			}  			break;  		#endregion  		case MimeContentParserState.Header:  			#region  			{  				headerPointer = cx.ReadHeader (headerPointer);  				if (headerPointer.IsEmptyNewLine () == true) {  					var bb = headerPointer.ToArray ();  					this.AddToRawData (bb);  					bodyBuffer.AddHeaderLine (bb);  					bodyBuffer.HeaderLength = bodyBuffer.Length;  					headerPointer.Clear ();  					if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  						childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  						state = MimeContentParserState.ChildContent;  					} else {  						state = MimeContentParserState.Body;  					}  				} else if (headerPointer.IsEnd == true) {  					var bb = headerPointer.ToArray ();  					this.AddToRawData (bb);  					//New MimeHeader  					var header = ParseHeader (headerPointer);  					mc.Headers.Add (header);  					headerPointer.Clear ();  					bodyBuffer.AddHeaderLine (bb);  				}  			}  			break;  		#endregion  		case MimeContentParserState.Body:  			#region  			{  				var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  				bodyBuffer.AddBodyLine (bodyLine);  				if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  					this.SetMimeContentBody (mc' bodyBuffer);  					l.Add (mc);  					headerPointer.Clear ();  					bodyBuffer.Clear ();  					mc = new MimeContent ();  					state = MimeContentParserState.Boundary;  				}  			}  			break;  		#endregion  		case MimeContentParserState.ChildContent:  			#region  			{  				var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  				bodyBuffer.AddBodyLine (bodyLine);  				if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  					if (bodyBuffer.Length > 0) {  						this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  					}  					mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  					bodyBuffer.Clear ();  					state = MimeContentParserState.Body;  				}  			}  			break;  		#endregion  		default:  			throw new InvalidOperationException ();  		}  		if (cx.IsEnd () == true) {  			break;  		}  		if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary) {  			break;  		}  	}  	if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary || cx.EndOfStream == true) {  		break;  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: while (true) {  	switch (state) {  	case MimeContentParserState.Boundary:  		#region  		{  			line = cx.ReadLine ();  			if (line.Length == 0) {  				continue;  			}  			this.AddToRawData (line);  			if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  				continue;  			}  			bodyBuffer.AddBoundaryLine (line);  			if (IsEndByNewLine (line) == true) {  				boundaryResult = bodyBuffer.CheckBoundary (boundary);  				switch (boundaryResult) {  				case CheckBoundaryResult.None: {  					var lineText = this.Encoding.GetString (line);  					throw new InvalidMimeFormatException (""' lineText);  				}  				case CheckBoundaryResult.Boundary:  					{  						headerPointer.Clear ();  						state = MimeContentParserState.Header;  					}  					break;  				case CheckBoundaryResult.EndBoundary:  					break;  				default:  					throw new InvalidOperationException ();  				}  			}  		}  		break;  	#endregion  	case MimeContentParserState.Header:  		#region  		{  			headerPointer = cx.ReadHeader (headerPointer);  			if (headerPointer.IsEmptyNewLine () == true) {  				var bb = headerPointer.ToArray ();  				this.AddToRawData (bb);  				bodyBuffer.AddHeaderLine (bb);  				bodyBuffer.HeaderLength = bodyBuffer.Length;  				headerPointer.Clear ();  				if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  					childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  					state = MimeContentParserState.ChildContent;  				} else {  					state = MimeContentParserState.Body;  				}  			} else if (headerPointer.IsEnd == true) {  				var bb = headerPointer.ToArray ();  				this.AddToRawData (bb);  				//New MimeHeader  				var header = ParseHeader (headerPointer);  				mc.Headers.Add (header);  				headerPointer.Clear ();  				bodyBuffer.AddHeaderLine (bb);  			}  		}  		break;  	#endregion  	case MimeContentParserState.Body:  		#region  		{  			var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  			bodyBuffer.AddBodyLine (bodyLine);  			if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  				this.SetMimeContentBody (mc' bodyBuffer);  				l.Add (mc);  				headerPointer.Clear ();  				bodyBuffer.Clear ();  				mc = new MimeContent ();  				state = MimeContentParserState.Boundary;  			}  		}  		break;  	#endregion  	case MimeContentParserState.ChildContent:  		#region  		{  			var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  			bodyBuffer.AddBodyLine (bodyLine);  			if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  				if (bodyBuffer.Length > 0) {  					this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  				}  				mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  				bodyBuffer.Clear ();  				state = MimeContentParserState.Body;  			}  		}  		break;  	#endregion  	default:  		throw new InvalidOperationException ();  	}  	if (cx.IsEnd () == true) {  		break;  	}  	if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary) {  		break;  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: while (true) {  	switch (state) {  	case MimeContentParserState.Boundary:  		#region  		{  			line = cx.ReadLine ();  			if (line.Length == 0) {  				continue;  			}  			this.AddToRawData (line);  			if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  				continue;  			}  			bodyBuffer.AddBoundaryLine (line);  			if (IsEndByNewLine (line) == true) {  				boundaryResult = bodyBuffer.CheckBoundary (boundary);  				switch (boundaryResult) {  				case CheckBoundaryResult.None: {  					var lineText = this.Encoding.GetString (line);  					throw new InvalidMimeFormatException (""' lineText);  				}  				case CheckBoundaryResult.Boundary:  					{  						headerPointer.Clear ();  						state = MimeContentParserState.Header;  					}  					break;  				case CheckBoundaryResult.EndBoundary:  					break;  				default:  					throw new InvalidOperationException ();  				}  			}  		}  		break;  	#endregion  	case MimeContentParserState.Header:  		#region  		{  			headerPointer = cx.ReadHeader (headerPointer);  			if (headerPointer.IsEmptyNewLine () == true) {  				var bb = headerPointer.ToArray ();  				this.AddToRawData (bb);  				bodyBuffer.AddHeaderLine (bb);  				bodyBuffer.HeaderLength = bodyBuffer.Length;  				headerPointer.Clear ();  				if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  					childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  					state = MimeContentParserState.ChildContent;  				} else {  					state = MimeContentParserState.Body;  				}  			} else if (headerPointer.IsEnd == true) {  				var bb = headerPointer.ToArray ();  				this.AddToRawData (bb);  				//New MimeHeader  				var header = ParseHeader (headerPointer);  				mc.Headers.Add (header);  				headerPointer.Clear ();  				bodyBuffer.AddHeaderLine (bb);  			}  		}  		break;  	#endregion  	case MimeContentParserState.Body:  		#region  		{  			var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  			bodyBuffer.AddBodyLine (bodyLine);  			if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  				this.SetMimeContentBody (mc' bodyBuffer);  				l.Add (mc);  				headerPointer.Clear ();  				bodyBuffer.Clear ();  				mc = new MimeContent ();  				state = MimeContentParserState.Boundary;  			}  		}  		break;  	#endregion  	case MimeContentParserState.ChildContent:  		#region  		{  			var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  			bodyBuffer.AddBodyLine (bodyLine);  			if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  				if (bodyBuffer.Length > 0) {  					this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  				}  				mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  				bodyBuffer.Clear ();  				state = MimeContentParserState.Body;  			}  		}  		break;  	#endregion  	default:  		throw new InvalidOperationException ();  	}  	if (cx.IsEnd () == true) {  		break;  	}  	if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary) {  		break;  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: while (true) {  	switch (state) {  	case MimeContentParserState.Boundary:  		#region  		{  			line = cx.ReadLine ();  			if (line.Length == 0) {  				continue;  			}  			this.AddToRawData (line);  			if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  				continue;  			}  			bodyBuffer.AddBoundaryLine (line);  			if (IsEndByNewLine (line) == true) {  				boundaryResult = bodyBuffer.CheckBoundary (boundary);  				switch (boundaryResult) {  				case CheckBoundaryResult.None: {  					var lineText = this.Encoding.GetString (line);  					throw new InvalidMimeFormatException (""' lineText);  				}  				case CheckBoundaryResult.Boundary:  					{  						headerPointer.Clear ();  						state = MimeContentParserState.Header;  					}  					break;  				case CheckBoundaryResult.EndBoundary:  					break;  				default:  					throw new InvalidOperationException ();  				}  			}  		}  		break;  	#endregion  	case MimeContentParserState.Header:  		#region  		{  			headerPointer = cx.ReadHeader (headerPointer);  			if (headerPointer.IsEmptyNewLine () == true) {  				var bb = headerPointer.ToArray ();  				this.AddToRawData (bb);  				bodyBuffer.AddHeaderLine (bb);  				bodyBuffer.HeaderLength = bodyBuffer.Length;  				headerPointer.Clear ();  				if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  					childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  					state = MimeContentParserState.ChildContent;  				} else {  					state = MimeContentParserState.Body;  				}  			} else if (headerPointer.IsEnd == true) {  				var bb = headerPointer.ToArray ();  				this.AddToRawData (bb);  				//New MimeHeader  				var header = ParseHeader (headerPointer);  				mc.Headers.Add (header);  				headerPointer.Clear ();  				bodyBuffer.AddHeaderLine (bb);  			}  		}  		break;  	#endregion  	case MimeContentParserState.Body:  		#region  		{  			var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  			bodyBuffer.AddBodyLine (bodyLine);  			if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  				this.SetMimeContentBody (mc' bodyBuffer);  				l.Add (mc);  				headerPointer.Clear ();  				bodyBuffer.Clear ();  				mc = new MimeContent ();  				state = MimeContentParserState.Boundary;  			}  		}  		break;  	#endregion  	case MimeContentParserState.ChildContent:  		#region  		{  			var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  			bodyBuffer.AddBodyLine (bodyLine);  			if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  				if (bodyBuffer.Length > 0) {  					this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  				}  				mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  				bodyBuffer.Clear ();  				state = MimeContentParserState.Body;  			}  		}  		break;  	#endregion  	default:  		throw new InvalidOperationException ();  	}  	if (cx.IsEnd () == true) {  		break;  	}  	if (isEndOfBody == true || boundaryResult == CheckBoundaryResult.EndBoundary) {  		break;  	}  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: switch (state) {  case MimeContentParserState.Boundary:  	#region  	{  		line = cx.ReadLine ();  		if (line.Length == 0) {  			continue;  		}  		this.AddToRawData (line);  		if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  			continue;  		}  		bodyBuffer.AddBoundaryLine (line);  		if (IsEndByNewLine (line) == true) {  			boundaryResult = bodyBuffer.CheckBoundary (boundary);  			switch (boundaryResult) {  			case CheckBoundaryResult.None: {  				var lineText = this.Encoding.GetString (line);  				throw new InvalidMimeFormatException (""' lineText);  			}  			case CheckBoundaryResult.Boundary:  				{  					headerPointer.Clear ();  					state = MimeContentParserState.Header;  				}  				break;  			case CheckBoundaryResult.EndBoundary:  				break;  			default:  				throw new InvalidOperationException ();  			}  		}  	}  	break;  #endregion  case MimeContentParserState.Header:  	#region  	{  		headerPointer = cx.ReadHeader (headerPointer);  		if (headerPointer.IsEmptyNewLine () == true) {  			var bb = headerPointer.ToArray ();  			this.AddToRawData (bb);  			bodyBuffer.AddHeaderLine (bb);  			bodyBuffer.HeaderLength = bodyBuffer.Length;  			headerPointer.Clear ();  			if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  				childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  				state = MimeContentParserState.ChildContent;  			} else {  				state = MimeContentParserState.Body;  			}  		} else if (headerPointer.IsEnd == true) {  			var bb = headerPointer.ToArray ();  			this.AddToRawData (bb);  			//New MimeHeader  			var header = ParseHeader (headerPointer);  			mc.Headers.Add (header);  			headerPointer.Clear ();  			bodyBuffer.AddHeaderLine (bb);  		}  	}  	break;  #endregion  case MimeContentParserState.Body:  	#region  	{  		var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  		bodyBuffer.AddBodyLine (bodyLine);  		if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  			this.SetMimeContentBody (mc' bodyBuffer);  			l.Add (mc);  			headerPointer.Clear ();  			bodyBuffer.Clear ();  			mc = new MimeContent ();  			state = MimeContentParserState.Boundary;  		}  	}  	break;  #endregion  case MimeContentParserState.ChildContent:  	#region  	{  		var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  		bodyBuffer.AddBodyLine (bodyLine);  		if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  			if (bodyBuffer.Length > 0) {  				this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  			}  			mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  			bodyBuffer.Clear ();  			state = MimeContentParserState.Body;  		}  	}  	break;  #endregion  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: switch (state) {  case MimeContentParserState.Boundary:  	#region  	{  		line = cx.ReadLine ();  		if (line.Length == 0) {  			continue;  		}  		this.AddToRawData (line);  		if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  			continue;  		}  		bodyBuffer.AddBoundaryLine (line);  		if (IsEndByNewLine (line) == true) {  			boundaryResult = bodyBuffer.CheckBoundary (boundary);  			switch (boundaryResult) {  			case CheckBoundaryResult.None: {  				var lineText = this.Encoding.GetString (line);  				throw new InvalidMimeFormatException (""' lineText);  			}  			case CheckBoundaryResult.Boundary:  				{  					headerPointer.Clear ();  					state = MimeContentParserState.Header;  				}  				break;  			case CheckBoundaryResult.EndBoundary:  				break;  			default:  				throw new InvalidOperationException ();  			}  		}  	}  	break;  #endregion  case MimeContentParserState.Header:  	#region  	{  		headerPointer = cx.ReadHeader (headerPointer);  		if (headerPointer.IsEmptyNewLine () == true) {  			var bb = headerPointer.ToArray ();  			this.AddToRawData (bb);  			bodyBuffer.AddHeaderLine (bb);  			bodyBuffer.HeaderLength = bodyBuffer.Length;  			headerPointer.Clear ();  			if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  				childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  				state = MimeContentParserState.ChildContent;  			} else {  				state = MimeContentParserState.Body;  			}  		} else if (headerPointer.IsEnd == true) {  			var bb = headerPointer.ToArray ();  			this.AddToRawData (bb);  			//New MimeHeader  			var header = ParseHeader (headerPointer);  			mc.Headers.Add (header);  			headerPointer.Clear ();  			bodyBuffer.AddHeaderLine (bb);  		}  	}  	break;  #endregion  case MimeContentParserState.Body:  	#region  	{  		var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  		bodyBuffer.AddBodyLine (bodyLine);  		if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  			this.SetMimeContentBody (mc' bodyBuffer);  			l.Add (mc);  			headerPointer.Clear ();  			bodyBuffer.Clear ();  			mc = new MimeContent ();  			state = MimeContentParserState.Boundary;  		}  	}  	break;  #endregion  case MimeContentParserState.ChildContent:  	#region  	{  		var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  		bodyBuffer.AddBodyLine (bodyLine);  		if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  			if (bodyBuffer.Length > 0) {  				this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  			}  			mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  			bodyBuffer.Clear ();  			state = MimeContentParserState.Body;  		}  	}  	break;  #endregion  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: switch (state) {  case MimeContentParserState.Boundary:  	#region  	{  		line = cx.ReadLine ();  		if (line.Length == 0) {  			continue;  		}  		this.AddToRawData (line);  		if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  			continue;  		}  		bodyBuffer.AddBoundaryLine (line);  		if (IsEndByNewLine (line) == true) {  			boundaryResult = bodyBuffer.CheckBoundary (boundary);  			switch (boundaryResult) {  			case CheckBoundaryResult.None: {  				var lineText = this.Encoding.GetString (line);  				throw new InvalidMimeFormatException (""' lineText);  			}  			case CheckBoundaryResult.Boundary:  				{  					headerPointer.Clear ();  					state = MimeContentParserState.Header;  				}  				break;  			case CheckBoundaryResult.EndBoundary:  				break;  			default:  				throw new InvalidOperationException ();  			}  		}  	}  	break;  #endregion  case MimeContentParserState.Header:  	#region  	{  		headerPointer = cx.ReadHeader (headerPointer);  		if (headerPointer.IsEmptyNewLine () == true) {  			var bb = headerPointer.ToArray ();  			this.AddToRawData (bb);  			bodyBuffer.AddHeaderLine (bb);  			bodyBuffer.HeaderLength = bodyBuffer.Length;  			headerPointer.Clear ();  			if (mc.ContentType != null && String.IsNullOrEmpty (mc.ContentType.Boundary) == false) {  				childBoundary = CreateBoundary ("--" + mc.ContentType.Boundary);  				state = MimeContentParserState.ChildContent;  			} else {  				state = MimeContentParserState.Body;  			}  		} else if (headerPointer.IsEnd == true) {  			var bb = headerPointer.ToArray ();  			this.AddToRawData (bb);  			//New MimeHeader  			var header = ParseHeader (headerPointer);  			mc.Headers.Add (header);  			headerPointer.Clear ();  			bodyBuffer.AddHeaderLine (bb);  		}  	}  	break;  #endregion  case MimeContentParserState.Body:  	#region  	{  		var bodyLine = cx.ReadBody (boundary' out boundaryResult' out isEndOfBody);  		bodyBuffer.AddBodyLine (bodyLine);  		if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  			this.SetMimeContentBody (mc' bodyBuffer);  			l.Add (mc);  			headerPointer.Clear ();  			bodyBuffer.Clear ();  			mc = new MimeContent ();  			state = MimeContentParserState.Boundary;  		}  	}  	break;  #endregion  case MimeContentParserState.ChildContent:  	#region  	{  		var bodyLine = cx.ReadBody (childBoundary' out boundaryResult' out isEndOfBody);  		bodyBuffer.AddBodyLine (bodyLine);  		if (boundaryResult != CheckBoundaryResult.None || isEndOfBody == true) {  			if (bodyBuffer.Length > 0) {  				this.AddToRawDataWithNewline (bodyBuffer.GetBodyArray ());  			}  			mc.Contents.AddRange (ReadMimeContent (cx' childBoundary));  			bodyBuffer.Clear ();  			state = MimeContentParserState.Body;  		}  	}  	break;  #endregion  default:  	throw new InvalidOperationException ();  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: if (line.Length == 2 && line [0] == 13 && line [1] == 10) {  	continue;  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: if (boundaryResult == CheckBoundaryResult.EndBoundary) {  	this.AddToRawData (boundary);  	this.AddToRawData (new Byte[] {  		45'  		45  	});  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: if (boundaryResult == CheckBoundaryResult.EndBoundary) {  	this.AddToRawData (boundary);  	this.AddToRawData (new Byte[] {  		45'  		45  	});  }  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: this.AddToRawData (new Byte[] {  	45'  	45  });  
Magic Number,HigLabo.Mime,MimeParser,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParser.cs,ReadMimeContent,The following statement contains a magic number: this.AddToRawData (new Byte[] {  	45'  	45  });  
Magic Number,HigLabo.Mime,MimeParserDefaultSettings,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParserDefaultSettings.cs,MimeParserDefaultSettings,The following statement contains a magic number: this.BufferSize = 12000;  
Magic Number,HigLabo.Mime,MimeParserDefaultSettings,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParserDefaultSettings.cs,MimeParserDefaultSettings,The following statement contains a magic number: this.QuotedPrintableConverterBufferSize = 2000;  
Magic Number,HigLabo.Mime,MimeParserDefaultSettings,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\MimeParserDefaultSettings.cs,MimeParserDefaultSettings,The following statement contains a magic number: this.Base64ConverterBufferSize = 20000;  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: if (data.Length > 1 && data [data.Length - 1] == 10) {  	dataLength -= 1;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: if (data.Length > 2 && data [data.Length - 2] == 13) {  	dataLength -= 1;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: if (data.Length > 2 && data [data.Length - 2] == 13) {  	dataLength -= 1;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,AddBoundaryLine,The following statement contains a magic number: if (data.Length > 2 && data [data.Length - 2] == 13) {  	dataLength -= 1;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,The following statement contains a magic number: if (_BoundaryLine.Length == boundaryLength + 2) {  	for (int i = 0; i < boundaryLength; i++) {  		if (_BoundaryLine [i] != boundary [i]) {  			return CheckBoundaryResult.None;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (_BoundaryLine [boundaryLength] != (Byte)'-') {  			return CheckBoundaryResult.None;  		}  	}  	return CheckBoundaryResult.EndBoundary;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,The following statement contains a magic number: if (_BoundaryLine.Length == boundaryLength + 2) {  	for (int i = 0; i < boundaryLength; i++) {  		if (_BoundaryLine [i] != boundary [i]) {  			return CheckBoundaryResult.None;  		}  	}  	for (int i = 0; i < 2; i++) {  		if (_BoundaryLine [boundaryLength] != (Byte)'-') {  			return CheckBoundaryResult.None;  		}  	}  	return CheckBoundaryResult.EndBoundary;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,CheckBoundary,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	if (_BoundaryLine [boundaryLength] != (Byte)'-') {  		return CheckBoundaryResult.None;  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: if (endWithNewline == true) {  	data = new Byte[this.Length - this.HeaderLength - 2];  } else {  	data = new Byte[this.Length - this.HeaderLength];  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: data = new Byte[this.Length - this.HeaderLength - 2];  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: if (endWithNewline == true) {  	length = lastBytes.Length - 2;  } else {  	length = lastBytes.Length;  }  
Magic Number,HigLabo.Mime.Internal,MimeContentByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeContentByteArray.cs,GetBodyArray,The following statement contains a magic number: length = lastBytes.Length - 2;  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 1) {  	return this.Data [0] == 10;  } else if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 1) {  	return this.Data [0] == 10;  } else if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 1) {  	return this.Data [0] == 10;  } else if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 1) {  	return this.Data [0] == 10;  } else if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: return this.Data [0] == 10;  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: if (this.Length == 2) {  	return this.Data [0] == 13 && this.Data [1] == 10;  }  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: return this.Data [0] == 13 && this.Data [1] == 10;  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsEmptyNewLine,The following statement contains a magic number: return this.Data [0] == 13 && this.Data [1] == 10;  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsOkResponseLine,The following statement contains a magic number: return d [0] == (Byte)'+' && (d [1] == (Byte)'O' || d [1] == (Byte)'o') && (d [2] == (Byte)'K' || d [2] == (Byte)'k');  
Magic Number,HigLabo.Mime.Internal,MimeHeaderBufferByteArray,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeHeaderBufferByteArray.cs,IsOkResponseLine,The following statement contains a magic number: return d [0] == (Byte)'+' && (d [1] == (Byte)'O' || d [1] == (Byte)'o') && (d [2] == (Byte)'K' || d [2] == (Byte)'k');  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadLine,The following statement contains a magic number: while (*this._Current != 10) {  	this._Current++;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: if (*this._Current == 10)// \n   {  	this._Current++;  	header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  	return header;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: while (true) {  	// \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (this._Current == this._End) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._End - start)' false);  		return header;  	}  	lastOfLine = this._Current - 2;  	this._Current++;  	//Empty line is start of body  	if (lastOfLine - this._Start < 1) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  	if (*this._Current != 9 && *this._Current != 32)// \t or white space  	 {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: while (true) {  	// \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (this._Current == this._End) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._End - start)' false);  		return header;  	}  	lastOfLine = this._Current - 2;  	this._Current++;  	//Empty line is start of body  	if (lastOfLine - this._Start < 1) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  	if (*this._Current != 9 && *this._Current != 32)// \t or white space  	 {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: while (true) {  	// \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (this._Current == this._End) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._End - start)' false);  		return header;  	}  	lastOfLine = this._Current - 2;  	this._Current++;  	//Empty line is start of body  	if (lastOfLine - this._Start < 1) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  	if (*this._Current != 9 && *this._Current != 32)// \t or white space  	 {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: while (true) {  	// \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (this._Current == this._End) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._End - start)' false);  		return header;  	}  	lastOfLine = this._Current - 2;  	this._Current++;  	//Empty line is start of body  	if (lastOfLine - this._Start < 1) {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  	if (*this._Current != 9 && *this._Current != 32)// \t or white space  	 {  		header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  		return header;  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: while (*this._Current != 10) {  	this._Current++;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: lastOfLine = this._Current - 2;  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: if (*this._Current != 9 && *this._Current != 32)// \t or white space   {  	header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  	return header;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadHeader,The following statement contains a magic number: if (*this._Current != 9 && *this._Current != 32)// \t or white space   {  	header.Add (MimeParser.CreateNewBytes (new IntPtr (start)' this._Current - start)' true);  	return header;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (true) {  	UInt32* bbbb = (UInt32*)this._Current;  	do {  		bbbbXor = *bbbb++ ^ 0x0A0A0A0A;  	} while (((bbbbXor - 0x01010101) & ~bbbbXor & 0x80808080) == 0);  	this._Current = (byte*)(bbbb - 1);  	// 10 is \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (*line_Start == 46)// .  	 {  		var lastOfLine = this._Current - 2;  		if (line_Start == lastOfLine) {  			isEndOfBody = true;  			//Remove last period from bodydata  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  		}  	}  	// Check this line is started by '-' (Boundary).  	//That avoid method call of CheckBoundary and improve performance.  	if (*line_Start == 45 && boundaryLength > -1) {  		var lastOfLine = this._Current - 2;  		var length = lastOfLine - line_Start + 1;  		if (length == boundaryLength || length == boundaryLength + 2) {  			result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  			if (result != CheckBoundaryResult.None) {  				if (result == CheckBoundaryResult.Boundary) {  					//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  					this._Current = line_Start;  				}  				return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  			}  		}  	}  	if (this._Current == this._End) {  		//Contains only 1 line and end of buffer  		if (line_Start == this._Start) {  			this._Current = line_Start;  			_IsLastOfLine = true;  			_LastLine = MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._End - this._Start);  			return _EmptyBytes;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._Current - this._Start);  	}  	this._Current++;  	line_Start = this._Current;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (true) {  	UInt32* bbbb = (UInt32*)this._Current;  	do {  		bbbbXor = *bbbb++ ^ 0x0A0A0A0A;  	} while (((bbbbXor - 0x01010101) & ~bbbbXor & 0x80808080) == 0);  	this._Current = (byte*)(bbbb - 1);  	// 10 is \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (*line_Start == 46)// .  	 {  		var lastOfLine = this._Current - 2;  		if (line_Start == lastOfLine) {  			isEndOfBody = true;  			//Remove last period from bodydata  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  		}  	}  	// Check this line is started by '-' (Boundary).  	//That avoid method call of CheckBoundary and improve performance.  	if (*line_Start == 45 && boundaryLength > -1) {  		var lastOfLine = this._Current - 2;  		var length = lastOfLine - line_Start + 1;  		if (length == boundaryLength || length == boundaryLength + 2) {  			result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  			if (result != CheckBoundaryResult.None) {  				if (result == CheckBoundaryResult.Boundary) {  					//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  					this._Current = line_Start;  				}  				return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  			}  		}  	}  	if (this._Current == this._End) {  		//Contains only 1 line and end of buffer  		if (line_Start == this._Start) {  			this._Current = line_Start;  			_IsLastOfLine = true;  			_LastLine = MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._End - this._Start);  			return _EmptyBytes;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._Current - this._Start);  	}  	this._Current++;  	line_Start = this._Current;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (true) {  	UInt32* bbbb = (UInt32*)this._Current;  	do {  		bbbbXor = *bbbb++ ^ 0x0A0A0A0A;  	} while (((bbbbXor - 0x01010101) & ~bbbbXor & 0x80808080) == 0);  	this._Current = (byte*)(bbbb - 1);  	// 10 is \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (*line_Start == 46)// .  	 {  		var lastOfLine = this._Current - 2;  		if (line_Start == lastOfLine) {  			isEndOfBody = true;  			//Remove last period from bodydata  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  		}  	}  	// Check this line is started by '-' (Boundary).  	//That avoid method call of CheckBoundary and improve performance.  	if (*line_Start == 45 && boundaryLength > -1) {  		var lastOfLine = this._Current - 2;  		var length = lastOfLine - line_Start + 1;  		if (length == boundaryLength || length == boundaryLength + 2) {  			result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  			if (result != CheckBoundaryResult.None) {  				if (result == CheckBoundaryResult.Boundary) {  					//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  					this._Current = line_Start;  				}  				return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  			}  		}  	}  	if (this._Current == this._End) {  		//Contains only 1 line and end of buffer  		if (line_Start == this._Start) {  			this._Current = line_Start;  			_IsLastOfLine = true;  			_LastLine = MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._End - this._Start);  			return _EmptyBytes;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._Current - this._Start);  	}  	this._Current++;  	line_Start = this._Current;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (true) {  	UInt32* bbbb = (UInt32*)this._Current;  	do {  		bbbbXor = *bbbb++ ^ 0x0A0A0A0A;  	} while (((bbbbXor - 0x01010101) & ~bbbbXor & 0x80808080) == 0);  	this._Current = (byte*)(bbbb - 1);  	// 10 is \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (*line_Start == 46)// .  	 {  		var lastOfLine = this._Current - 2;  		if (line_Start == lastOfLine) {  			isEndOfBody = true;  			//Remove last period from bodydata  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  		}  	}  	// Check this line is started by '-' (Boundary).  	//That avoid method call of CheckBoundary and improve performance.  	if (*line_Start == 45 && boundaryLength > -1) {  		var lastOfLine = this._Current - 2;  		var length = lastOfLine - line_Start + 1;  		if (length == boundaryLength || length == boundaryLength + 2) {  			result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  			if (result != CheckBoundaryResult.None) {  				if (result == CheckBoundaryResult.Boundary) {  					//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  					this._Current = line_Start;  				}  				return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  			}  		}  	}  	if (this._Current == this._End) {  		//Contains only 1 line and end of buffer  		if (line_Start == this._Start) {  			this._Current = line_Start;  			_IsLastOfLine = true;  			_LastLine = MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._End - this._Start);  			return _EmptyBytes;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._Current - this._Start);  	}  	this._Current++;  	line_Start = this._Current;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (true) {  	UInt32* bbbb = (UInt32*)this._Current;  	do {  		bbbbXor = *bbbb++ ^ 0x0A0A0A0A;  	} while (((bbbbXor - 0x01010101) & ~bbbbXor & 0x80808080) == 0);  	this._Current = (byte*)(bbbb - 1);  	// 10 is \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (*line_Start == 46)// .  	 {  		var lastOfLine = this._Current - 2;  		if (line_Start == lastOfLine) {  			isEndOfBody = true;  			//Remove last period from bodydata  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  		}  	}  	// Check this line is started by '-' (Boundary).  	//That avoid method call of CheckBoundary and improve performance.  	if (*line_Start == 45 && boundaryLength > -1) {  		var lastOfLine = this._Current - 2;  		var length = lastOfLine - line_Start + 1;  		if (length == boundaryLength || length == boundaryLength + 2) {  			result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  			if (result != CheckBoundaryResult.None) {  				if (result == CheckBoundaryResult.Boundary) {  					//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  					this._Current = line_Start;  				}  				return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  			}  		}  	}  	if (this._Current == this._End) {  		//Contains only 1 line and end of buffer  		if (line_Start == this._Start) {  			this._Current = line_Start;  			_IsLastOfLine = true;  			_LastLine = MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._End - this._Start);  			return _EmptyBytes;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._Current - this._Start);  	}  	this._Current++;  	line_Start = this._Current;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (true) {  	UInt32* bbbb = (UInt32*)this._Current;  	do {  		bbbbXor = *bbbb++ ^ 0x0A0A0A0A;  	} while (((bbbbXor - 0x01010101) & ~bbbbXor & 0x80808080) == 0);  	this._Current = (byte*)(bbbb - 1);  	// 10 is \n  	while (*this._Current != 10) {  		this._Current++;  	}  	if (*line_Start == 46)// .  	 {  		var lastOfLine = this._Current - 2;  		if (line_Start == lastOfLine) {  			isEndOfBody = true;  			//Remove last period from bodydata  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  		}  	}  	// Check this line is started by '-' (Boundary).  	//That avoid method call of CheckBoundary and improve performance.  	if (*line_Start == 45 && boundaryLength > -1) {  		var lastOfLine = this._Current - 2;  		var length = lastOfLine - line_Start + 1;  		if (length == boundaryLength || length == boundaryLength + 2) {  			result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  			if (result != CheckBoundaryResult.None) {  				if (result == CheckBoundaryResult.Boundary) {  					//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  					this._Current = line_Start;  				}  				return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  			}  		}  	}  	if (this._Current == this._End) {  		//Contains only 1 line and end of buffer  		if (line_Start == this._Start) {  			this._Current = line_Start;  			_IsLastOfLine = true;  			_LastLine = MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._End - this._Start);  			return _EmptyBytes;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' this._Current - this._Start);  	}  	this._Current++;  	line_Start = this._Current;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: while (*this._Current != 10) {  	this._Current++;  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: if (*line_Start == 46)// .   {  	var lastOfLine = this._Current - 2;  	if (line_Start == lastOfLine) {  		isEndOfBody = true;  		//Remove last period from bodydata  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: if (*line_Start == 46)// .   {  	var lastOfLine = this._Current - 2;  	if (line_Start == lastOfLine) {  		isEndOfBody = true;  		//Remove last period from bodydata  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' lastOfLine - this._Start);  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: if (*line_Start == 45 && boundaryLength > -1) {  	var lastOfLine = this._Current - 2;  	var length = lastOfLine - line_Start + 1;  	if (length == boundaryLength || length == boundaryLength + 2) {  		result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  		if (result != CheckBoundaryResult.None) {  			if (result == CheckBoundaryResult.Boundary) {  				//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  				this._Current = line_Start;  			}  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  		}  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: if (*line_Start == 45 && boundaryLength > -1) {  	var lastOfLine = this._Current - 2;  	var length = lastOfLine - line_Start + 1;  	if (length == boundaryLength || length == boundaryLength + 2) {  		result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  		if (result != CheckBoundaryResult.None) {  			if (result == CheckBoundaryResult.Boundary) {  				//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  				this._Current = line_Start;  			}  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  		}  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: if (*line_Start == 45 && boundaryLength > -1) {  	var lastOfLine = this._Current - 2;  	var length = lastOfLine - line_Start + 1;  	if (length == boundaryLength || length == boundaryLength + 2) {  		result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  		if (result != CheckBoundaryResult.None) {  			if (result == CheckBoundaryResult.Boundary) {  				//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  				this._Current = line_Start;  			}  			return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  		}  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,ReadBody,The following statement contains a magic number: if (length == boundaryLength || length == boundaryLength + 2) {  	result = CheckBoundary (line_Start' lastOfLine + 1' boundary);  	if (result != CheckBoundaryResult.None) {  		if (result == CheckBoundaryResult.Boundary) {  			//Back to start of line.To read boundary line on MimeParser.ReadMimeContent method.  			this._Current = line_Start;  		}  		return MimeParser.CreateNewBytes (new IntPtr (this._Start)' line_Start - this._Start);  	}  }  
Magic Number,HigLabo.Mime.Internal,MimeStreamBuffer,F:\newReposMay17\higty_higlabo\HigLabo.Mime\Mime\Internal\MimeStreamBuffer.cs,CheckBoundary,The following statement contains a magic number: for (int i = 0; i < 2; i++) {  	if (*current != (Byte)'-') {  		return CheckBoundaryResult.None;  	}  	current++;  }  
