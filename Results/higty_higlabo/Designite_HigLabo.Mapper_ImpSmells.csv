Implementation smell,Namespace,Class,File,Method,Description
Long Method,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,The method has 102 lines of code.
Long Method,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The method has 537 lines of code.
Complex Method,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,Map,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,Cyclomatic complexity of the method is 29
Complex Method,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,Cyclomatic complexity of the method is 84
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,GetMethodInfo,The length of the statement  "	return typeof(ObjectMapConfig).GetMethods ().Where (el => el.GetCustomAttributes ().Any (attr => attr is ObjectMapConfigMethodAttribute && ((ObjectMapConfigMethodAttribute)attr).Name == name)).FirstOrDefault (); " is 211.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,Map,The length of the statement  "			throw new ObjectMapFailureException ("Generated map method was failed.Maybe HigLabo.Mapper bug." + "Please notify SouceObject'TargetObject class of this ObjectMapFailureException object to auther." + "We will fix it." + Environment.NewLine + String.Format ("SourceType={0}' TargetType={1}"' source.GetType ().Name' target.GetType ().Name)' source' target' exception); " is 367.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,GetMethod,The length of the statement  "		//    if (loopCount > 3) { throw new InvalidOperationException("CreateMethod failed due to race condition.Please try later."); } " is 128.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,The length of the statement  "		foreach (var p in item.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (el => el.GetIndexParameters ().Length == 0)) { " is 136.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,The length of the statement  "		foreach (var p in item.GetProperties (BindingFlags.Public | BindingFlags.Instance).Where (el => el.GetIndexParameters ().Length == 0)) { " is 136.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,The length of the statement  "				var targetInterfaceType = p.PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1)); " is 147.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,The length of the statement  "		foreach (var rule in this.DictionaryMappingRules.Where (el => el.Direction == DictionaryMappingDirection.DictionaryToObject)) { " is 127.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreatePropertyMaps,The length of the statement  "		foreach (var rule in this.DictionaryMappingRules.Where (el => el.Direction == DictionaryMappingDirection.ObjectToDictionary)) { " is 127.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapMethodInfo,The length of the statement  "	return (Func<ObjectMapConfig' TSource' TTarget' MappingContext' TTarget>)this.CreateMapPropertyMethod (key.Source' key.Target' propertyMapInfo); " is 144.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "				if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) { " is 157.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "				if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) { " is 157.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "				if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) { " is 157.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "			if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) { " is 363.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "				var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1)); " is 160.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "				var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1)); " is 160.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "					if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) { " is 168.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "								if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) { " is 123.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The length of the statement  "					} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) { " is 120.
Long Statement,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,IsNumber,The length of the statement  "	return type == typeof(SByte) || type == typeof(Int16) || type == typeof(Int32) || type == typeof(Int64) || type == typeof(Byte) || type == typeof(UInt16) || type == typeof(UInt32) || type == typeof(UInt64) || type == typeof(Single) || type == typeof(Double) || type == typeof(Decimal); " is 285.
Long Statement,HigLabo.Core,PropertyMap,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\PropertyMap.cs,ToString,The length of the statement  "	return String.Format ("{0} ({1}) <=> {2} ({3})"' this.Source.Name' this.Source.PropertyType.GetTypeName ()' this.Target.Name' this.Target.PropertyType.GetTypeName ()); " is 167.
Long Statement,HigLabo.Core,TypeMatchCondition,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\TypeMatchCondition.cs,Match,The length of the statement  "	return (this.Type == null || (this.TypeFilterCondition == TypeFilterCondition.Equal && this.Type == type) || (this.TypeFilterCondition == TypeFilterCondition.Inherit && type.IsInheritanceFrom (this.Type))); " is 206.
Long Statement,HigLabo.Core,DefaultPropertyMappingRule,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\PropertyMappingRule\DefaultPropertyMappingRule.cs,Match,The length of the statement  "	return String.Equals (sourceProperty.Name.Replace ("_"' "")' targetProperty.Name.Replace ("_"' "")' StringComparison.OrdinalIgnoreCase); " is 136.
Long Statement,HigLabo.Core,PrefixPropertyMappingRule,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\PropertyMappingRule\PrefixPropertyMappingRule.cs,Match,The length of the statement  "	return base.Match (sourceProperty.Name' this.Prefix + targetProperty.Name) || base.Match (this.Prefix + sourceProperty.Name' targetProperty.Name); " is 146.
Long Statement,HigLabo.Core,SuffixPropertyMappingRule,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\PropertyMappingRule\SuffixPropertyMappingRule.cs,Match,The length of the statement  "	return base.Match (sourceProperty.Name' targetProperty.Name + this.Suffix) || base.Match (sourceProperty.Name + this.Suffix' targetProperty.Name); " is 146.
Complex Conditional,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The conditional expression  "this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false"  is complex.
Magic Number,HigLabo.Core,ILGeneratorExtensions,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ILGeneratorExtensions.cs,LoadLocal,The following statement contains a magic number: if (local.LocalIndex < 256) {  	il.Emit (OpCodes.Ldloc_S' (byte)local.LocalIndex);  } else {  	il.Emit (OpCodes.Ldloc' (ushort)local.LocalIndex);  }  
Magic Number,HigLabo.Core,ILGeneratorExtensions,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ILGeneratorExtensions.cs,LoadLocala,The following statement contains a magic number: if (local.LocalIndex < 256) {  	il.Emit (OpCodes.Ldloca_S' (byte)local.LocalIndex);  } else {  	il.Emit (OpCodes.Ldloca' (ushort)local.LocalIndex);  }  
Magic Number,HigLabo.Core,ILGeneratorExtensions,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ILGeneratorExtensions.cs,SetLocal,The following statement contains a magic number: if (local.LocalIndex < 256) {  	il.Emit (OpCodes.Stloc_S' local);  } else {  	il.Emit (OpCodes.Stloc' local);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,ObjectMapConfig,The following statement contains a magic number: this.MaxCallStackCount = 10;  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: foreach (var item in propertyMapInfo) {  	#region local variables  	var sourceProperty = item.Source;  	var targetProperty = item.Target;  	var sourceProperty_PropertyType = sourceProperty.PropertyType;  	var targetProperty_PropertyType = targetProperty.PropertyType;  	var sourceGetMethod = sourceProperty.PropertyInfo.GetGetMethod ();  	var sourceSetMethod = sourceProperty.PropertyInfo.GetSetMethod ();  	var targetGetMethod = targetProperty.PropertyInfo.GetGetMethod ();  	var targetSetMethod = targetProperty.PropertyInfo.GetSetMethod ();  	var ldSourceTypeArg = sourceType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var ldTargetTypeArg = targetType.IsValueType ? OpCodes.Ldarga_S : OpCodes.Ldarg;  	var sourceMethodCall = sourceType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetMethodCall = targetType.IsValueType ? OpCodes.Call : OpCodes.Callvirt;  	var targetCreated = false;  	var deepCopy = false;  	var newCollection = false;  	#endregion  	if (targetProperty.IsIndexedProperty) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (targetProperty_PropertyType == typeof(Object)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  						il.LoadLocal (typeConverter);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else {  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (targetProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				if (sourceProperty_PropertyType.IsValueType) {  					il.Emit (OpCodes.Box' sourceProperty_PropertyType);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(String)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (targetMethodCall' targetSetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldTargetTypeArg' 2);  						il.LoadLocal (typeConverter);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  						il.Emit (targetMethodCall' targetSetMethod);  					}  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == typeof(String)) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  		 {  			//Do nothing...  		}  		#endregion  	} else if (targetProperty_PropertyType == typeof(Encoding)) {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  		 {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.LoadLocal (typeConverter);  					if (sourceProperty_PropertyType == typeof(String)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					} else if (sourceProperty_PropertyType == typeof(Object)) {  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  						il.Emit (sourceMethodCall' sourceGetMethod);  					}  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  					var convertedValue = il.DeclareLocal (nullableTargetType);  					il.SetLocal (convertedValue);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  					var hasValue_False = il.DefineLabel ();  					il.Emit (OpCodes.Brfalse_S' hasValue_False);  					{  						il.Emit (OpCodes.Ldarg_2);  						il.LoadLocala (convertedValue);  						il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  					il.MarkLabel (hasValue_False);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasValue_False);  		}  		#endregion  	} else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?  	 {  		#region  		if (sourceProperty.IsIndexedProperty) {  			#region Dictionary<String' String> or Dictionary<String' Object>  			//Call TryGetValue method to avoid KeyNotFoundException  			if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  				//Call ContainsKey method.If key does not exist' exit method.  				var containsKey = sourceType.GetMethod ("ContainsKey");  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' containsKey);  				var containsKey_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse' containsKey_False);  				//ContainsKey=false --> Exit method without do anything.  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (containsKey_False);  			}  			#endregion  		} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  			#region  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  			#endregion  		} else {  			#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  			#endregion  		}  		#endregion  	} else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  		#region  		if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  			#region if (target.P1 == null) { target.P1 = new TTarget(); }  			il.Emit (OpCodes.Ldarg_2);  			il.Emit (OpCodes.Callvirt' targetGetMethod);  			il.Emit (OpCodes.Ldnull);  			il.Emit (OpCodes.Ceq);  			var sourceIsNullLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  			{  				if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						targetCreated = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Newobj' defaultConstructor);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  					if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  						targetCreated = true;  						deepCopy = true;  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Callvirt' targetSetMethod);  					}  				}  			#endregion  			}  			il.MarkLabel (sourceIsNullLabel);  		}  		if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  			#region IEnumerable<TSource> to ICollection<TTarget>  			var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  			var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  			if (sourceInterfaceType != null && targetInterfaceType != null) {  				newCollection = true;  				var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  				var targetElementType = targetInterfaceType.GenericTypeArguments [0];  				if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  					#region DeepCopy when SourceElementType can assign to TargetElementTyep.  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region this.MapDeepCopy(source.P1' target.P1);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							MethodInfo md = null;  							if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  							} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  								md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  							} else if (sourceElementType.IsClass) {  								md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  							}  							il.Emit (OpCodes.Call' md);  							il.Emit (OpCodes.Pop);  							#endregion  						}  					#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  					#region New Object when TargetElementTyep has default constructor.  					var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  					if (defaultConstructor != null) {  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldnull);  						il.Emit (OpCodes.Ceq);  						var sourceIsNullLabel = il.DefineLabel ();  						il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  						{  							#region this.MapElement(source.P1' target.P1);  							if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  								if (targetSetMethod != null) {  									#region IEnumerabe<TSouce> to TTarget[]  									il.Emit (OpCodes.Ldarg_2);  									il.Emit (OpCodes.Ldarg_0);  									il.Emit (OpCodes.Ldarg_1);  									il.Emit (OpCodes.Callvirt' sourceGetMethod);  									il.Emit (OpCodes.Ldarg_3);  									MethodInfo md = null;  									if (sourceElementType.IsClass && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Class_Class_Method;  									} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  										md = _CreateNewObjectArray_Struct_Class_Method;  									}  									il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  									il.Emit (OpCodes.Callvirt' targetSetMethod);  									#endregion  								}  							} else {  								#region IEnumerabe<TSouce> to ICollection<TTarget>  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Callvirt' targetGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  									md = _MapElement_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _MapElement_Class_Class_Method;  								} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  									md = _MapElement_Class_Struct_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _MapElement_Struct_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  									md = _MapElement_Struct_Struct_Method;  								}  								il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Pop);  								#endregion  							}  							#endregion  						}  						il.MarkLabel (sourceIsNullLabel);  					}  					#endregion  				}  			}  			#endregion  		}  		#endregion  	}  	if (targetSetMethod == null) {  		continue;  	}  	if (sourceProperty.IsIndexedProperty || targetProperty.IsIndexedProperty) {  		continue;  	}  	#region Map or CallPostAction  	if (deepCopy == false && newCollection == false) {  		MethodInfo md = null;  		if (IsImmutable (targetProperty.ActualType) == true) {  			if (this.HasPostAction) {  				#region target.P1 = this.CallPostAction(source.P1' target.P1);  				//if (this.HasPostAction == true) { ... }  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  				var hasPostActionIsFalseLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  				{  					il.Emit (ldTargetTypeArg' 2);  					{  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (ldSourceTypeArg' 1);  						il.Emit (sourceMethodCall' sourceGetMethod);  						il.Emit (ldTargetTypeArg' 2);  						il.Emit (targetMethodCall' targetGetMethod);  						md = _CallPostAction_Method;  						il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  					}  					il.Emit (targetMethodCall' targetSetMethod);  				#endregion  				}  				il.MarkLabel (hasPostActionIsFalseLabel);  			}  		} else if (targetCreated) {  			#region this.Map(source.P1' target.P1' context);  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				il.Emit (OpCodes.Ldarg_3);  				if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  					md = _MapInternal_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Class_Class_Method;  				} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Class_Struct_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  					md = _MapInternal_Struct_Class_Method;  				} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  					md = _MapInternal_Struct_Struct_Method;  				}  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			//il.Emit(OpCodes.Pop);  			#endregion  			}  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty.IsIndexedProperty) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (targetProperty_PropertyType == typeof(Object)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  					il.LoadLocal (typeConverter);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else {  		if (targetProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (targetProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			if (sourceProperty_PropertyType.IsValueType) {  				il.Emit (OpCodes.Box' sourceProperty_PropertyType);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (OpCodes.Ldarg_2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			} else if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (OpCodes.Ldarg_2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else {  	if (targetProperty_PropertyType == typeof(Object)) {  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		if (sourceProperty_PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		}  		il.Emit (targetMethodCall' targetSetMethod);  	} else if (targetProperty_PropertyType == typeof(String)) {  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		if (sourceProperty_PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		}  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  	}  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			if (targetProperty_PropertyType == typeof(Object)) {  				il.Emit (OpCodes.Ldarg_2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			} else if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (OpCodes.Ldarg_2);  				il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else {  	if (targetProperty_PropertyType == typeof(Object)) {  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		if (sourceProperty_PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		}  		il.Emit (targetMethodCall' targetSetMethod);  	} else if (targetProperty_PropertyType == typeof(String)) {  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		if (sourceProperty_PropertyType.IsValueType) {  			il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		}  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  	}  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(Object)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	if (sourceProperty_PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	}  	il.Emit (targetMethodCall' targetSetMethod);  } else if (targetProperty_PropertyType == typeof(String)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	if (sourceProperty_PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	}  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(Object)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	if (sourceProperty_PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	}  	il.Emit (targetMethodCall' targetSetMethod);  } else if (targetProperty_PropertyType == typeof(String)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	if (sourceProperty_PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	}  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (OpCodes.Ldstr' targetProperty.IndexedPropertyKey);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	if (sourceProperty_PropertyType.IsValueType) {  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	}  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(String)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (targetMethodCall' targetSetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldTargetTypeArg' 2);  					il.LoadLocal (typeConverter);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  					il.Emit (targetMethodCall' targetSetMethod);  				}  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == typeof(String)) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex  	 {  		//Do nothing...  	}  	#endregion  } else if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (sourceProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == typeof(String)) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (sourceProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == typeof(String)) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (sourceProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == typeof(String)) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (targetMethodCall' targetSetMethod);  			} else if (sourceProperty_PropertyType == typeof(Object)) {  				il.Emit (ldTargetTypeArg' 2);  				il.LoadLocal (typeConverter);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (targetMethodCall' targetSetMethod);  			}  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == typeof(String)) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  	//Call ContainsKey method.If key does not exist' exit method.  	var containsKey = sourceType.GetMethod ("ContainsKey");  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (OpCodes.Callvirt' containsKey);  	var containsKey_False = il.DefineLabel ();  	il.Emit (OpCodes.Brfalse' containsKey_False);  	//ContainsKey=false --> Exit method without do anything.  	{  		if (sourceProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (sourceProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	il.MarkLabel (containsKey_False);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  	//Call ContainsKey method.If key does not exist' exit method.  	var containsKey = sourceType.GetMethod ("ContainsKey");  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (OpCodes.Callvirt' containsKey);  	var containsKey_False = il.DefineLabel ();  	il.Emit (OpCodes.Brfalse' containsKey_False);  	//ContainsKey=false --> Exit method without do anything.  	{  		if (sourceProperty_PropertyType == typeof(String)) {  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (targetMethodCall' targetSetMethod);  		} else if (sourceProperty_PropertyType == typeof(Object)) {  			il.Emit (ldTargetTypeArg' 2);  			il.LoadLocal (typeConverter);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (targetMethodCall' targetSetMethod);  		}  	}  	il.MarkLabel (containsKey_False);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == typeof(String)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  } else if (sourceProperty_PropertyType == typeof(Object)) {  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == typeof(String)) {  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  } else if (sourceProperty_PropertyType == typeof(Object)) {  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == typeof(Object)) {  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == typeof(String)) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == typeof(String)) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsPrimitive (sourceProperty.ActualType))//Int32' Int32? ...etc   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (typeof(String)));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (sourceProperty_PropertyType.IsValueType)//Vector' Complex   {  	//Do nothing...  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetProperty_PropertyType == typeof(Encoding)) {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.  	 {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.LoadLocal (typeConverter);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	}  	#endregion  } else if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else if (IsNumber (sourceProperty.ActualType))//Convert from encode number.   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsNumber (sourceProperty.ActualType))//Convert from encode number.   {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.LoadLocal (typeConverter);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty_PropertyType));  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsPrimitive (targetProperty_PropertyType) && targetSetMethod != null)//Int32' DateTime' Boolean   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.LoadLocal (typeConverter);  				if (sourceProperty_PropertyType == typeof(String)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				} else if (sourceProperty_PropertyType == typeof(Object)) {  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  					il.Emit (sourceMethodCall' sourceGetMethod);  				}  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  				var convertedValue = il.DeclareLocal (nullableTargetType);  				il.SetLocal (convertedValue);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  				var hasValue_False = il.DefineLabel ();  				il.Emit (OpCodes.Brfalse_S' hasValue_False);  				{  					il.Emit (OpCodes.Ldarg_2);  					il.LoadLocala (convertedValue);  					il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  				il.MarkLabel (hasValue_False);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  		var convertedValue = il.DeclareLocal (nullableTargetType);  		il.SetLocal (convertedValue);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  		var hasValue_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasValue_False);  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasValue_False);  	}  	#endregion  } else if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			il.LoadLocal (typeConverter);  			if (sourceProperty_PropertyType == typeof(String)) {  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  			} else if (sourceProperty_PropertyType == typeof(Object)) {  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (sourceMethodCall' sourceGetMethod);  			}  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  			var convertedValue = il.DeclareLocal (nullableTargetType);  			il.SetLocal (convertedValue);  			il.LoadLocala (convertedValue);  			il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  			var hasValue_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasValue_False);  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocala (convertedValue);  				il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (hasValue_False);  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else {  	#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  	il.LoadLocal (typeConverter);  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Callvirt' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  	var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  	var convertedValue = il.DeclareLocal (nullableTargetType);  	il.SetLocal (convertedValue);  	il.LoadLocala (convertedValue);  	il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  	var hasValue_False = il.DefineLabel ();  	il.Emit (OpCodes.Brfalse_S' hasValue_False);  	{  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  	#endregion  	}  	il.MarkLabel (hasValue_False);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else {  	#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  	il.LoadLocal (typeConverter);  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Callvirt' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  	var nullableTargetType = typeof(Nullable<>).MakeGenericType (targetProperty.ActualType);  	var convertedValue = il.DeclareLocal (nullableTargetType);  	il.SetLocal (convertedValue);  	il.LoadLocala (convertedValue);  	il.Emit (OpCodes.Call' nullableTargetType.GetProperty ("HasValue").GetGetMethod ());  	var hasValue_False = il.DefineLabel ();  	il.Emit (OpCodes.Brfalse_S' hasValue_False);  	{  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocala (convertedValue);  		il.Emit (OpCodes.Call' nullableTargetType.GetMethod ("GetValueOrDefault"' Type.EmptyTypes));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  	#endregion  	}  	il.MarkLabel (hasValue_False);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsPrimitive (targetProperty.ActualType) && targetSetMethod != null)//Int32?' DateTime?' Boolean?   {  	#region  	if (sourceProperty.IsIndexedProperty) {  		#region Dictionary<String' String> or Dictionary<String' Object>  		//Call TryGetValue method to avoid KeyNotFoundException  		if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  			//Call ContainsKey method.If key does not exist' exit method.  			var containsKey = sourceType.GetMethod ("ContainsKey");  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' containsKey);  			var containsKey_False = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse' containsKey_False);  			//ContainsKey=false --> Exit method without do anything.  			{  				il.Emit (OpCodes.Ldarg_2);  				il.LoadLocal (typeConverter);  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  				il.Emit (OpCodes.Callvirt' targetSetMethod);  			}  			il.MarkLabel (containsKey_False);  		}  		#endregion  	} else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  		#region  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (targetMethodCall' targetSetMethod);  		#endregion  	} else {  		#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  		il.Emit (OpCodes.Ldarg_2);  		il.LoadLocal (typeConverter);  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Callvirt' sourceGetMethod);  		il.Emit (OpCodes.Box' sourceProperty_PropertyType);  		il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  		il.Emit (OpCodes.Callvirt' targetSetMethod);  		#endregion  	}  	#endregion  } else if (targetProperty_PropertyType.IsClass || targetProperty_PropertyType.IsInterface) {  	#region  	if (this.NullPropertyMapMode != NullPropertyMapMode.None && targetSetMethod != null) {  		#region if (target.P1 == null) { target.P1 = new TTarget(); }  		il.Emit (OpCodes.Ldarg_2);  		il.Emit (OpCodes.Callvirt' targetGetMethod);  		il.Emit (OpCodes.Ldnull);  		il.Emit (OpCodes.Ceq);  		var sourceIsNullLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' sourceIsNullLabel);  		{  			if (this.NullPropertyMapMode == NullPropertyMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				var defaultConstructor = targetProperty_PropertyType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					targetCreated = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Newobj' defaultConstructor);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			} else if (this.NullPropertyMapMode == NullPropertyMapMode.DeepCopy) {  				if (targetProperty_PropertyType.IsAssignableFrom (sourceProperty_PropertyType)) {  					targetCreated = true;  					deepCopy = true;  					il.Emit (OpCodes.Ldarg_2);  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Callvirt' targetSetMethod);  				}  			}  		#endregion  		}  		il.MarkLabel (sourceIsNullLabel);  	}  	if (this.CollectionElementMapMode != CollectionElementMapMode.None && sourceProperty.IsIndexedProperty == false && targetProperty.IsIndexedProperty == false && sourceProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false && targetProperty_PropertyType.FullName.StartsWith (System_Collections_Generic_Dictionary_2) == false) {  		#region IEnumerable<TSource> to ICollection<TTarget>  		var sourceInterfaceType = sourceProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_IEnumerable_1));  		var targetInterfaceType = targetProperty_PropertyType.GetInterfaces ().FirstOrDefault (tp => tp.FullName.StartsWith (System_Collections_Generic_ICollection_1));  		if (sourceInterfaceType != null && targetInterfaceType != null) {  			newCollection = true;  			var sourceElementType = sourceInterfaceType.GenericTypeArguments [0];  			var targetElementType = targetInterfaceType.GenericTypeArguments [0];  			if ((this.CollectionElementMapMode == CollectionElementMapMode.DeepCopy || IsImmutable (targetElementType)) && targetElementType.IsAssignableFrom (sourceElementType)) {  				#region DeepCopy when SourceElementType can assign to TargetElementTyep.  				il.Emit (OpCodes.Ldarg_1);  				il.Emit (OpCodes.Callvirt' sourceGetMethod);  				il.Emit (OpCodes.Ldnull);  				il.Emit (OpCodes.Ceq);  				var sourceIsNullLabel = il.DefineLabel ();  				il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  				{  					if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  						if (targetSetMethod != null) {  							#region IEnumerabe<TSouce> to TTarget[]  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Call' _CreateDeepCopyArrayMethod.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Callvirt' targetSetMethod);  							#endregion  						}  					} else {  						#region this.MapDeepCopy(source.P1' target.P1);  						il.Emit (OpCodes.Ldarg_0);  						il.Emit (OpCodes.Ldarg_1);  						il.Emit (OpCodes.Callvirt' sourceGetMethod);  						il.Emit (OpCodes.Ldarg_2);  						il.Emit (OpCodes.Callvirt' targetGetMethod);  						MethodInfo md = null;  						if (sourceElementType.IsInheritanceFrom (typeof(Nullable<>)) && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Nullable_Nullable_Method.MakeGenericMethod (sourceElementType.GenericTypeArguments [0]);  						} else if (sourceElementType.IsValueType && targetElementType.IsInheritanceFrom (typeof(Nullable<>))) {  							md = _MapDeepCopy_Struct_Nullable_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  							md = _MapDeepCopy_Struct_Struct_Method.MakeGenericMethod (sourceElementType);  						} else if (sourceElementType.IsClass) {  							md = _MapDeepCopy_Class_Class_Method.MakeGenericMethod (sourceElementType' targetElementType);  						}  						il.Emit (OpCodes.Call' md);  						il.Emit (OpCodes.Pop);  						#endregion  					}  				#endregion  				}  				il.MarkLabel (sourceIsNullLabel);  			} else if (this.CollectionElementMapMode == CollectionElementMapMode.NewObject && targetProperty_PropertyType.IsClass) {  				#region New Object when TargetElementTyep has default constructor.  				var defaultConstructor = targetElementType.GetConstructor (Type.EmptyTypes);  				if (defaultConstructor != null) {  					il.Emit (OpCodes.Ldarg_1);  					il.Emit (OpCodes.Callvirt' sourceGetMethod);  					il.Emit (OpCodes.Ldnull);  					il.Emit (OpCodes.Ceq);  					var sourceIsNullLabel = il.DefineLabel ();  					il.Emit (OpCodes.Brtrue_S' sourceIsNullLabel);  					{  						#region this.MapElement(source.P1' target.P1);  						if (targetProperty_PropertyType.IsArray && targetProperty_PropertyType.GetArrayRank () == 1) {  							if (targetSetMethod != null) {  								#region IEnumerabe<TSouce> to TTarget[]  								il.Emit (OpCodes.Ldarg_2);  								il.Emit (OpCodes.Ldarg_0);  								il.Emit (OpCodes.Ldarg_1);  								il.Emit (OpCodes.Callvirt' sourceGetMethod);  								il.Emit (OpCodes.Ldarg_3);  								MethodInfo md = null;  								if (sourceElementType.IsClass && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Class_Class_Method;  								} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  									md = _CreateNewObjectArray_Struct_Class_Method;  								}  								il.Emit (OpCodes.Call' md.MakeGenericMethod (sourceElementType' targetElementType));  								il.Emit (OpCodes.Callvirt' targetSetMethod);  								#endregion  							}  						} else {  							#region IEnumerabe<TSouce> to ICollection<TTarget>  							il.Emit (OpCodes.Ldarg_0);  							il.Emit (OpCodes.Ldarg_1);  							il.Emit (OpCodes.Callvirt' sourceGetMethod);  							il.Emit (OpCodes.Ldarg_2);  							il.Emit (OpCodes.Callvirt' targetGetMethod);  							il.Emit (OpCodes.Ldarg_3);  							MethodInfo md = null;  							if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  								md = _MapElement_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsClass) {  								md = _MapElement_Class_Class_Method;  							} else if (sourceElementType.IsClass && targetElementType.IsValueType) {  								md = _MapElement_Class_Struct_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsClass) {  								md = _MapElement_Struct_Class_Method;  							} else if (sourceElementType.IsValueType && targetElementType.IsValueType) {  								md = _MapElement_Struct_Struct_Method;  							}  							il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceElementType' targetElementType));  							il.Emit (OpCodes.Pop);  							#endregion  						}  						#endregion  					}  					il.MarkLabel (sourceIsNullLabel);  				}  				#endregion  			}  		}  		#endregion  	}  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty.IsIndexedProperty) {  	#region Dictionary<String' String> or Dictionary<String' Object>  	//Call TryGetValue method to avoid KeyNotFoundException  	if (sourceType.IsInheritanceFrom (typeof(Dictionary<String' String>)) == true || sourceType.IsInheritanceFrom (typeof(Dictionary<String' Object>)) == true) {  		//Call ContainsKey method.If key does not exist' exit method.  		var containsKey = sourceType.GetMethod ("ContainsKey");  		il.Emit (OpCodes.Ldarg_1);  		il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  		il.Emit (OpCodes.Callvirt' containsKey);  		var containsKey_False = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse' containsKey_False);  		//ContainsKey=false --> Exit method without do anything.  		{  			il.Emit (OpCodes.Ldarg_2);  			il.LoadLocal (typeConverter);  			il.Emit (OpCodes.Ldarg_1);  			il.Emit (OpCodes.Ldstr' sourceProperty.IndexedPropertyKey);  			il.Emit (OpCodes.Callvirt' sourceGetMethod);  			il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  			il.Emit (OpCodes.Callvirt' targetSetMethod);  		}  		il.MarkLabel (containsKey_False);  	}  	#endregion  } else if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else {  	#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  	il.Emit (OpCodes.Ldarg_2);  	il.LoadLocal (typeConverter);  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Callvirt' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  	il.Emit (OpCodes.Callvirt' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (sourceProperty_PropertyType == targetProperty_PropertyType) {  	#region  	il.Emit (ldTargetTypeArg' 2);  	il.Emit (ldSourceTypeArg' 1);  	il.Emit (sourceMethodCall' sourceGetMethod);  	il.Emit (targetMethodCall' targetSetMethod);  	#endregion  } else {  	#region target.P1 = this.TypeConverter.ToXXX(source.P1) ?? target.P1;  	il.Emit (OpCodes.Ldarg_2);  	il.LoadLocal (typeConverter);  	il.Emit (OpCodes.Ldarg_1);  	il.Emit (OpCodes.Callvirt' sourceGetMethod);  	il.Emit (OpCodes.Box' sourceProperty_PropertyType);  	il.Emit (OpCodes.Callvirt' GetTypeConverterToTypeMethodInfo (targetProperty.ActualType));  	il.Emit (OpCodes.Callvirt' targetSetMethod);  	#endregion  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (deepCopy == false && newCollection == false) {  	MethodInfo md = null;  	if (IsImmutable (targetProperty.ActualType) == true) {  		if (this.HasPostAction) {  			#region target.P1 = this.CallPostAction(source.P1' target.P1);  			//if (this.HasPostAction == true) { ... }  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  			var hasPostActionIsFalseLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  			{  				il.Emit (ldTargetTypeArg' 2);  				{  					il.Emit (OpCodes.Ldarg_0);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (targetMethodCall' targetGetMethod);  					md = _CallPostAction_Method;  					il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  				}  				il.Emit (targetMethodCall' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasPostActionIsFalseLabel);  		}  	} else if (targetCreated) {  		#region this.Map(source.P1' target.P1' context);  		il.Emit (ldTargetTypeArg' 2);  		{  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (targetMethodCall' targetGetMethod);  			il.Emit (OpCodes.Ldarg_3);  			if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  				md = _MapInternal_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Class_Class_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Class_Struct_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Struct_Class_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Struct_Struct_Method;  			}  			il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  		//il.Emit(OpCodes.Pop);  		#endregion  		}  		il.Emit (targetMethodCall' targetSetMethod);  	}  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (deepCopy == false && newCollection == false) {  	MethodInfo md = null;  	if (IsImmutable (targetProperty.ActualType) == true) {  		if (this.HasPostAction) {  			#region target.P1 = this.CallPostAction(source.P1' target.P1);  			//if (this.HasPostAction == true) { ... }  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  			var hasPostActionIsFalseLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  			{  				il.Emit (ldTargetTypeArg' 2);  				{  					il.Emit (OpCodes.Ldarg_0);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (targetMethodCall' targetGetMethod);  					md = _CallPostAction_Method;  					il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  				}  				il.Emit (targetMethodCall' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasPostActionIsFalseLabel);  		}  	} else if (targetCreated) {  		#region this.Map(source.P1' target.P1' context);  		il.Emit (ldTargetTypeArg' 2);  		{  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (targetMethodCall' targetGetMethod);  			il.Emit (OpCodes.Ldarg_3);  			if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  				md = _MapInternal_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Class_Class_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Class_Struct_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Struct_Class_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Struct_Struct_Method;  			}  			il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  		//il.Emit(OpCodes.Pop);  		#endregion  		}  		il.Emit (targetMethodCall' targetSetMethod);  	}  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (deepCopy == false && newCollection == false) {  	MethodInfo md = null;  	if (IsImmutable (targetProperty.ActualType) == true) {  		if (this.HasPostAction) {  			#region target.P1 = this.CallPostAction(source.P1' target.P1);  			//if (this.HasPostAction == true) { ... }  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  			var hasPostActionIsFalseLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  			{  				il.Emit (ldTargetTypeArg' 2);  				{  					il.Emit (OpCodes.Ldarg_0);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (targetMethodCall' targetGetMethod);  					md = _CallPostAction_Method;  					il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  				}  				il.Emit (targetMethodCall' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasPostActionIsFalseLabel);  		}  	} else if (targetCreated) {  		#region this.Map(source.P1' target.P1' context);  		il.Emit (ldTargetTypeArg' 2);  		{  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (targetMethodCall' targetGetMethod);  			il.Emit (OpCodes.Ldarg_3);  			if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  				md = _MapInternal_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Class_Class_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Class_Struct_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Struct_Class_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Struct_Struct_Method;  			}  			il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  		//il.Emit(OpCodes.Pop);  		#endregion  		}  		il.Emit (targetMethodCall' targetSetMethod);  	}  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (deepCopy == false && newCollection == false) {  	MethodInfo md = null;  	if (IsImmutable (targetProperty.ActualType) == true) {  		if (this.HasPostAction) {  			#region target.P1 = this.CallPostAction(source.P1' target.P1);  			//if (this.HasPostAction == true) { ... }  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  			var hasPostActionIsFalseLabel = il.DefineLabel ();  			il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  			{  				il.Emit (ldTargetTypeArg' 2);  				{  					il.Emit (OpCodes.Ldarg_0);  					il.Emit (ldSourceTypeArg' 1);  					il.Emit (sourceMethodCall' sourceGetMethod);  					il.Emit (ldTargetTypeArg' 2);  					il.Emit (targetMethodCall' targetGetMethod);  					md = _CallPostAction_Method;  					il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  				}  				il.Emit (targetMethodCall' targetSetMethod);  			#endregion  			}  			il.MarkLabel (hasPostActionIsFalseLabel);  		}  	} else if (targetCreated) {  		#region this.Map(source.P1' target.P1' context);  		il.Emit (ldTargetTypeArg' 2);  		{  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (targetMethodCall' targetGetMethod);  			il.Emit (OpCodes.Ldarg_3);  			if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  				md = _MapInternal_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Class_Class_Method;  			} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Class_Struct_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  				md = _MapInternal_Struct_Class_Method;  			} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  				md = _MapInternal_Struct_Struct_Method;  			}  			il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  		//il.Emit(OpCodes.Pop);  		#endregion  		}  		il.Emit (targetMethodCall' targetSetMethod);  	}  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsImmutable (targetProperty.ActualType) == true) {  	if (this.HasPostAction) {  		#region target.P1 = this.CallPostAction(source.P1' target.P1);  		//if (this.HasPostAction == true) { ... }  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  		var hasPostActionIsFalseLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  		{  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				md = _CallPostAction_Method;  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			}  			il.Emit (targetMethodCall' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasPostActionIsFalseLabel);  	}  } else if (targetCreated) {  	#region this.Map(source.P1' target.P1' context);  	il.Emit (ldTargetTypeArg' 2);  	{  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (targetMethodCall' targetGetMethod);  		il.Emit (OpCodes.Ldarg_3);  		if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  			md = _MapInternal_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Class_Class_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Class_Struct_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Struct_Class_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Struct_Struct_Method;  		}  		il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  	//il.Emit(OpCodes.Pop);  	#endregion  	}  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsImmutable (targetProperty.ActualType) == true) {  	if (this.HasPostAction) {  		#region target.P1 = this.CallPostAction(source.P1' target.P1);  		//if (this.HasPostAction == true) { ... }  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  		var hasPostActionIsFalseLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  		{  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				md = _CallPostAction_Method;  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			}  			il.Emit (targetMethodCall' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasPostActionIsFalseLabel);  	}  } else if (targetCreated) {  	#region this.Map(source.P1' target.P1' context);  	il.Emit (ldTargetTypeArg' 2);  	{  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (targetMethodCall' targetGetMethod);  		il.Emit (OpCodes.Ldarg_3);  		if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  			md = _MapInternal_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Class_Class_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Class_Struct_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Struct_Class_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Struct_Struct_Method;  		}  		il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  	//il.Emit(OpCodes.Pop);  	#endregion  	}  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsImmutable (targetProperty.ActualType) == true) {  	if (this.HasPostAction) {  		#region target.P1 = this.CallPostAction(source.P1' target.P1);  		//if (this.HasPostAction == true) { ... }  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  		var hasPostActionIsFalseLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  		{  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				md = _CallPostAction_Method;  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			}  			il.Emit (targetMethodCall' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasPostActionIsFalseLabel);  	}  } else if (targetCreated) {  	#region this.Map(source.P1' target.P1' context);  	il.Emit (ldTargetTypeArg' 2);  	{  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (targetMethodCall' targetGetMethod);  		il.Emit (OpCodes.Ldarg_3);  		if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  			md = _MapInternal_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Class_Class_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Class_Struct_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Struct_Class_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Struct_Struct_Method;  		}  		il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  	//il.Emit(OpCodes.Pop);  	#endregion  	}  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (IsImmutable (targetProperty.ActualType) == true) {  	if (this.HasPostAction) {  		#region target.P1 = this.CallPostAction(source.P1' target.P1);  		//if (this.HasPostAction == true) { ... }  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  		var hasPostActionIsFalseLabel = il.DefineLabel ();  		il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  		{  			il.Emit (ldTargetTypeArg' 2);  			{  				il.Emit (OpCodes.Ldarg_0);  				il.Emit (ldSourceTypeArg' 1);  				il.Emit (sourceMethodCall' sourceGetMethod);  				il.Emit (ldTargetTypeArg' 2);  				il.Emit (targetMethodCall' targetGetMethod);  				md = _CallPostAction_Method;  				il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  			}  			il.Emit (targetMethodCall' targetSetMethod);  		#endregion  		}  		il.MarkLabel (hasPostActionIsFalseLabel);  	}  } else if (targetCreated) {  	#region this.Map(source.P1' target.P1' context);  	il.Emit (ldTargetTypeArg' 2);  	{  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (targetMethodCall' targetGetMethod);  		il.Emit (OpCodes.Ldarg_3);  		if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  			md = _MapInternal_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Class_Class_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Class_Struct_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Struct_Class_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Struct_Struct_Method;  		}  		il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  	//il.Emit(OpCodes.Pop);  	#endregion  	}  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (this.HasPostAction) {  	#region target.P1 = this.CallPostAction(source.P1' target.P1);  	//if (this.HasPostAction == true) { ... }  	il.Emit (OpCodes.Ldarg_0);  	il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  	var hasPostActionIsFalseLabel = il.DefineLabel ();  	il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  	{  		il.Emit (ldTargetTypeArg' 2);  		{  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (targetMethodCall' targetGetMethod);  			md = _CallPostAction_Method;  			il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  		}  		il.Emit (targetMethodCall' targetSetMethod);  	#endregion  	}  	il.MarkLabel (hasPostActionIsFalseLabel);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (this.HasPostAction) {  	#region target.P1 = this.CallPostAction(source.P1' target.P1);  	//if (this.HasPostAction == true) { ... }  	il.Emit (OpCodes.Ldarg_0);  	il.Emit (OpCodes.Callvirt' _ObjectMapConfig_HasPostActionPropertyGetMethod);  	var hasPostActionIsFalseLabel = il.DefineLabel ();  	il.Emit (OpCodes.Brfalse_S' hasPostActionIsFalseLabel);  	{  		il.Emit (ldTargetTypeArg' 2);  		{  			il.Emit (OpCodes.Ldarg_0);  			il.Emit (ldSourceTypeArg' 1);  			il.Emit (sourceMethodCall' sourceGetMethod);  			il.Emit (ldTargetTypeArg' 2);  			il.Emit (targetMethodCall' targetGetMethod);  			md = _CallPostAction_Method;  			il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  		}  		il.Emit (targetMethodCall' targetSetMethod);  	#endregion  	}  	il.MarkLabel (hasPostActionIsFalseLabel);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetCreated) {  	#region this.Map(source.P1' target.P1' context);  	il.Emit (ldTargetTypeArg' 2);  	{  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (targetMethodCall' targetGetMethod);  		il.Emit (OpCodes.Ldarg_3);  		if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  			md = _MapInternal_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Class_Class_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Class_Struct_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Struct_Class_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Struct_Struct_Method;  		}  		il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  	//il.Emit(OpCodes.Pop);  	#endregion  	}  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: if (targetCreated) {  	#region this.Map(source.P1' target.P1' context);  	il.Emit (ldTargetTypeArg' 2);  	{  		il.Emit (OpCodes.Ldarg_0);  		il.Emit (ldSourceTypeArg' 1);  		il.Emit (sourceMethodCall' sourceGetMethod);  		il.Emit (ldTargetTypeArg' 2);  		il.Emit (targetMethodCall' targetGetMethod);  		il.Emit (OpCodes.Ldarg_3);  		if (sourceProperty.IsNullableT || targetProperty.IsNullableT) {  			md = _MapInternal_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Class_Class_Method;  		} else if (sourceProperty_PropertyType.IsClass && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Class_Struct_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsClass) {  			md = _MapInternal_Struct_Class_Method;  		} else if (sourceProperty_PropertyType.IsValueType && targetProperty_PropertyType.IsValueType) {  			md = _MapInternal_Struct_Struct_Method;  		}  		il.Emit (OpCodes.Callvirt' md.MakeGenericMethod (sourceProperty_PropertyType' targetProperty_PropertyType));  	//il.Emit(OpCodes.Pop);  	#endregion  	}  	il.Emit (targetMethodCall' targetSetMethod);  }  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
Magic Number,HigLabo.Core,ObjectMapConfig,F:\newReposMay17\higty_higlabo\HigLabo.Mapper\Core\ObjectMapConfig.cs,CreateMapPropertyMethod,The following statement contains a magic number: il.Emit (ldTargetTypeArg' 2);  
