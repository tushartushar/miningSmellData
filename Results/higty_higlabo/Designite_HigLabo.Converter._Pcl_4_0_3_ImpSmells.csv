Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Converter,ModifiedUtf7Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,Cyclomatic complexity of the method is 12
Complex Method,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,Cyclomatic complexity of the method is 9
Complex Method,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,Cyclomatic complexity of the method is 8
Complex Method,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,Cyclomatic complexity of the method is 10
Complex Conditional,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The conditional expression  "isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The conditional expression  "isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The conditional expression  "isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The conditional expression  "isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The conditional expression  "isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338"  is complex.
Complex Conditional,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The conditional expression  "isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370"  is complex.
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,Base64Converter,The following statement contains a magic number: this.CharCountPerLine = 72;
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: BufferByteArray encoded = new BufferByteArray((input.Length / 3) * 4);
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: BufferByteArray encoded = new BufferByteArray((input.Length / 3) * 4);
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: Int32 loopCount = input.Length / 3;
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    if (bufferIndex + 6 >= buffer.Length)                  {                      encoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = encodeTable[c2 & 63];                                    charCountPerLine += 4;                    if (charCountPerLine >= this.CharCountPerLine)                  {                      buffer[bufferIndex++] = 13;// \r                      buffer[bufferIndex++] = 10;// \n                      charCountPerLine = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (loopCount > 0)              {                  startIndex += 3;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (bufferIndex + 4 > buffer.Length)              {                  encoded.Add(buffer' bufferIndex);              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  buffer[bufferIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  buffer[bufferIndex++] = encodeTable[c0 >> 2];                  buffer[bufferIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  buffer[bufferIndex++] = 61;                  buffer[bufferIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length % 3 == 0)              {                  encoded = new Byte[(input.Length / 3) * 4];              }              else              {                  encoded = new Byte[(input.Length / 3) * 4 + 4];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length % 3 == 0)              {                  encoded = new Byte[(input.Length / 3) * 4];              }              else              {                  encoded = new Byte[(input.Length / 3) * 4 + 4];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length % 3 == 0)              {                  encoded = new Byte[(input.Length / 3) * 4];              }              else              {                  encoded = new Byte[(input.Length / 3) * 4 + 4];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length % 3 == 0)              {                  encoded = new Byte[(input.Length / 3) * 4];              }              else              {                  encoded = new Byte[(input.Length / 3) * 4 + 4];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length % 3 == 0)              {                  encoded = new Byte[(input.Length / 3) * 4];              }              else              {                  encoded = new Byte[(input.Length / 3) * 4 + 4];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length % 3 == 0)              {                  encoded = new Byte[(input.Length / 3) * 4];              }              else              {                  encoded = new Byte[(input.Length / 3) * 4 + 4];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: Int32 loopCount = input.Length / 3;
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 3;                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = input[startIndex + 2];                    encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = encodeTable[c2 & 63];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: startIndex += 3;
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,EncodeWithoutInsertingNewline,The following statement contains a magic number: if (input.Length - startIndex == 2)              {                  c0 = input[startIndex];                  c1 = input[startIndex + 1];                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = encodeTable[((c1 & 0x0f) << 2) | (c2 >> 6)];                  encoded[encodedIndex++] = 61;                  paddingCount = 1;              }              else if (input.Length - startIndex == 1)              {                  c0 = input[startIndex];                  c1 = 0;                  c2 = 0;                  encoded[encodedIndex++] = encodeTable[c0 >> 2];                  encoded[encodedIndex++] = encodeTable[(c1 >> 4) | ((c0 & 0x3) << 4)];                  encoded[encodedIndex++] = 61;                  encoded[encodedIndex++] = 61;                  paddingCount = 2;              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: BufferByteArray decoded = new BufferByteArray((input.Length / 4 * 3));
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: BufferByteArray decoded = new BufferByteArray((input.Length / 4 * 3));
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromUnNormalizedInput,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = decodeTable[input[i]];                  if (c == 255) { continue; }                    if (bufferIndex + 3 >= buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    bbbb = bbbb << 6 | c;                  bIndex += 1;                  if (input[i] == 61)// =                   {                      paddingCount++;                  }                  if (bIndex == 4)                  {                      buffer[bufferIndex++] = (byte)((bbbb >> 16) & 0xFF);                      buffer[bufferIndex++] = (byte)((bbbb >> 8) & 0xFF);                      buffer[bufferIndex++] = (byte)(bbbb & 0xFF);                      bbbb = 0;                      bIndex = 0;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (input[input.Length - 1] == 61)// =              {                  paddingCount = 1;                  if (input[input.Length - 2] == 61)// =                  {                      paddingCount = 2;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (input[input.Length - 1] == 61)// =              {                  paddingCount = 1;                  if (input[input.Length - 2] == 61)// =                  {                      paddingCount = 2;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (input[input.Length - 1] == 61)// =              {                  paddingCount = 1;                  if (input[input.Length - 2] == 61)// =                  {                      paddingCount = 2;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (input[input.Length - 1] == 61)// =              {                  paddingCount = 1;                  if (input[input.Length - 2] == 61)// =                  {                      paddingCount = 2;                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: Byte[] decoded = new Byte[(input.Length / 4 * 3) + paddingCount];
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: Byte[] decoded = new Byte[(input.Length / 4 * 3) + paddingCount];
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: Int32 loopCount = input.Length / 4;
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 4;                  buffer = 0;                  for (int bIndex = 0; bIndex < 4; bIndex++)                  {                      buffer = buffer << 6 | decodeTable[input[startIndex + bIndex]];                  }                  decoded[decodedIndex++] = (byte)((buffer >> 16) & 0xFF);                  decoded[decodedIndex++] = (byte)((buffer >> 8) & 0xFF);                  decoded[decodedIndex++] = (byte)(buffer & 0xFF);              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 4;                  buffer = 0;                  for (int bIndex = 0; bIndex < 4; bIndex++)                  {                      buffer = buffer << 6 | decodeTable[input[startIndex + bIndex]];                  }                  decoded[decodedIndex++] = (byte)((buffer >> 16) & 0xFF);                  decoded[decodedIndex++] = (byte)((buffer >> 8) & 0xFF);                  decoded[decodedIndex++] = (byte)(buffer & 0xFF);              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 4;                  buffer = 0;                  for (int bIndex = 0; bIndex < 4; bIndex++)                  {                      buffer = buffer << 6 | decodeTable[input[startIndex + bIndex]];                  }                  decoded[decodedIndex++] = (byte)((buffer >> 16) & 0xFF);                  decoded[decodedIndex++] = (byte)((buffer >> 8) & 0xFF);                  decoded[decodedIndex++] = (byte)(buffer & 0xFF);              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 4;                  buffer = 0;                  for (int bIndex = 0; bIndex < 4; bIndex++)                  {                      buffer = buffer << 6 | decodeTable[input[startIndex + bIndex]];                  }                  decoded[decodedIndex++] = (byte)((buffer >> 16) & 0xFF);                  decoded[decodedIndex++] = (byte)((buffer >> 8) & 0xFF);                  decoded[decodedIndex++] = (byte)(buffer & 0xFF);              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int i = 0; i < loopCount; i++)              {                  startIndex = i * 4;                  buffer = 0;                  for (int bIndex = 0; bIndex < 4; bIndex++)                  {                      buffer = buffer << 6 | decodeTable[input[startIndex + bIndex]];                  }                  decoded[decodedIndex++] = (byte)((buffer >> 16) & 0xFF);                  decoded[decodedIndex++] = (byte)((buffer >> 8) & 0xFF);                  decoded[decodedIndex++] = (byte)(buffer & 0xFF);              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int bIndex = 0; bIndex < 4 - paddingCount; bIndex++)              {                  buffer += buffer << 6 | decodeTable[input[startIndex + bIndex]];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: for (int bIndex = 0; bIndex < 4 - paddingCount; bIndex++)              {                  buffer += buffer << 6 | decodeTable[input[startIndex + bIndex]];              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (paddingCount > 0)              {                  var count = 3 - paddingCount;                  for (int i = 0; i < paddingCount; i++)                  {                      decoded[decodedIndex++] = (byte)(buffer >> (16 - (i * 8)) & 0xFF);                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (paddingCount > 0)              {                  var count = 3 - paddingCount;                  for (int i = 0; i < paddingCount; i++)                  {                      decoded[decodedIndex++] = (byte)(buffer >> (16 - (i * 8)) & 0xFF);                  }              }
Magic Number,HigLabo.Converter,Base64Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Base64Converter.cs,DecodeFromNormalizedInput,The following statement contains a magic number: if (paddingCount > 0)              {                  var count = 3 - paddingCount;                  for (int i = 0; i < paddingCount; i++)                  {                      decoded[decodedIndex++] = (byte)(buffer >> (16 - (i * 8)) & 0xFF);                  }              }
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: for (var index = 0; index < text.Length; index++)              {                  if (text[index] != '&')                  {                       decoded.Append(text[index]);                      continue;                  }                    if (text.Length <= ++index){ throw new FormatException("incorrect form"); }                    if (text[index] == '-')// &- is &                  {                       decoded.Append('&');                      continue;                  }                    var nonprintable = new StringBuilder();                  Int32 startIndex = index;                  Int32 endIndex = index;                    for (; index < text.Length; index++)                  {                      if (text[index] == '-')                       {                          endIndex = index;                          break;                      }                  }                  var length = endIndex - startIndex;                  var padding = 4 - length % 4;                  if (padding == 4)                  {                      padding = 0;                  }                  var bb = new Byte[length + padding];                  for (int i = 0; i < length; i++)                  {                      bb[i] = (Byte)text[startIndex + i];                  }                  if (padding > 0)                  {                      for (int i = length; i < length + padding; i++)                      {                          bb[i] = 61;// =                      }                  }                  decoded.Append(_Base64Converter.DecodeToText(bb' Encoding.BigEndianUnicode));              }
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: for (var index = 0; index < text.Length; index++)              {                  if (text[index] != '&')                  {                       decoded.Append(text[index]);                      continue;                  }                    if (text.Length <= ++index){ throw new FormatException("incorrect form"); }                    if (text[index] == '-')// &- is &                  {                       decoded.Append('&');                      continue;                  }                    var nonprintable = new StringBuilder();                  Int32 startIndex = index;                  Int32 endIndex = index;                    for (; index < text.Length; index++)                  {                      if (text[index] == '-')                       {                          endIndex = index;                          break;                      }                  }                  var length = endIndex - startIndex;                  var padding = 4 - length % 4;                  if (padding == 4)                  {                      padding = 0;                  }                  var bb = new Byte[length + padding];                  for (int i = 0; i < length; i++)                  {                      bb[i] = (Byte)text[startIndex + i];                  }                  if (padding > 0)                  {                      for (int i = length; i < length + padding; i++)                      {                          bb[i] = 61;// =                      }                  }                  decoded.Append(_Base64Converter.DecodeToText(bb' Encoding.BigEndianUnicode));              }
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: for (var index = 0; index < text.Length; index++)              {                  if (text[index] != '&')                  {                       decoded.Append(text[index]);                      continue;                  }                    if (text.Length <= ++index){ throw new FormatException("incorrect form"); }                    if (text[index] == '-')// &- is &                  {                       decoded.Append('&');                      continue;                  }                    var nonprintable = new StringBuilder();                  Int32 startIndex = index;                  Int32 endIndex = index;                    for (; index < text.Length; index++)                  {                      if (text[index] == '-')                       {                          endIndex = index;                          break;                      }                  }                  var length = endIndex - startIndex;                  var padding = 4 - length % 4;                  if (padding == 4)                  {                      padding = 0;                  }                  var bb = new Byte[length + padding];                  for (int i = 0; i < length; i++)                  {                      bb[i] = (Byte)text[startIndex + i];                  }                  if (padding > 0)                  {                      for (int i = length; i < length + padding; i++)                      {                          bb[i] = 61;// =                      }                  }                  decoded.Append(_Base64Converter.DecodeToText(bb' Encoding.BigEndianUnicode));              }
Magic Number,HigLabo.Converter,ModifiedUtf7Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\ModifiedUtf7Converter.cs,Decode,The following statement contains a magic number: for (var index = 0; index < text.Length; index++)              {                  if (text[index] != '&')                  {                       decoded.Append(text[index]);                      continue;                  }                    if (text.Length <= ++index){ throw new FormatException("incorrect form"); }                    if (text[index] == '-')// &- is &                  {                       decoded.Append('&');                      continue;                  }                    var nonprintable = new StringBuilder();                  Int32 startIndex = index;                  Int32 endIndex = index;                    for (; index < text.Length; index++)                  {                      if (text[index] == '-')                       {                          endIndex = index;                          break;                      }                  }                  var length = endIndex - startIndex;                  var padding = 4 - length % 4;                  if (padding == 4)                  {                      padding = 0;                  }                  var bb = new Byte[length + padding];                  for (int i = 0; i < length; i++)                  {                      bb[i] = (Byte)text[startIndex + i];                  }                  if (padding > 0)                  {                      for (int i = length; i < length + padding; i++)                      {                          bb[i] = 61;// =                      }                  }                  decoded.Append(_Base64Converter.DecodeToText(bb' Encoding.BigEndianUnicode));              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,QuotedPrintableConverter,The following statement contains a magic number: this.CharCountPerLine = 76;
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: BufferByteArray decoded = new BufferByteArray(input.Length * 3);
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Encode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 6 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                  if (InsertNewline == true && this.CharCountPerLine - 3 < charCount)//Insert new line                  {                      var escaped = false;                        if (c == 0x09 || c == 0x20)                      {                          // \t or white space                          buffer[bufferIndex++] = 61; // '='                          buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                          buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                            escaped = true;                      }                        buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = 13; // \r                      buffer[bufferIndex++] = 10; // \n                        charCount = 0;                        if (escaped) { continue; }                  }                    var quote = false;                    switch (c)                  {                      case 9: // \t                      case 32: // ' ' WhiteSpace                      case 63: // ?                      case 95: // _                          quote = this.InsertNewline == false;                          break;                      case 0x3d: // '='                          quote = true;                          break;                        default:                          // NonPrintableChar                          quote = (c < 33 || 127 < c);                          break;                  }                    if (quote == true)                  {                      // = or NonPrintableChar                      buffer[bufferIndex++] = 61; // '='                      buffer[bufferIndex++] = HexAlphabet[(c & 0xf0) >> 4];                      buffer[bufferIndex++] = HexAlphabet[c & 0x0f];                        charCount += 3;                  }                  else                  {                      // = or PrintableChar                      buffer[bufferIndex++] = c;                        charCount++;                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: var bbb = new byte[3];
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,QuotedPrintableConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\QuotedPrintableConverter.cs,Decode,The following statement contains a magic number: for (int i = 0; i < length; i++)              {                  c = input[i];                  if (bufferIndex + 3 > buffer.Length)                  {                      decoded.Add(buffer' bufferIndex);                      bufferIndex = 0;                  }                    if (bbbIndex == 0)                  {                      if (c == 61) // =                      {                          bbb[bbbIndex++] = c;                      }                      else if (this.Mode == QuotedPrintableConvertMode.Header && c == 0x5f) // _                      {                          buffer[bufferIndex++] = 32; // white space                      }                      else                      {                          // NonQuotedChar                          buffer[bufferIndex++] = c;                      }                  }                  else                  {                      // QuotedChar                      bbb[bbbIndex++] = c;                  }                    if (bbbIndex == 3)                  {                      if (bbb[1] == 13 && bbb[2] == 10)                      {                          // New line                          bbbIndex = 0;                      }                      else if (bbb[1] == 13 || bbb[1] == 10)                      {                          if (bbb[2] == 61)                          {                              bbbIndex = 1;                          }                          else                          {                              buffer[bufferIndex++] = bbb[2];                              bbbIndex = 0;                          }                      }                      else                      {                          byte d = 0;                            for (var bIndex = 1; bIndex < 3; bIndex++)                          {                              d <<= 4;                              b = bbb[bIndex];                                if (0x30 <= b && b <= 0x39)                              {                                  d |= (byte)(b - 0x30);// 0-9                              }                              else if (0x41 <= b && b <= 0x46)                              {                                  d |= (byte)(b - 0x37);// A-F                              }                              else if (0x61 <= b && b <= 0x66)                              {                                  d |= (byte)(b - 0x57);// a-f                              }                              else                              {                                  throw new FormatException();                              }                          }                          buffer[bufferIndex++] = d;                          bbbIndex = 0;                      }                  }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Rfc2231Converter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\Rfc2231Converter.cs,Decode,The following statement contains a magic number: while (true)              {                  //%FF形式かどうかチェック                  if (CurrentIndex <= text.Length - 3 &&                      text[CurrentIndex] == '%')                  {                      Hex = 0;                      for (int i = 0; i < 2; i++)                      {                          var c1 = (Byte)text[CurrentIndex + 1 + i];                            if (c1 >= 48 && c1 <= 57)                          {                              Hex += (c1 - 48);                          }                          if (c1 >= 65 && c1 <= 70)                          {                              Hex += (c1 - 65 + 10);                          }                          if (c1 >= 97 && c1 <= 102)                          {                              Hex += (c1 - 97 + 10);                          }                          if (i == 0)                          {                              Hex = Hex * 16;                          }                      }                  }                  else                  {                      Hex = null;                  }                    if (Hex.HasValue == true)                  {                      bb[ByteArrayIndex] = (Byte)Hex.Value;                      CurrentIndex += 3;                  }                  else                  {                      bb[ByteArrayIndex] = (Byte)text[CurrentIndex];                      CurrentIndex += 1;                  }                  ByteArrayIndex += 1;                  if (CurrentIndex >= text.Length) { break; }              }
Magic Number,HigLabo.Converter,Base64CharTable,C:\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,Base64CharTable,The following statement contains a magic number: Char[] cc = new Char[64];
Magic Number,HigLabo.Converter,Base64CharTable,C:\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,Base64CharTable,The following statement contains a magic number: cc[62] = char62;
Magic Number,HigLabo.Converter,Base64CharTable,C:\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,Base64CharTable,The following statement contains a magic number: cc[63] = char63;
Magic Number,HigLabo.Converter,Base64CharTable,C:\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,SetDecodeTable,The following statement contains a magic number: _DecodeTable = new Byte[256];
Magic Number,HigLabo.Converter,Base64CharTable,C:\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,SetDecodeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  int mappingIndex = -1;                  if (i == 61) // =                   {                      mappingIndex = 0;                  }                  else                  {                      for (int bc = 0; bc < _EncodeTable.Length; bc++)                      {                          if (i == _EncodeTable[bc])                          {                              mappingIndex = bc;                              break;                          }                      }                  }                    if (mappingIndex > -1)                  {                      _DecodeTable[i] = (byte)mappingIndex;                  }                  else                  {                      _DecodeTable[i] = 0xFF;                  }              }
Magic Number,HigLabo.Converter,Base64CharTable,C:\repos\higty_higlabo\HigLabo.Converter\Core\Base64CharTable.cs,SetDecodeTable,The following statement contains a magic number: for (int i = 0; i < 256; i++)              {                  int mappingIndex = -1;                  if (i == 61) // =                   {                      mappingIndex = 0;                  }                  else                  {                      for (int bc = 0; bc < _EncodeTable.Length; bc++)                      {                          if (i == _EncodeTable[bc])                          {                              mappingIndex = bc;                              break;                          }                      }                  }                    if (mappingIndex > -1)                  {                      _DecodeTable[i] = (byte)mappingIndex;                  }                  else                  {                      _DecodeTable[i] = 0xFF;                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] + FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] + FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] + FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] + FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] + FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToFullWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.HalfWidthNumber && 48 <= c && c <= 58) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 65 <= c && c <= 90) { isConvert = true; }                  if (isConvert == false && this.HalfWidthAlphabet && 97 <= c && c <= 122) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] + FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] - FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] - FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] - FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] - FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] - FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
Magic Number,HigLabo.Core,StringConverter,C:\repos\higty_higlabo\HigLabo.Converter\Converter\StringConverter.cs,ToHalfWidth,The following statement contains a magic number: for (Int32 i = 0; i < value.Length; i++)              {                  var c = value[i];                  var isConvert = false;                  if (isConvert == false && this.FullWidthNumber && 65296 <= c && c <= 65306) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65313 <= c && c <= 65338) { isConvert = true; }                  if (isConvert == false && this.FullWidthAlphabet && 65345 <= c && c <= 65370) { isConvert = true; }                    if (isConvert == true)                  {                      cc[i] = (char)(value[i] - FullHalfDifference);                  }                  else                  {                      cc[i] = value[i];                  }              }
