Implementation smell,Namespace,Class,File,Method,Description
Long Method,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The method has 251 lines of code.
Complex Method,Mono.Options,Option,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,Option,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,AddSeparators,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,GetDescription,Cyclomatic complexity of the method is 12
Long Parameter List,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                        "The name of the connection string (falls back to machine name) or the connection string itself to the server and database you want to execute your migrations against."' " is 169.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                        "The namespace contains the migrations you want to run. Default is all migrations found within the Target Assembly will be run."' " is 129.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                        "Output generated SQL to a file. Default is no output. Use outputFilename to control the filename' otherwise [assemblyname].sql is the default."' " is 145.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                        "The name of the file to output the generated SQL to. The output option must be included for output to be saved to the file."' " is 126.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                        "The task you want FluentMigrator to perform. Available choices are: migrate:up' migrate (same as migrate:up)' migrate:down' rollback' rollback:toversion' rollback:all' validateversionorder' listmigrations. Default is 'migrate'."' " is 230.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                        "Indicates that migrations will be generated without consulting a target database. Should only be used when generating an output file."' " is 136.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The length of the statement  "                                              + "Valid values are: ma' maintenance' mi' migrations with an optional '+' or '-' at the end to enable or disable the option. " " is 126.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,DisplayHelp,The length of the statement  "            System.Console.WriteLine(@"  migrate -a bin\debug\MyMigrations.dll -db SqlServer2008 -conn ""SEE_BELOW"" -profile ""Debug"""); " is 126.
Long Statement,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,DisplayHelp,The length of the statement  "            System.Console.WriteLine(@"  migrate -a bin\debug\MyMigrations.dll -db SqlServer2008 -conn ""namedConnection"" -profile ""Debug"""); " is 132.
Complex Conditional,Mono.Options,Option,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                      (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Magic Number,FluentMigrator.Console,MigratorConsole,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\MigratorConsole.cs,Run,The following statement contains a magic number: var optionSet = new OptionSet                  {                      {                          "assembly=|a=|target="'                          "REQUIRED. The assembly containing the migrations you want to execute."'                          v => { TargetAssembly = v; }                      }'                      {                          "provider=|dbType=|db="'                          $"REQUIRED. The kind of database you are migrating against. Available choices are: {dbChoices}."'                          v => { ProcessorType = v; }                      }'                      {                          "connectionString=|connection=|conn=|c="'                          "The name of the connection string (falls back to machine name) or the connection string itself to the server and database you want to execute your migrations against."'                          v => { Connection = v; }                      }'                      {                          "connectionStringConfigPath=|configPath="'                          string.Format(                              "The path of the machine.config where the connection string named by connectionString" +                              " is found. If not specified' it defaults to the machine.config used by the currently running CLR version")'                          v => { ConnectionStringConfigPath = v; }                      }'                      {                          "namespace=|ns="'                          "The namespace contains the migrations you want to run. Default is all migrations found within the Target Assembly will be run."'                          v => { Namespace = v; }                      }'                      {                          "nested"'                          "Whether migrations in nested namespaces should be included. Used in conjunction with the namespace option."'                          v => { NestedNamespaces = v != null; }                      }'                      {                          "output|out|o"'                          "Output generated SQL to a file. Default is no output. Use outputFilename to control the filename' otherwise [assemblyname].sql is the default."'                          v => { Output = v != null; }                      }'                      {                          "outputFilename=|outfile=|of="'                          "The name of the file to output the generated SQL to. The output option must be included for output to be saved to the file."'                          v => { OutputFilename = v; }                      }'                      {                          "preview|p"'                          "Only output the SQL generated by the migration - do not execute it. Default is false."'                          v => { PreviewOnly = v != null; }                      }'                      {                          "steps="'                          "The number of versions to rollback if the task is 'rollback'. Default is 1."'                          v => { Steps = int.Parse(v); }                      }'                      {                          "task=|t="'                          "The task you want FluentMigrator to perform. Available choices are: migrate:up' migrate (same as migrate:up)' migrate:down' rollback' rollback:toversion' rollback:all' validateversionorder' listmigrations. Default is 'migrate'."'                          v => { Task = v; }                      }'                      {                          "version="'                          "The specific version to migrate. Default is 0' which will run all migrations."'                          v => { Version = long.Parse(v); }                      }'                      {                          "startVersion="'                          "The specific version to start migrating from. Only used when NoConnection is true. Default is 0"'                          v => { StartVersion = long.Parse(v); }                      }'                      {                          "noConnection"'                          "Indicates that migrations will be generated without consulting a target database. Should only be used when generating an output file."'                          v => { NoConnection = v != null; }                      }'                      {                          "verbose="'                          "Show the SQL statements generated and execution time in the console. Default is false."'                          v => { Verbose = v != null; }                      }'                      {                          "stopOnError="'                          "Pauses migration execution until the user input if any error occured. Default is false."'                          v => { StopOnError = v != null; }                      }'                      {                          "workingdirectory=|wd="'                          "The directory to load SQL scripts specified by migrations from."'                          v => { WorkingDirectory = v; }                      }'                      {                          "profile="'                          "The profile to run after executing migrations."'                          v => { Profile = v; }                      }'                      {                          "context="'                          "Set ApplicationContext to the given string."'                          v => { ApplicationContext = v; }                      }'                      {                          "timeout="'                          "Overrides the default SqlCommand timeout of 30 seconds."'                          v => { Timeout = int.Parse(v); }                      }'                      {                          "tag="'                          "Filters the migrations to be run by tag."'                          v => { Tags.Add(v); }                      }'                      {                          "include-untagged:"'                          "Include untagged migrations and/or maintenance objects."'                          v =>                          {                              if (string.IsNullOrEmpty(v))                              {                                  IncludeUntaggedMigrations = IncludeUntaggedMaintenances = true;                              }                              else                              {                                  var items = v.Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries)                                      .Select(x => x.ToLowerInvariant().Trim())                                      .Where(x => !string.IsNullOrEmpty(x))                                      .Select(                                          x =>                                          {                                              var hasOption = x.EndsWith("+") || x.EndsWith("-");                                              var enable = !x.EndsWith("-");                                              var name = hasOption ? x.Substring(0' x.Length - 1) : x;                                              return new                                              {                                                  FullName = x'                                                  ShortName = name.Substring(Math.Min(2' name.Length))'                                                  Enable = enable'                                              };                                          });                                  foreach (var item in items)                                  {                                      switch (item.ShortName)                                      {                                          case "ma":                                              IncludeUntaggedMaintenances = item.Enable;                                              break;                                          case "mi":                                              IncludeUntaggedMigrations = item.Enable;                                              break;                                          default:                                              throw new ArgumentOutOfRangeException(                                                  $"The argument {item.FullName} is not supported. "                                                + "Valid values are: ma' maintenance' mi' migrations with an optional '+' or '-' at the end to enable or disable the option. "                                                + "Multiple values may be given when separated by a comma.");                                      }                                  }                              }                          }                      }'                      {                          "providerswitches="'                          "Provider specific switches"'                          v => { ProviderSwitches = v; }                      }'                      {                          "strip|strip-comments"'                          "Strip comments from the SQL scripts. Default is true."'                          v => { StripComments = v != null; }                      }'                      {                          "help|h|?"'                          "Displays this help menu."'                          v => { ShowHelp = true; }                      }'                      {                          "transaction-per-session|tps"'                          "Overrides the transaction behavior of migrations' so that all migrations to be executed will run in one transaction."'                          v => { TransactionPerSession = v != null; }                      }'                      {                          "allow-breaking-changes|abc"'                          "Allows execution of migrations marked as breaking changes."'                          v => { AllowBreakingChange = v != null; }                      }'                      {                          "default-schema-name="'                          "Set default schema name for the VersionInfo table and the migrations."'                          v => { DefaultSchemaName = v; }                      }'                  };
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'                      delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: string prefix = new string(' '' OptionWidth + 2);
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 1;
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Magic Number,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Missing Default,Mono.Options,OptionSet,D:\research\architectureSmells\repos1\schambers_fluentmigrator\src\FluentMigrator.Console\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
