Implementation smell,Namespace,Class,File,Method,Description
Long Method,FluentMigrator.T4,CodeGenerator,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\CodeGenerator.cs,LoadTables,The method has 110 lines of code.
Long Statement,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddIrregularRule,The length of the statement  "            AddPluralRule(String.Concat("("' singular[0]' ")"' singular.Substring(1)' "$")' String.Concat("$1"' plural.Substring(1))); " is 122.
Long Statement,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddIrregularRule,The length of the statement  "            AddSingularRule(String.Concat("("' plural[0]' ")"' plural.Substring(1)' "$")' String.Concat("$1"' singular.Substring(1))); " is 122.
Long Statement,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddUnderscores,The length of the statement  "            return Regex.Replace(Regex.Replace(Regex.Replace(pascalCasedWord' @"([A-Z]+)([A-Z][a-z])"' "$1_$2")' @"([a-z\d])([A-Z])"' "$1_$2")' @"[-\s]"' "_").ToLower(); " is 157.
Long Statement,FluentMigrator.T4,OracleSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\OracleSchemaReader.cs,LoadColumns,The length of the statement  "                        var type = this.GetPropertyType(rdr["DataType"].ToString()' (rdr["DataType"] == DBNull.Value ? null : rdr["DataType"].ToString())); " is 131.
Long Statement,FluentMigrator.T4,PostGreSqlSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\PostGreSqlSchemaReader.cs,LoadIndices,The length of the statement  "select indlst.relname as indname'indlst.oid as indoid'indlst.indkey as indkey'tbllst.oid as tbloid'tbllst.relname as tblname from (select c.relname'c.oid'i.indkey from pg_index as i  " is 181.
Long Statement,FluentMigrator.T4,PostGreSqlSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\PostGreSqlSchemaReader.cs,LoadIndices,The length of the statement  "                        .Where(col => indcols.Any(indcolnum => col["attnum"].ToString() == indcolnum && indrow["tbloid"].ToString() == col["attrelid"].ToString())) " is 139.
Long Statement,FluentMigrator.T4,SqlServerSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\SqlServerSchemaReader.cs,LoadIndices,The length of the statement  "                                index.IndexColumns.Add(new IndexColumn { Name = rdr["column_name"].ToString()' IsAsc = !rdr.GetBoolean(rdr.GetOrdinal("is_descending_key")) }); " is 143.
Long Statement,FluentMigrator.T4,SqlServerSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\SqlServerSchemaReader.cs,LoadIndices,The length of the statement  "                                result.Single(i => i.Name == indexName).IndexColumns.Add(new IndexColumn { Name = rdr["column_name"].ToString()' IsAsc = !rdr.GetBoolean(rdr.GetOrdinal("is_descending_key")) }); " is 177.
Long Statement,FluentMigrator.T4,CodeGenerator,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\CodeGenerator.cs,LoadTables,The length of the statement  "                    var rxClean = new Regex("^(Equals|GetHashCode|GetType|ToString|repo|Save|IsNew|Insert|Update|Delete|Exists|SingleOrDefault|Single|First|FirstOrDefault|Fetch|Page|Query)$"); " is 172.
Magic Number,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if (IsStringNumeric(number)) {                  int n = Int32.Parse(number);                  int nMod100 = n % 100;                    if (nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch (n % 10) {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if (IsStringNumeric(number)) {                  int n = Int32.Parse(number);                  int nMod100 = n % 100;                    if (nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch (n % 10) {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if (IsStringNumeric(number)) {                  int n = Int32.Parse(number);                  int nMod100 = n % 100;                    if (nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch (n % 10) {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if (IsStringNumeric(number)) {                  int n = Int32.Parse(number);                  int nMod100 = n % 100;                    if (nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch (n % 10) {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if (IsStringNumeric(number)) {                  int n = Int32.Parse(number);                  int nMod100 = n % 100;                    if (nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch (n % 10) {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,FluentMigrator.T4,Inflector,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\Inflector.cs,AddOrdinalSuffix,The following statement contains a magic number: if (IsStringNumeric(number)) {                  int n = Int32.Parse(number);                  int nMod100 = n % 100;                    if (nMod100 >= 11 && nMod100 <= 13)                      return String.Concat(number' "th");                    switch (n % 10) {                      case 1:                          return String.Concat(number' "st");                      case 2:                          return String.Concat(number' "nd");                      case 3:                          return String.Concat(number' "rd");                      default:                          return String.Concat(number' "th");                  }              }
Magic Number,FluentMigrator.T4,SqlServerSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\SqlServerSchemaReader.cs,LoadColumns,The following statement contains a magic number: using (var cmd = this._factory.CreateCommand())              {                  cmd.Connection = this._connection;                  cmd.CommandText = ColumnSql;                    var p = cmd.CreateParameter();                  p.ParameterName = "@tableName";                  p.Value = tbl.Name;                  cmd.Parameters.Add(p);                    p = cmd.CreateParameter();                  p.ParameterName = "@schemaName";                  p.Value = tbl.Schema;                  cmd.Parameters.Add(p);                    var result = new List<Column>();                  using (IDataReader rdr = cmd.ExecuteReader())                  {                      while (rdr.Read())                      {                          var type = GetPropertyType(rdr["DataType"].ToString());                          Column col = new Column();                          col.Name = rdr["ColumnName"].ToString();                          col.PropertyName = CleanUp(col.Name);                          col.PropertyType = type;                          col.CustomType = type == null                              ? rdr["DataType"].ToString().ToLowerInvariant()                              : null;                          col.Size = rdr.Get("MaxLength"' -1);                          col.Precision = rdr.Get("Precision"' -1);                          col.IsNullable = rdr["IsNullable"].ToString() == "YES";                          col.IsAutoIncrement = ((int)rdr["IsIdentity"]) == 1;                          col.DefaultValue = rdr.IsDBNull(5) ? null : rdr["DefaultSetting"].ToString();                          result.Add(col);                      }                  }                    return result;              }
Missing Default,FluentMigrator.T4,OracleSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\OracleSchemaReader.cs,GetPropertyType,The following switch statement is missing a default case: switch (sqlType.ToLower())               {                  case "bigint":                      sysType = System.Data.DbType.Int64;                      break;                  case "smallint":                      sysType = System.Data.DbType.Int16;                      break;                  case "int":                      sysType = System.Data.DbType.Int32;                      break;                  case "uniqueidentifier":                      sysType =  System.Data.DbType.Guid;                      break;                  case "smalldatetime":                  case "datetime":                  case "date":                      sysType =  System.Data.DbType.DateTime;                      break;                  case "float":                      sysType = System.Data.DbType.Double;                      break;                  case "real":                  case "numeric":                  case "decimal":                  case "number":                      sysType=  System.Data.DbType.Decimal;                      break;                  case "money":                  case "smallmoney":                      sysType = System.Data.DbType.Currency;                      break;                  case "tinyint":                      sysType = System.Data.DbType.Byte;                      break;                  case "bit":                      sysType=  System.Data.DbType.Boolean;                      break;                  case "image":                  case "binary":                  case "varbinary":                  case "timestamp":                      sysType = System.Data.DbType.Binary;                      break;              }
Missing Default,FluentMigrator.T4,SqliteSchemaReader,C:\repos\schambers_fluentmigrator\src\FluentMigrator.T4\SchemaReaders\SqliteSchemaReader.cs,GetPropertyType,The following switch statement is missing a default case: switch (sqlType.ToLower())               {                  case "integer":                  case "int":                  case "tinyint":                  case "smallint":                  case "mediumint":                  case "int2":                  case "int8":                      sysType = DbType.Int64;                      break;				                  case "bigint":                  case "unsigned big int":                      sysType= DbType.UInt64;                      break;                  case "uniqueidentifier":                      sysType = DbType.Guid;                      break;                  case "smalldatetime":                  case "datetime":                  case "date":                      sysType=  DbType.DateTime;                      break;				                  case "float":                  case "double precision":                  case "double":                      sysType = DbType.Double;                      break;                  case "real":                  case "numeric":                  case "decimal":                  case "number":                      sysType = DbType.Single;                      break;                  case "smallmoney":                  case "money":                      sysType = DbType.Currency;                      break;                  case "bit":                      sysType = DbType.Boolean;                      break;                  case "image":                  case "binary":                  case "varbinary":                  case "timestamp":                      sysType=  DbType.Binary;                      break;              }
