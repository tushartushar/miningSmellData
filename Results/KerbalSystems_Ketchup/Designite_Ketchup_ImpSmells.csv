Implementation smell,Namespace,Class,File,Method,Description
Long Method,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The method has 271 lines of code.
Long Method,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,The method has 147 lines of code.
Complex Method,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,UpdateButtonState,Cyclomatic complexity of the method is 9
Complex Method,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,FormatClockSpeed,Cyclomatic complexity of the method is 9
Complex Method,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnFlyByWire,Cyclomatic complexity of the method is 12
Complex Method,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,Cyclomatic complexity of the method is 67
Complex Method,Ketchup.Modules,ModuleKetchupGenericKeyboard,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericKeyboard.cs,OnLoad,Cyclomatic complexity of the method is 11
Complex Method,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnLoad,Cyclomatic complexity of the method is 10
Complex Method,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,Refresh,Cyclomatic complexity of the method is 9
Complex Method,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnLoad,Cyclomatic complexity of the method is 11
Complex Method,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,Cyclomatic complexity of the method is 25
Long Identifier,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,,The length of the parameter _memAddressesWriteActionGroups is 30.
Long Identifier,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetHeading,The length of the parameter vesselForwardNorthEastProjection is 32.
Long Statement,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,OnWindow,The length of the statement  "            var pwrButtonPressed = GUILayout.Button("PWR"' _isPowerOn ? _styleButtonPressed : GUI.skin.button' GUILayout.ExpandWidth(false)); " is 129.
Long Statement,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,OnWindow,The length of the statement  "                    GUILayout.Label("Halted"' new GUIStyle(GUI.skin.label) { normal = { textColor = Color.yellow }' padding = new RectOffset(0' 0' 8' 0) }); " is 136.
Long Statement,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,OnWindow,The length of the statement  "                GUILayout.Label("Powered Off"' new GUIStyle(GUI.skin.label) { normal = { textColor = Color.red }' padding = new RectOffset(0' 0' 8' 0) }); " is 138.
Long Statement,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnWindow,The length of the statement  "            GUILayout.Box(String.Empty' GUILayout.Width((int)(_screenTexture.width * _imageScale))' GUILayout.Height((int)(_screenTexture.height * _imageScale))); " is 150.
Long Statement,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,Refresh,The length of the statement  "                            fontValue = (uint)((_dcpu16.Memory[_fontMap + ((value & 0x7F) * 2)] << 16) | _dcpu16.Memory[_fontMap + ((value & 0x7F) * 2) + 1]); " is 130.
Long Statement,Ketchup.IO,Dcpu16StateManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\IO\Dcpu16StateManager.cs,Load,The length of the statement  "                        throw new LoadStateException("DCPU-16"' String.Format("Magic number is incorrect. Expected: {0:X}. Found: {1:X}."' MagicNumber' magicNumber)); " is 142.
Complex Conditional,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,TimeWarpThrottleIfNecessary,The conditional expression  "(_dcpu16.IsPendingWakeUp() || !_dcpu16.IsHalted())                  && TimeWarp.WarpMode == TimeWarp.Modes.HIGH                  && TimeWarp.CurrentRate > 1"  is complex.
Magic Number,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,Awake,The following statement contains a magic number: var texture = new Texture2D(38' 38' TextureFormat.RGBA32' false);
Magic Number,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,Awake,The following statement contains a magic number: var texture = new Texture2D(38' 38' TextureFormat.RGBA32' false);
Magic Number,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,OnGUI,The following statement contains a magic number: var windowWidth = Screen.width / 2;
Magic Number,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,OnGUI,The following statement contains a magic number: var windowHeight = Screen.height / 2;
Magic Number,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,OnGUI,The following statement contains a magic number: var windowLeft = (Screen.width - windowWidth) / 2;
Magic Number,Ketchup.Behaviors,GuiManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\GuiManager.cs,OnGUI,The following statement contains a magic number: var windowTop = (Screen.height - windowHeight) / 2;
Magic Number,Ketchup.Extensions,DoubleExtensions,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Extensions\DoubleExtensions.cs,DegreesToRadians,The following statement contains a magic number: return value * (Math.PI / 180);
Magic Number,Ketchup.Extensions,DoubleExtensions,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Extensions\DoubleExtensions.cs,RadiansToDegrees,The following statement contains a magic number: return value * (180 / Math.PI);
Magic Number,Ketchup.Extensions,MiscExtensions,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Extensions\MiscExtensions.cs,CenteredOnScreen,The following statement contains a magic number: return new Rect(rect)              {                  x = (Screen.width / 2f) - (rect.width / 2)'                  y = (Screen.height / 2f) - (rect.height / 2)              };
Magic Number,Ketchup.Extensions,MiscExtensions,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Extensions\MiscExtensions.cs,CenteredOnScreen,The following statement contains a magic number: return new Rect(rect)              {                  x = (Screen.width / 2f) - (rect.width / 2)'                  y = (Screen.height / 2f) - (rect.height / 2)              };
Magic Number,Ketchup.Extensions,MiscExtensions,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Extensions\MiscExtensions.cs,CenteredOnScreen,The following statement contains a magic number: return new Rect(rect)              {                  x = (Screen.width / 2f) - (rect.width / 2)'                  y = (Screen.height / 2f) - (rect.height / 2)              };
Magic Number,Ketchup.Extensions,MiscExtensions,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Extensions\MiscExtensions.cs,CenteredOnScreen,The following statement contains a magic number: return new Rect(rect)              {                  x = (Screen.width / 2f) - (rect.width / 2)'                  y = (Screen.height / 2f) - (rect.height / 2)              };
Magic Number,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,OnUpdate,The following statement contains a magic number: cyclesToExecute = (int)Math.Round((TimeWarp.deltaTime / 2.0) * ClockFrequency);
Magic Number,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,OnUpdate,The following statement contains a magic number: _clockRates.Count < 60
Magic Number,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,OnWindow,The following statement contains a magic number: GUILayout.Label("Halted"' new GUIStyle(GUI.skin.label) { normal = { textColor = Color.yellow }' padding = new RectOffset(0' 0' 8' 0) });
Magic Number,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,InitWindowSizeIfNecessary,The following statement contains a magic number: const float defaultWidth = 250f;
Magic Number,Ketchup.Modules,ModuleKetchupComputer,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupComputer.cs,FormatClockSpeed,The following statement contains a magic number: hertz < 1e3
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following statement contains a magic number: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following statement contains a magic number: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following statement contains a magic number: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following statement contains a magic number: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following statement contains a magic number: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following statement contains a magic number: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,WriteRotationToMemory,The following statement contains a magic number: _dcpu16.Memory[_memAddressWriteRotation + 2] =                      MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,WriteTranslationToMemory,The following statement contains a magic number: _dcpu16.Memory[_memAddressWriteTranslation + 2] =                      MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,WriteTrimToMemory,The following statement contains a magic number: _dcpu16.Memory[_memAddressWriteTrim + 2] =                      MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yawTrim));
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,ReadRotationFromMemory,The following statement contains a magic number: _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(                      _dcpu16.Memory[_memAddressReadRotation + 2]                  ));
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,ReadTranslationFromMemory,The following statement contains a magic number: _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(                      _dcpu16.Memory[_memAddressReadRotation + 2]                  ));
Magic Number,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,ReadTrimFromMemory,The following statement contains a magic number: _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(                      _dcpu16.Memory[_memAddressReadTrim + 2]                  ));
Magic Number,Ketchup.Modules,ModuleKetchupFirmware,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupFirmware.cs,OnWindow,The following statement contains a magic number: GUILayout.Label(_firmware.Name' GUILayout.Width(125));
Magic Number,Ketchup.Modules,ModuleKetchupFirmware,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupFirmware.cs,GetFirmwareRoms,The following statement contains a magic number: var firmwareUShorts = new ushort[firmwareBytes.Length / 2];
Magic Number,Ketchup.Modules,ModuleKetchupFirmware,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupFirmware.cs,GetFirmwareRoms,The following statement contains a magic number: firmwareUShorts[i / 2] = (ushort)((a << 8) | b);
Magic Number,Ketchup.Modules,ModuleKetchupFirmware,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupFirmware.cs,GetFirmwareRoms,The following statement contains a magic number: firmwareUShorts[i / 2] = (ushort)((a << 8) | b);
Magic Number,Ketchup.Modules,ModuleKetchupFirmware,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupFirmware.cs,GetFirmwareRoms,The following statement contains a magic number: yield return new FirmwareRom(file.Name.Substring(0' file.Name.Length - 4)' firmwareUShorts);
Magic Number,Ketchup.Modules,ModuleKetchupFirmware,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupFirmware.cs,GetFirmwareRoms,The following statement contains a magic number: file.Length / 2 <= MaxFirmwareWords
Magic Number,Ketchup.Modules,ModuleKetchupGenericClock,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericClock.cs,OnInterrupt,The following statement contains a magic number: switch (_dcpu16.A)                  {                      case 0:                          _isClockEnabled = _dcpu16.B != 0;                          _period = _dcpu16.B / 60f;                          _elapsedTicks = 0;                          break;                      case 1:                          _dcpu16.C = _elapsedTicks;                          break;                      case 2:                          _interruptMessage = _dcpu16.B;                          break;                  }
Magic Number,Ketchup.Modules,ModuleKetchupGenericClock,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericClock.cs,OnInterrupt,The following statement contains a magic number: switch (_dcpu16.A)                  {                      case 0:                          _isClockEnabled = _dcpu16.B != 0;                          _period = _dcpu16.B / 60f;                          _elapsedTicks = 0;                          break;                      case 1:                          _dcpu16.C = _elapsedTicks;                          break;                      case 2:                          _interruptMessage = _dcpu16.B;                          break;                  }
Magic Number,Ketchup.Modules,ModuleKetchupGenericKeyboard,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericKeyboard.cs,InitWindowSizeIfNecessary,The following statement contains a magic number: const float defaultWidth = 100f;
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnInterrupt,The following statement contains a magic number: switch (action)                  {                      case ActionId.MemMapScreen:                          _screenMap = _dcpu16.B;                          break;                      case ActionId.MemMapFont:                          _fontMap = _dcpu16.B;                          break;                      case ActionId.MemMapPalette:                          _paletteMap = _dcpu16.B;                          break;                      case ActionId.SetBorderColor:                          _borderColorValue = (ushort)(_dcpu16.B & 0xF);                          break;                      case ActionId.MemDumpFont:                          Array.Copy(DefaultFont' 0' _dcpu16.Memory' _dcpu16.B' DefaultFont.Length);                          return 256;                      case ActionId.MemDumpPalette:                          Array.Copy(DefaultPalette' 0' _dcpu16.Memory' _dcpu16.B' DefaultPalette.Length);                          return 16;                  }
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnInterrupt,The following statement contains a magic number: switch (action)                  {                      case ActionId.MemMapScreen:                          _screenMap = _dcpu16.B;                          break;                      case ActionId.MemMapFont:                          _fontMap = _dcpu16.B;                          break;                      case ActionId.MemMapPalette:                          _paletteMap = _dcpu16.B;                          break;                      case ActionId.SetBorderColor:                          _borderColorValue = (ushort)(_dcpu16.B & 0xF);                          break;                      case ActionId.MemDumpFont:                          Array.Copy(DefaultFont' 0' _dcpu16.Memory' _dcpu16.B' DefaultFont.Length);                          return 256;                      case ActionId.MemDumpPalette:                          Array.Copy(DefaultPalette' 0' _dcpu16.Memory' _dcpu16.B' DefaultPalette.Length);                          return 16;                  }
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnWindow,The following statement contains a magic number: SetMonitorScale(2);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnWindow,The following statement contains a magic number: SetMonitorScale(3);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnWindow,The following statement contains a magic number: SetMonitorScale(4);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,GetPaletteColor,The following statement contains a magic number: b |= (byte)(b << 4);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,GetPaletteColor,The following statement contains a magic number: var g = (byte)((color & 0xF0) >> 4);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,GetPaletteColor,The following statement contains a magic number: g |= (byte)(g << 4);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,GetPaletteColor,The following statement contains a magic number: var r = (byte)((color & 0xF00) >> 8);
Magic Number,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,GetPaletteColor,The following statement contains a magic number: r |= (byte)(r << 4);
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnDraw,The following statement contains a magic number: _windowPosition = new Rect(_windowPosition) { width = 300 };
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,The following statement contains a magic number: switch (_guiMode)                      {                          case GuiMode.Normal:                          case GuiMode.Get:                              if (_disksBeingLabeled.ContainsKey(disk))                              {                                  _disksBeingLabeled[disk] = GUILayout.TextField(_disksBeingLabeled[disk]' GUILayout.Width(125));                              }                              else                              {                                  GUILayout.Label(disk.Label' GUILayout.Width(125));                              }                                if (GUILayout.Button("Label"))                              {                                  if (_disksBeingLabeled.ContainsKey(disk))                                  {                                      var label = _disksBeingLabeled[disk];                                        if (!String.IsNullOrEmpty(label) && !String.IsNullOrEmpty(label.Trim()))                                      {                                          disk.Label = label;                                      }                                        _disksBeingLabeled.Remove(disk);                                  }                                  else                                  {                                      _disksBeingLabeled.Add(disk' disk.Label);                                  }                              }                                if (disk.IsWriteProtected)                              {                                  if (GUILayout.Button("Protect"' _styleButtonPressed))                                  {                                      disk.IsWriteProtected = !disk.IsWriteProtected;                                  }                              }                              else                              {                                  if (GUILayout.Button("Protect"))                                  {                                      disk.IsWriteProtected = !disk.IsWriteProtected;                                  }                              }                                if (GUILayout.Button("Destroy"))                              {                                  disksToDestroy.Add(disk);                              }                                break;                            case GuiMode.Insert:                              if (GUILayout.Button(disk.Label))                              {                                  _guiMode = GuiMode.Normal;                                  InsertDisk(disk);                              }                                break;                      }
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,The following statement contains a magic number: switch (_guiMode)                      {                          case GuiMode.Normal:                          case GuiMode.Get:                              if (_disksBeingLabeled.ContainsKey(disk))                              {                                  _disksBeingLabeled[disk] = GUILayout.TextField(_disksBeingLabeled[disk]' GUILayout.Width(125));                              }                              else                              {                                  GUILayout.Label(disk.Label' GUILayout.Width(125));                              }                                if (GUILayout.Button("Label"))                              {                                  if (_disksBeingLabeled.ContainsKey(disk))                                  {                                      var label = _disksBeingLabeled[disk];                                        if (!String.IsNullOrEmpty(label) && !String.IsNullOrEmpty(label.Trim()))                                      {                                          disk.Label = label;                                      }                                        _disksBeingLabeled.Remove(disk);                                  }                                  else                                  {                                      _disksBeingLabeled.Add(disk' disk.Label);                                  }                              }                                if (disk.IsWriteProtected)                              {                                  if (GUILayout.Button("Protect"' _styleButtonPressed))                                  {                                      disk.IsWriteProtected = !disk.IsWriteProtected;                                  }                              }                              else                              {                                  if (GUILayout.Button("Protect"))                                  {                                      disk.IsWriteProtected = !disk.IsWriteProtected;                                  }                              }                                if (GUILayout.Button("Destroy"))                              {                                  disksToDestroy.Add(disk);                              }                                break;                            case GuiMode.Insert:                              if (GUILayout.Button(disk.Label))                              {                                  _guiMode = GuiMode.Normal;                                  InsertDisk(disk);                              }                                break;                      }
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,The following statement contains a magic number: _windowPosition = new Rect(_windowPosition) { width = 300' height = 0 };
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,GetDiskImages,The following statement contains a magic number: var diskImageUShorts = new ushort[diksImageBytes.Length / 2];
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,GetDiskImages,The following statement contains a magic number: diskImageUShorts[i / 2] = (ushort)((a << 8) | b);
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,GetDiskImages,The following statement contains a magic number: diskImageUShorts[i / 2] = (ushort)((a << 8) | b);
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,GetDiskImages,The following statement contains a magic number: yield return new FloppyDisk(file.Name.Substring(0' file.Name.Length - 4)' diskImageUShorts);
Magic Number,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,GetDiskImages,The following statement contains a magic number: file.Length / 2 <= WordsPerDisk
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,SetupAxisLineRender,The following statement contains a magic number: lineRenderer.SetVertexCount(2);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _northAxisLine = SetupAxisLineRender(Color.red' 100' 0.5f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _northAxisLine = SetupAxisLineRender(Color.red' 100' 0.5f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _eastAxisLine = SetupAxisLineRender(Color.green' 100' 0.5f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _eastAxisLine = SetupAxisLineRender(Color.green' 100' 0.5f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _downAxisLine = SetupAxisLineRender(Color.blue' 100' 0.5f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _downAxisLine = SetupAxisLineRender(Color.blue' 100' 0.5f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _vesselFrontLine = SetupAxisLineRender(Color.magenta' 25' 0.25f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _vesselFrontLine = SetupAxisLineRender(Color.magenta' 25' 0.25f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _vesselRightLine = SetupAxisLineRender(Color.yellow' 25' 0.25f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _vesselRightLine = SetupAxisLineRender(Color.yellow' 25' 0.25f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _vesselBottomLine = SetupAxisLineRender(Color.cyan' 25' 0.25f);
Magic Number,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,DebugSetupAxes,The following statement contains a magic number: _vesselBottomLine = SetupAxisLineRender(Color.cyan' 25' 0.25f);
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,OnInterrupt,The following statement contains a magic number: switch ((InterruptOperation)_dcpu16.A)                  {                      case InterruptOperation.PollDevice:                          _dcpu16.B = (ushort)_state;                          _dcpu16.C = (ushort)ErrorCode.None;                          break;                        case InterruptOperation.MapRegion:                          _memoryMap = _dcpu16.X;                          _vertexCount = (ushort)(_dcpu16.Y % 128);                            _state = _vertexCount == 0 ? StateCode.NoData : StateCode.Running;                            break;                        case InterruptOperation.RotateDevice:                          _targetRotation = (ushort)(_dcpu16.X % 360);                            if (Math.Abs(_targetRotation - _currentRotation) > 1f)                          {                              _state = StateCode.Turning;                          }                          break;                  }
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,OnInterrupt,The following statement contains a magic number: switch ((InterruptOperation)_dcpu16.A)                  {                      case InterruptOperation.PollDevice:                          _dcpu16.B = (ushort)_state;                          _dcpu16.C = (ushort)ErrorCode.None;                          break;                        case InterruptOperation.MapRegion:                          _memoryMap = _dcpu16.X;                          _vertexCount = (ushort)(_dcpu16.Y % 128);                            _state = _vertexCount == 0 ? StateCode.NoData : StateCode.Running;                            break;                        case InterruptOperation.RotateDevice:                          _targetRotation = (ushort)(_dcpu16.X % 360);                            if (Math.Abs(_targetRotation - _currentRotation) > 1f)                          {                              _state = StateCode.Turning;                          }                          break;                  }
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,GetVertices,The following statement contains a magic number: var vertices = new Vertex[vertexData.Count / 2];
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,GetVertices,The following statement contains a magic number: var offset = i * 2;
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawVertices,The following statement contains a magic number: vertices.Count >= 2
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawLine,The following statement contains a magic number: lineRenderer.transform.localEulerAngles = new Vector3(-90f' 0f' 0f);
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawLine,The following statement contains a magic number: lineRenderer.transform.Translate(new Vector3(0.5f' 0.5f' 0f));
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawLine,The following statement contains a magic number: lineRenderer.transform.Translate(new Vector3(0.5f' 0.5f' 0f));
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawLine,The following statement contains a magic number: lineRenderer.transform.Translate(new Vector3(-0.5f' -0.5f' 0f));
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawLine,The following statement contains a magic number: lineRenderer.transform.Translate(new Vector3(-0.5f' -0.5f' 0f));
Magic Number,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,DrawLine,The following statement contains a magic number: lineRenderer.SetVertexCount(2);
Magic Number,Ketchup.Modules,Vertex,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,Vertex,The following statement contains a magic number: _y = (byte)((word1 >> 8) & 0xFF);
Magic Number,Ketchup.Modules,Vertex,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,Vertex,The following statement contains a magic number: _color = (VertexColor)((word2 >> 8) & 3);
Magic Number,Ketchup.Modules,Vertex,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,Vertex,The following statement contains a magic number: _color = (VertexColor)((word2 >> 8) & 3);
Magic Number,Ketchup.Modules,Vertex,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,Vertex,The following statement contains a magic number: _intense = ((word2 >> 10) & 1) == 1;
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetHeading,The following statement contains a magic number: headingRelNorth <= 90 && headingRelEast <= 90
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetHeading,The following statement contains a magic number: headingRelNorth <= 90 && headingRelEast <= 90
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetHeading,The following statement contains a magic number: return heading == 360 ? 0 : heading;
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetPitch,The following statement contains a magic number: return nedReferenceFrame.Down.PreciseAngle(Front) - 90;
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetRoll,The following statement contains a magic number: roll = 90 - rightDownAngle;
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetRoll,The following statement contains a magic number: bottomDownAngle <= 90
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetRoll,The following statement contains a magic number: return roll == -180 ? 180 : roll;
Magic Number,Ketchup.Utility,VesselReferenceFrame,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Utility\VesselReferenceFrame.cs,GetRoll,The following statement contains a magic number: return roll == -180 ? 180 : roll;
Missing Default,Ketchup.Behaviors,ConnectionManager,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Behaviors\ConnectionManager.cs,RecalculateConnections,The following switch statement is missing a default case: switch (_mode)              {                  case Mode.Editor:                      Log(LogLevel.Debug' "RecalculateConnections(): In Editor' proceeding");                        // Reset the connections of all computers in the vessel                      foreach (var computer in GetComputers(parts))                      {                          computer.ResetDeviceConnections();                      }                        foreach (var part in parts)                      {                          var devices = part.FindModulesImplementing<IDevice>();                            foreach (var device in devices)                          {                              var closetComputers = FindClosestComputers(part).ToList();                                if (closetComputers.Count == 1)                              {                                  if (device.Port == null)                                  {   // TODO: When there is a common DeviceModule base class' this should be moved                                      device.Port = new Port(PortScope.Craft' Guid.NewGuid());                                  }                                    closetComputers[0].AddDeviceConnection(                                      new DeviceConnection(DeviceConnectionType.Automatic' device.Port' null)                                  );                              }                          }                      }                      break;                  case Mode.Flight:                      Log(LogLevel.Debug' "RecalculateConnections(): In Flight' doing nothing");                      break;              }
Missing Default,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,OnInterrupt,The following switch statement is missing a default case: switch((InterruptOperation)_dcpu16.A)              {                  case InterruptOperation.ControlGetRegRotation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.roll));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.pitch));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.yaw));                      break;                  case InterruptOperation.ControlGetRegTranslation:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.X));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Y));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(_lastFlightCtrlState.Z));                      break;                  case InterruptOperation.ControlGetRegThrottle:                      _dcpu16.X = MachineWord.FromUInt16(Range.ScaleUnsignedUnaryToUnsignedInt16(                          _lastFlightCtrlState.mainThrottle                      ));                      break;                  case InterruptOperation.ControlGetRegTrim:                      _dcpu16.X = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.rollTrim                      ));                      _dcpu16.Y = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.pitchTrim                      ));                      _dcpu16.Z = MachineWord.FromInt16(Range.ScaleSignedUnaryToSignedInt16(                          _lastFlightCtrlState.yawTrim                      ));                      break;                  case InterruptOperation.ControlGetRegStage:                      if (vessel.currentStage >= UInt16.MinValue && vessel.currentStage <= UInt16.MaxValue)                      {                          _dcpu16.X = MachineWord.FromUInt16((ushort)vessel.currentStage);                      }                      break;                  case InterruptOperation.ControlGetRegGear:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Gear]);                      break;                  case InterruptOperation.ControlGetRegLight:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Light]);                      break;                  case InterruptOperation.ControlGetRegRcs:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.RCS]);                      break;                  case InterruptOperation.ControlGetRegSas:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.SAS]);                      break;                  case InterruptOperation.ControlGetRegBrakes:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Brakes]);                      break;                  case InterruptOperation.ControlGetRegAbort:                      _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[KSPActionGroup.Abort]);                      break;                  case InterruptOperation.ControlGetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.B' out actionGroup))                          {                              _dcpu16.X = MachineWord.FromBoolean(vessel.ActionGroups[actionGroup]);                          }                      }                      break;                  case InterruptOperation.ControlGetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteRotation = _dcpu16.B;                          WriteRotationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTranslation = _dcpu16.B;                          WriteTranslationToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemThrottle:                      _memAddressWriteThrottle = _dcpu16.B;                      WriteThrottleToMemory();                      break;                  case InterruptOperation.ControlGetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressWriteTrim = _dcpu16.B;                          WriteTrimToMemory();                      }                      break;                  case InterruptOperation.ControlGetMemStage:                      _memAddressWriteStage = _dcpu16.B;                      WriteStageToMemory();                      break;                  case InterruptOperation.ControlGetMemGear:                      _memAddressWriteGear = _dcpu16.B;                      WriteGearToMemory();                      break;                  case InterruptOperation.ControlGetMemLight:                      _memAddressWriteLight = _dcpu16.B;                      WriteLightToMemory();                      break;                  case InterruptOperation.ControlGetMemRcs:                      _memAddressWriteRcs = _dcpu16.B;                      WriteRcsToMemory();                      break;                  case InterruptOperation.ControlGetMemSas:                      _memAddressWriteSas = _dcpu16.B;                      WriteSasToMemory();                      break;                  case InterruptOperation.ControlGetMemBrakes:                      _memAddressWriteBrakes = _dcpu16.B;                      WriteBrakesToMemory();                      break;                  case InterruptOperation.ControlGetMemAbort:                      _memAddressWriteAbort = _dcpu16.B;                      WriteAbortToMemory();                      break;                  case InterruptOperation.ControlGetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressesWriteActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressesWriteActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressesWriteActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          WriteActionGroupsToMemory();                      }                      break;                  case InterruptOperation.ControlSetRegRotation:                      _roll = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitch = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yaw = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegTranslation:                      _translationX = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _translationY = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _translationZ = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegThrottle:                      _throttle = Range.ScaleUnsignedInt16ToUnsignedUnary(MachineWord.ToUInt16(_dcpu16.B));                      break;                  case InterruptOperation.ControlSetRegTrim:                      _rollTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.X));                      _pitchTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Y));                      _yawTrim = Range.ScaleSignedInt16ToSignedUnary(MachineWord.ToInt16(_dcpu16.Z));                      break;                  case InterruptOperation.ControlSetRegStage:                      _stagesPendingActivation++;                      break;                  case InterruptOperation.ControlSetRegGear:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Gear);                      break;                  case InterruptOperation.ControlSetRegLight:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Light);                      break;                  case InterruptOperation.ControlSetRegRcs:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.RCS);                      break;                  case InterruptOperation.ControlSetRegSas:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.SAS);                      break;                  case InterruptOperation.ControlSetRegBrake:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Brakes);                      break;                  case InterruptOperation.ControlSetRegAbort:                      HandleSetActionGroup(_dcpu16.B' KSPActionGroup.Abort);                      break;                  case InterruptOperation.ControlSetRegActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              HandleSetActionGroup(_dcpu16.B' actionGroup);                            }                      }                      break;                  case InterruptOperation.ControlSetMemRotation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadRotation = _dcpu16.B;                          ReadRotationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemTranslation:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTranslation = _dcpu16.B;                          ReadTranslationFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemThrottle:                      _memAddressReadThrottle = _dcpu16.B;                      ReadThrottleFromMemory();                      break;                  case InterruptOperation.ControlSetMemTrim:                      if (IsMemoryRangeValid(_dcpu16.B' 3))                      {                          _memAddressReadTrim = _dcpu16.B;                          ReadTrimFromMemory();                      }                      break;                  case InterruptOperation.ControlSetMemStage:                      _memAddressReadStage = _dcpu16.B;                      ReadStageFromMemory();                      break;                  case InterruptOperation.ControlSetMemGear:                      _memAddressReadGear = _dcpu16.B;                      ReadGearFromMemory();                      break;                  case InterruptOperation.ControlSetMemLight:                      _memAddressReadLight = _dcpu16.B;                      ReadLightFromMemory();                      break;                  case InterruptOperation.ControlSetMemRcs:                      _memAddressReadRcs = _dcpu16.B;                      ReadRcsFromMemory();                      break;                  case InterruptOperation.ControlSetMemSas:                      _memAddressReadSas = _dcpu16.B;                      ReadSasFromMemory();                      break;                  case InterruptOperation.ControlSetMemBrakes:                      _memAddressReadBrakes = _dcpu16.B;                      ReadBrakesFromMemory();                      break;                  case InterruptOperation.ControlSetMemAbort:                      _memAddressReadAbort = _dcpu16.B;                      ReadAbortFromMemory();                      break;                  case InterruptOperation.ControlSetMemActionGroup:                      {                          KSPActionGroup actionGroup;                          if (ActionGroupMapping.TryGetValue(_dcpu16.C' out actionGroup))                          {                              if (_dcpu16.B == 0x0000)                              {                                  if (_memAddressReadActionGroups.ContainsKey(actionGroup.ToString()))                                  {                                      _memAddressReadActionGroups.Remove(actionGroup.ToString());                                  }                              }                              else                              {                                  _memAddressReadActionGroups[actionGroup.ToString()] =                                      _dcpu16.B.ToString(CultureInfo.InvariantCulture);                              }                          }                          ReadActionGroupsFromMemory();                      }                      break;                  case InterruptOperation.EventStageSpent:                      _stageSpentInterruptMessage = _dcpu16.B;                      break;                  case InterruptOperation.ConfGetControlMask:                      _dcpu16.B = _controlMask;                      break;                  case InterruptOperation.ConfSetControlMask:                      _controlMask = _dcpu16.B;                      break;              }
Missing Default,Ketchup.Modules,ModuleKetchupCrash,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupCrash.cs,HandleSetActionGroup,The following switch statement is missing a default case: switch ((ActionGroupState)state)              {                  case ActionGroupState.Inactive:                      vessel.ActionGroups.SetGroup(actionGroup' false);                      break;                  case ActionGroupState.Active:                      vessel.ActionGroups.SetGroup(actionGroup' true);                      break;                  case ActionGroupState.Toggle:                      vessel.ActionGroups.ToggleGroup(actionGroup);                      break;              }
Missing Default,Ketchup.Modules,ModuleKetchupGenericClock,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericClock.cs,OnInterrupt,The following switch statement is missing a default case: switch (_dcpu16.A)                  {                      case 0:                          _isClockEnabled = _dcpu16.B != 0;                          _period = _dcpu16.B / 60f;                          _elapsedTicks = 0;                          break;                      case 1:                          _dcpu16.C = _elapsedTicks;                          break;                      case 2:                          _interruptMessage = _dcpu16.B;                          break;                  }
Missing Default,Ketchup.Modules,ModuleKetchupGenericKeyboard,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericKeyboard.cs,OnInterrupt,The following switch statement is missing a default case: switch (action)                  {                      case ActionId.ClearBuffer:                          _buffer.Clear();                          break;                      case ActionId.StoreNextKey:                          _dcpu16.C = _buffer.Count == 0 ? (ushort)0 : _buffer.Dequeue();                          break;                      case ActionId.CheckNextKey:                          _dcpu16.C = _pressedKeys.Contains(_dcpu16.B) ? (ushort)1 : (ushort)0;                          break;                      case ActionId.SetInterruptBehavior:                          _interruptMessage = _dcpu16.B;                          break;                  }
Missing Default,Ketchup.Modules,ModuleKetchupGenericKeyboard,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupGenericKeyboard.cs,HandleKeyEvents,The following switch statement is missing a default case: switch (eventType)                  {                      case EventType.KeyDown:                          OnKeyDown(currentEvent.keyCode);                          currentEvent.Use();                          break;                      case EventType.KeyUp:                          OnKeyUp(currentEvent.keyCode);                          currentEvent.Use();                          break;                  }
Missing Default,Ketchup.Modules,ModuleKetchupLem1802,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupLem1802.cs,OnInterrupt,The following switch statement is missing a default case: switch (action)                  {                      case ActionId.MemMapScreen:                          _screenMap = _dcpu16.B;                          break;                      case ActionId.MemMapFont:                          _fontMap = _dcpu16.B;                          break;                      case ActionId.MemMapPalette:                          _paletteMap = _dcpu16.B;                          break;                      case ActionId.SetBorderColor:                          _borderColorValue = (ushort)(_dcpu16.B & 0xF);                          break;                      case ActionId.MemDumpFont:                          Array.Copy(DefaultFont' 0' _dcpu16.Memory' _dcpu16.B' DefaultFont.Length);                          return 256;                      case ActionId.MemDumpPalette:                          Array.Copy(DefaultPalette' 0' _dcpu16.Memory' _dcpu16.B' DefaultPalette.Length);                          return 16;                  }
Missing Default,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnInterrupt,The following switch statement is missing a default case: switch ((InterruptOperation)_dcpu16.A)                  {                      case InterruptOperation.PollDevice:                          HandlePollDevice();                          break;                        case InterruptOperation.SetInterrupt:                          HandleSetInterrupt(_dcpu16.X);                          break;                        case InterruptOperation.ReadSector:                          HandleReadSector(_dcpu16.X' _dcpu16.Y);                          break;                        case InterruptOperation.WriteSector:                          HandleWriteSector(_dcpu16.X' _dcpu16.Y);                          break;                  }
Missing Default,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,HandleReadSector,The following switch statement is missing a default case: switch (_currentStateCode)              {                  case StateCode.Ready:                  case StateCode.ReadyWp:                      _dcpu16.B = 1;                        StartCoroutine(TransferCoroutine(sector' address' TransferOpreration.Read));                        break;                    case StateCode.NoMedia:                      _dcpu16.B = 0;                      SetErrorOrState(error: ErrorCode.NoMedia);                      break;                    case StateCode.Busy:                      _dcpu16.B = 0;                      SetErrorOrState(error: ErrorCode.Busy);                      break;              }
Missing Default,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,HandleWriteSector,The following switch statement is missing a default case: switch (_currentStateCode)              {                  case StateCode.Ready:                      _dcpu16.B = 1;                      StartCoroutine(TransferCoroutine(sector' address' TransferOpreration.Write));                      break;                    case StateCode.ReadyWp:                      _lastErrorCode = ErrorCode.Protected;                      _dcpu16.B = 0;                      break;                    case StateCode.NoMedia:                      _lastErrorCode = ErrorCode.NoMedia;                      _dcpu16.B = 0;                      break;                    case StateCode.Busy:                      _lastErrorCode = ErrorCode.Busy;                      _dcpu16.B = 0;                      break;              }
Missing Default,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,The following switch statement is missing a default case: switch(_guiMode)              {                  case GuiMode.Normal:                      if (_allLoadedDisks.Any())                      {                          insertEjectButtonPressed = GUILayout.Button(_currentStateCode == StateCode.NoMedia ? "Insert" : "Eject");                      }                      break;                    case GuiMode.Insert:                      cancelInsertButtonPressed = GUILayout.Button("Insert"' _styleButtonPressed);                      break;              }
Missing Default,Ketchup.Modules,ModuleKetchupM35Fd,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupM35fd.cs,OnM35FdWindow,The following switch statement is missing a default case: switch (_guiMode)                      {                          case GuiMode.Normal:                          case GuiMode.Get:                              if (_disksBeingLabeled.ContainsKey(disk))                              {                                  _disksBeingLabeled[disk] = GUILayout.TextField(_disksBeingLabeled[disk]' GUILayout.Width(125));                              }                              else                              {                                  GUILayout.Label(disk.Label' GUILayout.Width(125));                              }                                if (GUILayout.Button("Label"))                              {                                  if (_disksBeingLabeled.ContainsKey(disk))                                  {                                      var label = _disksBeingLabeled[disk];                                        if (!String.IsNullOrEmpty(label) && !String.IsNullOrEmpty(label.Trim()))                                      {                                          disk.Label = label;                                      }                                        _disksBeingLabeled.Remove(disk);                                  }                                  else                                  {                                      _disksBeingLabeled.Add(disk' disk.Label);                                  }                              }                                if (disk.IsWriteProtected)                              {                                  if (GUILayout.Button("Protect"' _styleButtonPressed))                                  {                                      disk.IsWriteProtected = !disk.IsWriteProtected;                                  }                              }                              else                              {                                  if (GUILayout.Button("Protect"))                                  {                                      disk.IsWriteProtected = !disk.IsWriteProtected;                                  }                              }                                if (GUILayout.Button("Destroy"))                              {                                  disksToDestroy.Add(disk);                              }                                break;                            case GuiMode.Insert:                              if (GUILayout.Button(disk.Label))                              {                                  _guiMode = GuiMode.Normal;                                  InsertDisk(disk);                              }                                break;                      }
Missing Default,Ketchup.Modules,ModuleKetchupStop,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupStop.cs,OnInterrupt,The following switch statement is missing a default case: switch (operation)                  {                      case InterruptOperation.ActionGetRegisterTaitBryanOrientation:                          var orientation = GetOrientation();                            _dcpu16.X = MachineWord.FromUInt16((ushort)                              Range.UnsignedDegreesCircle.ScaleTo(Range.UnsignedInt16' orientation.x)                          );                          _dcpu16.Y = MachineWord.FromInt16((short)                              Range.SignedDegreesHalfCircle.ScaleTo(Range.SignedInt16' orientation.y)                          );                          _dcpu16.Z = MachineWord.FromInt16((short)                              Range.SignedDegreesCircle.ScaleTo(Range.SignedInt16' orientation.z)                          );                            break;                  }
Missing Default,Ketchup.Modules,ModuleKetchupSped3,D:\research\architectureSmells\repos\KerbalSystems_Ketchup\Source\Ketchup\Modules\ModuleKetchupSped3.cs,OnInterrupt,The following switch statement is missing a default case: switch ((InterruptOperation)_dcpu16.A)                  {                      case InterruptOperation.PollDevice:                          _dcpu16.B = (ushort)_state;                          _dcpu16.C = (ushort)ErrorCode.None;                          break;                        case InterruptOperation.MapRegion:                          _memoryMap = _dcpu16.X;                          _vertexCount = (ushort)(_dcpu16.Y % 128);                            _state = _vertexCount == 0 ? StateCode.NoData : StateCode.Running;                            break;                        case InterruptOperation.RotateDevice:                          _targetRotation = (ushort)(_dcpu16.X % 360);                            if (Math.Abs(_targetRotation - _currentRotation) > 1f)                          {                              _state = StateCode.Turning;                          }                          break;                  }
