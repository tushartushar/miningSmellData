Implementation smell,Namespace,Class,File,Method,Description
Long Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The method has 161 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The method has 107 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The method has 128 lines of code.
Long Method,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The method has 147 lines of code.
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeGroups,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildList,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InsertObjects,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,Cyclomatic complexity of the method is 14
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ProcessLButtonDown,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeColumnCommandMenu,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ResizeFreeSpaceFillingColumns,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DoSort,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,UpdateHotItem,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ApplyRowStyle,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DrawAllDecorations,Cyclomatic complexity of the method is 15
Complex Method,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CalculateDropTarget,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,FilterMenuBuilder,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\FilterMenuBuilder.cs,HandleSelectAllItem,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,OLVGroup,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Groups.cs,AsNativeGroup,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,SimpleMunger,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,ResolveName,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ToolTipControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,FastListGroupingStrategy,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,GetGroups,Cyclomatic complexity of the method is 10
Long Parameter List,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildGroups,The method has 6 parameters. Parameters: groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder
Long Parameter List,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CollectGroupingParameters,The method has 6 parameters. Parameters: groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder
Long Parameter List,BrightIdeasSoftware,GroupingParameters,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\GroupingParameters.cs,GroupingParameters,The method has 10 parameters. Parameters: olv' groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder' titleFormat' titleSingularFormat' sortItemsByPrimaryColumn
Long Parameter List,BrightIdeasSoftware,OLVColumn,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,MakeGroupies,The method has 5 parameters. Parameters: values' descriptions' images' subtitles' tasks
Long Parameter List,BrightIdeasSoftware,OLVColumn,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,MakeEqualGroupies,The method has 5 parameters. Parameters: values' descriptions' images' subtitles' tasks
Long Parameter List,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CreateAlignedRectangle,The method has 5 parameters. Parameters: r' sz' corner' referenceCorner' offset
Long Parameter List,BrightIdeasSoftware,ImageAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawImage,The method has 5 parameters. Parameters: g' r' image' sz' transparency
Long Parameter List,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The method has 5 parameters. Parameters: g' x1' y1' x2' y2
Long Parameter List,BrightIdeasSoftware,CellEditEventArgs,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,CellEditEventArgs,The method has 5 parameters. Parameters: column' control' r' item' subItemIndex
Long Parameter List,BrightIdeasSoftware,BeforeSortingEventArgs,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,BeforeSortingEventArgs,The method has 6 parameters. Parameters: groupColumn' groupOrder' column' order' column2' order2
Long Parameter List,BrightIdeasSoftware,AfterSortingEventArgs,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,AfterSortingEventArgs,The method has 6 parameters. Parameters: groupColumn' groupOrder' column' order' column2' order2
Long Parameter List,BrightIdeasSoftware,SubItemCheckingEventArgs,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,SubItemCheckingEventArgs,The method has 5 parameters. Parameters: column' item' subItemIndex' currentValue' newValue
Long Parameter List,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The method has 5 parameters. Parameters: g' column' flags' isHot' i
Long Parameter List,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedBackground,The method has 5 parameters. Parameters: g' r' columnIndex' isSelected' stateStyle
Long Parameter List,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawText,The method has 6 parameters. Parameters: g' r' column' flags' f' color
Long Parameter List,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The method has 7 parameters. Parameters: g' r' column' flags' f' color' imageTextGap
Long Parameter List,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The method has 5 parameters. Parameters: g' r' column' f' color
Long Parameter List,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,ImageList_Draw,The method has 6 parameters. Parameters: himl' i' hdcDst' x' y' fStyle
Long Parameter List,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetBackgroundImage,The method has 6 parameters. Parameters: lv' image' isWatermark' isTiled' xOffset' yOffset
Long Parameter List,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,DrawImageList,The method has 6 parameters. Parameters: g' il' index' x' y' isSelected
Long Parameter List,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardHitTest,The method has 5 parameters. Parameters: g' hti' bounds' x' y
Long Parameter List,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawSubstringFrame,The method has 5 parameters. Parameters: g' x' y' width' height
Long Parameter List,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The method has 5 parameters. Parameters: x' y' width' height' diameter
Long Parameter List,BrightIdeasSoftware,BarRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,BarRenderer,The method has 5 parameters. Parameters: minimum' maximum' pen' start' end
Long Parameter List,BrightIdeasSoftware,DescribedTaskRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawDescribedTask,The method has 5 parameters. Parameters: g' r' title' description' image
Long Parameter List,BrightIdeasSoftware,AbstractVirtualListDataSource,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualListDataSource.cs,DefaultSearchText,The method has 5 parameters. Parameters: value' first' last' column' source
Long Identifier,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The length of the parameter MILLISECONDS_BETWEEN_KEYPRESSES is 31.
Long Identifier,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter copySelectionOnControlCUsesDragSource is 37.
Long Identifier,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter selectColumnsOnRightClickBehaviour is 34.
Long Identifier,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter updateSpaceFillingColumnsWhenDraggingColumnDivider is 50.
Long Identifier,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter unfocusedHighlightBackgroundColor is 33.
Long Identifier,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,,The length of the parameter unfocusedHighlightForegroundColor is 33.
Long Identifier,BrightIdeasSoftware,OLVColumn,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,,The length of the parameter cachedGroupWithItemCountFormat is 30.
Long Identifier,BrightIdeasSoftware,OLVColumn,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,,The length of the parameter groupWithItemCountSingularFormat is 32.
Long Identifier,BrightIdeasSoftware,OLVColumn,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,,The length of the parameter cachedGroupWithItemCountSingularFormat is 38.
Long Identifier,BrightIdeasSoftware,ClusteringStrategy,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\ClusteringStrategy.cs,,The length of the parameter defaultDisplayLabelFormatSingular is 33.
Long Identifier,BrightIdeasSoftware,ClusteringStrategy,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\ClusteringStrategy.cs,,The length of the parameter defaultDisplayLabelFormatPural is 30.
Long Statement,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("cd: {0:x}' {1}' {2}"' nmcustomdraw.nmcd.dwDrawStage' nmcustomdraw.dwItemType' nmcustomdraw.nmcd.dwItemSpec)); " is 161.
Long Statement,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "                    //System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem)); " is 144.
Long Statement,BrightIdeasSoftware,DataSourceAdapter,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("Processing {0} event on {1} rows took {2}ms"' e.ListChangedType' this.ListView.GetItemCount()' sw.ElapsedMilliseconds)); " is 172.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonMoveUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonMoveDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonShow.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonHide.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) " is 139.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192))))); " is 147.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "            this.objectListView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) " is 151.
Long Statement,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("header cd: {0:x}' {1}' {2:x}"' nmcustomdraw.dwDrawStage' nmcustomdraw.dwItemSpec' nmcustomdraw.uItemState)); " is 160.
Long Statement,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The length of the statement  "                        // If we are not printing' it's probable that the given Graphics object is double buffered using a BufferedGraphics object. " is 123.
Long Statement,BrightIdeasSoftware,OwnerDataCallbackImpl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,OnCacheHint,The length of the statement  "            //System.Diagnostics.Debug.WriteLine(String.Format("OnCacheHint({0}' {1}' {2}' {3})"' from.iGroup' from.iItem' to.iGroup' to.iItem)); " is 133.
Complex Conditional,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The conditional expression  "View != View.Details || hti.ColumnIndex == 0 ||                  hti.SubItem == null || hti.Column == null"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetCellToolTip,The conditional expression  "subItem != null && !String.IsNullOrEmpty(subItem.Url) && subItem.Url != subItem.Text &&                      HotCellHitLocation == HitTestLocation.Text"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetupBaseImageList,The conditional expression  "rowHeight == -1 ||                  View != View.Details ||                  (shadowedImageList != null && shadowedImageList.ImageSize.Height == rowHeight)"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnMouseUp,The conditional expression  "UseHyperlinks &&                  args.HitTest.HitTestLocation == HitTestLocation.Text &&                  args.SubItem != null &&                  !String.IsNullOrEmpty(args.SubItem.Url)"  is complex.
Complex Conditional,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,HandleTimerTick,The conditional expression  "(IsLeftMouseButtonDown && (Control.MouseButtons & MouseButtons.Left) != MouseButtons.Left) ||                  (IsMiddleMouseButtonDown && (Control.MouseButtons & MouseButtons.Middle) != MouseButtons.Middle) ||                  (IsRightMouseButtonDown && (Control.MouseButtons & MouseButtons.Right) != MouseButtons.Right)"  is complex.
Complex Conditional,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,NeedsCustomDraw,The conditional expression  "column.HasHeaderImage ||                      !column.ShowTextInHeader ||                      column.IsHeaderVertical ||                      HasFilterIndicator(column) ||                      column.TextAlign != column.HeaderTextAlign ||                      NeedsCustomDraw(column.HeaderFormatStyle)"  is complex.
Complex Conditional,BrightIdeasSoftware,CellEditKeyEngine,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,The conditional expression  "(isGoingLeft && displayIndex == 0) ||                  (!isGoingLeft && displayIndex == editableColumns.Count - 1)"  is complex.
Complex Conditional,BrightIdeasSoftware,MessageForwarder,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\ObjectListView.cs,PreFilterMessage,The conditional expression  "_Messages.Contains(m.Msg) && _Control.CanFocus && !_Control.Focused                      && _IsMouseOverControl"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetForegroundColor,The conditional expression  "IsItemSelected && !ListView.UseTranslucentSelection &&                  (Column.Index == 0 || ListView.FullRowSelect)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetTextBackgroundColor,The conditional expression  "IsItemSelected && !ListView.UseTranslucentSelection                  && (Column.Index == 0 || ListView.FullRowSelect)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdi,The conditional expression  "IsDrawBackground && IsItemSelected && Column.Index == 0 && !ListView.FullRowSelect"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdiPlus,The conditional expression  "IsDrawBackground && IsItemSelected && Column.Index == 0 && !ListView.FullRowSelect"  is complex.
Complex Conditional,BrightIdeasSoftware,ToolTipControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,The conditional expression  "!args.IsBalloon.HasValue &&                  !args.BackColor.HasValue &&                  !args.ForeColor.HasValue &&                  args.Title == null &&                  !args.StandardIcon.HasValue &&                  !args.AutoPopDelay.HasValue &&                  args.Font == null"  is complex.
Virtual Method Call from Constructor,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ObjectListView,The constructor "ObjectListView" calls a virtual method "InitializeStandardOverlays".
Virtual Method Call from Constructor,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ObjectListView,The constructor "ObjectListView" calls a virtual method "InitializeEmptyListMsgOverlay".
Virtual Method Call from Constructor,BrightIdeasSoftware,AutoCompleteCellEditor,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The constructor "AutoCompleteCellEditor" calls a virtual method "GetItemCount".
Virtual Method Call from Constructor,BrightIdeasSoftware,AutoCompleteCellEditor,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The constructor "AutoCompleteCellEditor" calls a virtual method "GetModelObject".
Empty Catch Block,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,EnsureModelVisible,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetControlValue,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,Munger,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,PutProperty,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetImageFromAspect,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnCellEditorValidating,The following statement contains a magic number: if ((Environment.TickCount - lastValidatingEvent) < 100)              {                  e.Cancel = true;              }              else              {                  lastValidatingEvent = Environment.TickCount;                  if (CellEditValidating != null)                      CellEditValidating(this' e);              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AutoResizeColumns,The following statement contains a magic number: foreach (OLVColumn c in Columns)              {                  c.Width = -2;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateReasonableTileSize,The following statement contains a magic number: int imageHeight = (LargeImageList == null ? 16 : LargeImageList.ImageSize.Height);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateReasonableTileSize,The following statement contains a magic number: int tileWidth = (TileSize.Width == 0 ? 200 : TileSize.Width);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null && !FullRowSelect && View == View.Details)              {                  // Is the point within the column 0? If it is' maybe it should have been a hit.                  // Let's test slightly to the right and then to left of column 0. Hopefully one                  // of those will hit a subitem                  Point sides = NativeMethods.GetScrolledColumnSides(this' 0);                  if (x >= sides.X && x <= sides.Y)                  {                      // We look for:                      // - any subitem to the right of cell 0?                      // - any subitem to the left of cell 0?                      // - cell 0 at the left edge of the screen                      hitTestInfo = HitTest(sides.Y + 4' y);                      if (hitTestInfo.Item == null)                          hitTestInfo = HitTest(sides.X - 4' y);                      if (hitTestInfo.Item == null)                          hitTestInfo = HitTest(4' y);                        if (hitTestInfo.Item != null)                      {                          // We hit something! So' the original point must have been in cell 0                          hti.Item = (OLVListItem) hitTestInfo.Item;                          hti.SubItem = hti.Item.GetSubItem(0);                          hti.Location = ListViewHitTestLocations.None;                          hti.HitTestLocation = HitTestLocation.InCell;                      }                  }              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null && !FullRowSelect && View == View.Details)              {                  // Is the point within the column 0? If it is' maybe it should have been a hit.                  // Let's test slightly to the right and then to left of column 0. Hopefully one                  // of those will hit a subitem                  Point sides = NativeMethods.GetScrolledColumnSides(this' 0);                  if (x >= sides.X && x <= sides.Y)                  {                      // We look for:                      // - any subitem to the right of cell 0?                      // - any subitem to the left of cell 0?                      // - cell 0 at the left edge of the screen                      hitTestInfo = HitTest(sides.Y + 4' y);                      if (hitTestInfo.Item == null)                          hitTestInfo = HitTest(sides.X - 4' y);                      if (hitTestInfo.Item == null)                          hitTestInfo = HitTest(4' y);                        if (hitTestInfo.Item != null)                      {                          // We hit something! So' the original point must have been in cell 0                          hti.Item = (OLVListItem) hitTestInfo.Item;                          hti.SubItem = hti.Item.GetSubItem(0);                          hti.Location = ListViewHitTestLocations.None;                          hti.HitTestLocation = HitTestLocation.InCell;                      }                  }              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null && !FullRowSelect && View == View.Details)              {                  // Is the point within the column 0? If it is' maybe it should have been a hit.                  // Let's test slightly to the right and then to left of column 0. Hopefully one                  // of those will hit a subitem                  Point sides = NativeMethods.GetScrolledColumnSides(this' 0);                  if (x >= sides.X && x <= sides.Y)                  {                      // We look for:                      // - any subitem to the right of cell 0?                      // - any subitem to the left of cell 0?                      // - cell 0 at the left edge of the screen                      hitTestInfo = HitTest(sides.Y + 4' y);                      if (hitTestInfo.Item == null)                          hitTestInfo = HitTest(sides.X - 4' y);                      if (hitTestInfo.Item == null)                          hitTestInfo = HitTest(4' y);                        if (hitTestInfo.Item != null)                      {                          // We hit something! So' the original point must have been in cell 0                          hti.Item = (OLVListItem) hitTestInfo.Item;                          hti.SubItem = hti.Item.GetSubItem(0);                          hti.Location = ListViewHitTestLocations.None;                          hti.HitTestLocation = HitTestLocation.InCell;                      }                  }              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: textBounds.X += 4;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: switch (hti.Column.TextAlign)              {                  case HorizontalAlignment.Center:                      textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width)/2;                      break;                  case HorizontalAlignment.Right:                      textBounds.X = cellBounds.Right - textSize.Width;                      break;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,WndProc,The following statement contains a magic number: switch (m.Msg)              {                  case 2: // WM_DESTROY                      if (!HandleDestroy(ref m))                          base.WndProc(ref m);                      break;                      //case 0x14: // WM_ERASEBKGND                      //    Can't do anything here since' when the control is double buffered' anything                      //    done here is immediately over-drawn                      //    break;                  case 0x0F: // WM_PAINT                      if (!HandlePaint(ref m))                          base.WndProc(ref m);                      break;                  case 0x46: // WM_WINDOWPOSCHANGING                      if (!HandleWindowPosChanging(ref m))                          base.WndProc(ref m);                      break;                  case 0x4E: // WM_NOTIFY                      if (!HandleNotify(ref m))                          base.WndProc(ref m);                      break;                  case 0x0100: // WM_KEY_DOWN                      if (!HandleKeyDown(ref m))                          base.WndProc(ref m);                      break;                  case 0x0102: // WM_CHAR                      if (!HandleChar(ref m))                          base.WndProc(ref m);                      break;                  case 0x0201: // WM_LBUTTONDOWN                      if (PossibleFinishCellEditing() && !HandleLButtonDown(ref m))                          base.WndProc(ref m);                      break;                  case 0x202: // WM_LBUTTONUP                      if (IsVistaOrLater && HasCollapsibleGroups)                          base.DefWndProc(ref m);                      base.WndProc(ref m);                      break;                  case 0x0203: // WM_LBUTTONDBLCLK                      if (PossibleFinishCellEditing() && !HandleLButtonDoubleClick(ref m))                          base.WndProc(ref m);                      break;                  case 0x0204: // WM_RBUTTONDOWN                      if (PossibleFinishCellEditing() && !HandleRButtonDown(ref m))                          base.WndProc(ref m);                      break;                  case 0x0206: // WM_RBUTTONDBLCLK                      if (PossibleFinishCellEditing() && !HandleRButtonDoubleClick(ref m))                          base.WndProc(ref m);                      break;                  case 0x204E: // WM_REFLECT_NOTIFY                      if (!HandleReflectNotify(ref m))                          base.WndProc(ref m);                      break;                  case 0x114: // WM_HSCROLL:                  case 0x115: // WM_VSCROLL:                      if (PossibleFinishCellEditing())                          base.WndProc(ref m);                      break;                  case 0x20A: // WM_MOUSEWHEEL:                  case 0x20E: // WM_MOUSEHWHEEL:                      if (PossibleFinishCellEditing())                          base.WndProc(ref m);                      break;                  case 0x7B: // WM_CONTEXTMENU                      if (!HandleContextMenu(ref m))                          base.WndProc(ref m);                      break;                  default:                      base.WndProc(ref m);                      break;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The following statement contains a magic number: try              {                  const int MILLISECONDS_BETWEEN_KEYPRESSES = 1000;                    // What character did the user type and was it part of a longer string?                  var character = (char) m.WParam.ToInt32(); //TODO: Will this work on 64 bit or MBCS?                  if (character == (char) Keys.Back)                  {                      // Backspace forces the next key to be considered the start of a new search                      timeLastCharEvent = 0;                      return true;                  }                    if (Char.IsControl(character))                  {                      timeLastCharEvent = Environment.TickCount;                      return false;                  }                    if (Environment.TickCount < (timeLastCharEvent + MILLISECONDS_BETWEEN_KEYPRESSES))                      lastSearchString += character;                  else                      lastSearchString = character.ToString();                    // If this control is showing checkboxes' we want to ignore single space presses'                  // since they are used to toggle the selected checkboxes.                  if (CheckBoxes && lastSearchString == " ")                  {                      timeLastCharEvent = 0;                      return true;                  }                    // Where should the search start?                  int start = 0;                  ListViewItem focused = FocusedItem;                  if (focused != null)                  {                      start = GetItemIndexInDisplayOrder(focused);                        // If the user presses a single key' we search from after the focused item'                      // being careful not to march past the end of the list                      if (lastSearchString.Length == 1)                      {                          start += 1;                          if (start == GetItemCount())                              start = 0;                      }                  }                    // Give the world a chance to fiddle with or completely avoid the searching process                  var args = new BeforeSearchingEventArgs(lastSearchString' start);                  OnBeforeSearching(args);                  if (args.Canceled)                      return true;                    // The parameters of the search may have been changed                  string searchString = args.StringToFind;                  start = args.StartSearchFrom;                    // Do the actual search                  int found = FindMatchingRow(searchString' start' SearchDirectionHint.Down);                  if (found >= 0)                  {                      // Select and focus on the found item                      BeginUpdate();                      try                      {                          SelectedIndices.Clear();                          ListViewItem lvi = GetNthItemInDisplayOrder(found);                          lvi.Selected = true;                          lvi.Focused = true;                          EnsureVisible(lvi.Index);                      }                      finally                      {                          EndUpdate();                      }                  }                    // Tell the world that a search has occurred                  var args2 = new AfterSearchingEventArgs(searchString' found);                  OnAfterSearching(args2);                  if (!args2.Handled)                  {                      if (found < 0)                          SystemSounds.Beep.Play();                  }              }              catch              {              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: const int CDDS_POSTPAINT = 2;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: const int CDDS_PREERASE = 3;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: const int CDDS_POSTERASE = 4;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: switch (nmcustomdraw.nmcd.dwDrawStage)              {                  case CDDS_PREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREPAINT");                      // Remember which items were drawn during this paint cycle                      if (prePaintLevel == 0)                          drawnItems = new List<OLVListItem>();                        // If there are any items' we have to wait until at least one has been painted                      // before we draw the overlays. If there aren't any items' there will never be any                      // item paint events' so we can draw the overlays whenever                      isAfterItemPaint = (GetItemCount() == 0);                      prePaintLevel++;                      base.WndProc(ref m);                        // Make sure that we get postpaint notifications                      m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_POSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTPAINT");                      prePaintLevel--;                        // When in group view' we have two problems. On XP' the control sends                      // a whole heap of PREPAINT/POSTPAINT messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays.                      // On Vista' we have a different problem. On Vista' the control nests calls                      // to PREPAINT and POSTPAINT. We only want to draw overlays on the outermost                      // POSTPAINT.                      if (prePaintLevel == 0 && (isMarqueSelecting || isAfterItemPaint))                      {                          shouldDoCustomDrawing = false;                            // Draw our overlays after everything has been drawn                          using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                          {                              DrawAllDecorations(g' drawnItems);                          }                      }                      break;                    case CDDS_ITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREPAINT");                        // When in group view on XP' the control send a whole heap of PREPAINT/POSTPAINT                      // messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays                      isAfterItemPaint = true;                        // This scheme of catching custom draw msgs works fine' except                      // for Tile view. Something in .NET's handling of Tile view causes lots                      // of invalidates and erases. So' we just ignore completely                      // .NET's handling of Tile view and let the underlying control                      // do its stuff. Strangely' if the Tile view is                      // completely owner drawn' those erasures don't happen.                      if (View == View.Tile)                      {                          if (OwnerDraw && ItemRenderer != null)                              base.WndProc(ref m);                      }                      else                      {                          base.WndProc(ref m);                      }                        m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_ITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTPAINT");                      if (Columns.Count > 0)                      {                          OLVListItem olvi = GetItem((int) nmcustomdraw.nmcd.dwItemSpec);                          if (olvi != null)                              drawnItems.Add(olvi);                      }                      break;                    case CDDS_SUBITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem));                        // There is a bug in the .NET framework which appears when column 0 of an owner drawn listview                      // is dragged to another column position.                      // The bounds calculation always returns the left edge of column 0 as being 0.                      // The effects of this bug become apparent                      // when the listview is scrolled horizontally: the control can think that column 0                      // is no longer visible (the horizontal scroll position is subtracted from the bounds' giving a                      // rectangle that is offscreen). In those circumstances' column 0 is not redraw because                      // the control thinks it is not visible and so does not trigger a DrawSubItem event.                        // To fix this problem' we have to detected the situation -- owner drawing column 0 in any column except 0 --                      // trigger our own DrawSubItem' and then prevent the default processing from occuring.                        // Are we owner drawing column 0 when it's in any column except 0?                      if (!OwnerDraw)                          return false;                        int columnIndex = nmcustomdraw.iSubItem;                      if (columnIndex != 0)                          return false;                        int displayIndex = Columns[0].DisplayIndex;                      if (displayIndex == 0)                          return false;                        var rowIndex = (int) nmcustomdraw.nmcd.dwItemSpec;                      OLVListItem item = GetItem(rowIndex);                      if (item == null)                          return false;                        // OK. We have the error condition' so lets do what the .NET framework should do.                      // Trigger an event to draw column 0 when it is not at display index 0                      using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                      {                          // Correctly calculate the bounds of cell 0                          Rectangle r = item.GetSubItemBounds(0);                            // We can hardcode "0" here since we know we are only doing this for column 0                          var args = new DrawListViewSubItemEventArgs(g' r' item' item.SubItems[0]' rowIndex' 0'                                                                      Columns[0]'                                                                      (ListViewItemStates) nmcustomdraw.nmcd.uItemState);                          OnDrawSubItem(args);                            // If the event handler wants to do the default processing (i.e. DrawDefault = true)' we are stuck.                          // There is no way we can force the default drawing because of the bug in .NET we are trying to get around.                          Trace.Assert(!args.DrawDefault' "Default drawing is impossible in this situation");                      }                      m.Result = (IntPtr) 4;                        return true;                    case CDDS_SUBITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_SUBITEMPOSTPAINT");                      break;                        // I have included these stages' but it doesn't seem that they are sent for ListViews.                      // http://www.tech-archive.net/Archive/VC/microsoft.public.vc.mfc/2006-08/msg00220.html                    case CDDS_PREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREERASE");                      break;                    case CDDS_POSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTERASE");                      break;                    case CDDS_ITEMPREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREERASE");                      break;                    case CDDS_ITEMPOSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTERASE");                      break;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleLButtonDown,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleRButtonDown,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleLButtonDoubleClick,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleRButtonDoubleClick,The following statement contains a magic number: int y = (m.LParam.ToInt32() >> 16) & 0xFFFF;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_CLICK = -2;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_DBLCLK = -3;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_RDBLCLK = -6;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_CUSTOMDRAW = -12;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int NM_RELEASEDCAPTURE = -16;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_ITEMCHANGED = -101;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_ITEMCHANGING = -100;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_MARQUEEBEGIN = -156;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_GETINFOTIP = -158;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_BEGINSCROLL = -180;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_ENDSCROLL = -181;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVN_LINKCLICK = -184;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following statement contains a magic number: const int LVIF_STATE = 8;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12)              {                  case 1:                      return CheckState.Unchecked;                  case 2:                      return CheckState.Checked;                  case 3:                      return CheckState.Indeterminate;                  default:                      return CheckState.Checked;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12)              {                  case 1:                      return CheckState.Unchecked;                  case 2:                      return CheckState.Checked;                  case 3:                      return CheckState.Indeterminate;                  default:                      return CheckState.Checked;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12)              {                  case 1:                      return CheckState.Unchecked;                  case 2:                      return CheckState.Checked;                  case 3:                      return CheckState.Indeterminate;                  default:                      return CheckState.Checked;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int NM_CUSTOMDRAW = -12;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_FIRST = (0 - 300);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ITEMCHANGINGW = (HDN_FIRST - 20);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ITEMCLICKA = (HDN_FIRST - 2);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ITEMCLICKW = (HDN_FIRST - 22);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_DIVIDERDBLCLICKA = (HDN_FIRST - 5);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_DIVIDERDBLCLICKW = (HDN_FIRST - 25);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_BEGINTRACKA = (HDN_FIRST - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_BEGINTRACKW = (HDN_FIRST - 26);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ENDTRACKA = (HDN_FIRST - 7);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_ENDTRACKW = (HDN_FIRST - 27);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_TRACKA = (HDN_FIRST - 8);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following statement contains a magic number: const int HDN_TRACKW = (HDN_FIRST - 28);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,EnsureGroupVisible,The following statement contains a magic number: if (groupIndex <= 0)              {                  // There is no easy way to scroll back to the beginning of the list                  int delta = 0 - NativeMethods.GetScrollPosition(this' false);                  NativeMethods.Scroll(this' 0' delta);              }              else              {                  // Find the display rectangle of the last item in the previous group                  ListViewGroup previousGroup = Groups[groupIndex - 1];                  ListViewItem lastItemInGroup = previousGroup.Items[previousGroup.Items.Count - 1];                  Rectangle r = GetItemRect(lastItemInGroup.Index);                    // Scroll so that the last item of the previous group is just out of sight'                  // which will make the desired group header visible.                  int delta = r.Y + r.Height/2;                  NativeMethods.Scroll(this' 0' delta);              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: if (il == null)              {                  il = new ImageList();                  il.ImageSize = new Size(16' 16);                  il.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: if (il == null)              {                  il = new ImageList();                  il.ImageSize = new Size(16' 16);                  il.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int midX = il.ImageSize.Width/2;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int midY = (il.ImageSize.Height/2) - 1;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int deltaX = midX - 2;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: int deltaY = deltaX/2;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,PostProcessOneRow,The following statement contains a magic number: if (UseAlternatingBackColors && View == View.Details)              {                  if (displayIndex%2 == 1)                  {                      olvi.BackColor = AlternateRowBackColorOrDefault;                  }                  else                  {                      olvi.BackColor = BackColor;                  }              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetupBaseImageList,The following statement contains a magic number: if (rowHeight == -1 ||                  View != View.Details ||                  (shadowedImageList != null && shadowedImageList.ImageSize.Height == rowHeight))                  BaseSmallImageList = shadowedImageList;              else              {                  int width = (shadowedImageList == null ? 16 : shadowedImageList.ImageSize.Width);                  BaseSmallImageList = MakeResizedImageList(width' rowHeight' shadowedImageList);              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeResizedImage,The following statement contains a magic number: int x = Math.Max(0' (bm.Size.Width - image.Size.Width)/2);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeResizedImage,The following statement contains a magic number: int y = Math.Max(0' (bm.Size.Height - image.Size.Height)/2);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (StateImageList == null)              {                  StateImageList = new ImageList();                  StateImageList.ImageSize = new Size(16' 16);                  StateImageList.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (StateImageList == null)              {                  StateImageList = new ImageList();                  StateImageList.ImageSize = new Size(16' 16);                  StateImageList.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (RowHeight != -1 &&                  View == View.Details &&                  StateImageList.ImageSize.Height != RowHeight)              {                  StateImageList = new ImageList();                  StateImageList.ImageSize = new Size(16' RowHeight);                  StateImageList.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (TriStateCheckBoxes && StateImageList.Images.Count <= 2)                  AddCheckStateBitmap(StateImageList' INDETERMINATE_KEY' CheckBoxState.MixedNormal);              else              {                  if (StateImageList.Images.ContainsKey(INDETERMINATE_KEY))                      StateImageList.Images.RemoveByKey(INDETERMINATE_KEY);              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: if (il == null)              {                  il = new ImageList();                  il.ImageSize = new Size(16' 16);                  il.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: if (il == null)              {                  il = new ImageList();                  il.ImageSize = new Size(16' 16);                  il.ColorDepth = ColorDepth.Depth32Bit;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AddCheckStateBitmap,The following statement contains a magic number: var location = new Point(b.Width/2 - 5' b.Height/2 - 6);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ShouldStartCellEdit,The following statement contains a magic number: return (lastMouseDownClickCount == 2 && CellEditActivation == CellEditActivateMode.DoubleClick);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,StartCellEdit,The following statement contains a magic number: if (View != View.Tile && cellEditor.Height != r.Height)                  cellEditor.Top += (r.Height - cellEditor.Height)/2;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: if (GetActualImageIndex(subItemImageSelector) != -1)              {                  offset += SmallImageSize.Width + 2;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: if (CheckBoxes && StateImageList != null && subItemIndex == 0)              {                  offset += StateImageList.ImageSize.Width + 2;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: if (r.Y < -10000000 || r.Y > 10000000)              {                  r.Y = item.Bounds.Y;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: if (r.Y < -10000000 || r.Y > 10000000)              {                  r.Y = item.Bounds.Y;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.X = sides.X + 4;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.Width = sides.Y - sides.X - 5;
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetFirstNonNullValue,The following statement contains a magic number: for (int i = 0; i < Math.Min(GetItemCount()' 1000); i++)              {                  object value = column.GetValue(GetModelObject(i));                  if (value != null)                      return value;              }
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ConfigureAutoComplete,The following statement contains a magic number: ConfigureAutoComplete(tb' column' 1000);
Magic Number,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ShouldShowOverlays,The following statement contains a magic number: if (Screen.PrimaryScreen.BitsPerPixel < 32)                  return false;
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,ApplyRotation,The following statement contains a magic number: m.RotateAt(Rotation' new Point(r.Left + r.Width/2' r.Top + r.Height/2));
Magic Number,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,ApplyRotation,The following statement contains a magic number: m.RotateAt(Rotation' new Point(r.Left + r.Width/2' r.Top + r.Height/2));
Magic Number,BrightIdeasSoftware,ImageAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawTransparentBitmap,The following statement contains a magic number: if (transparency != 255)              {                  imageAttributes = new ImageAttributes();                  float a = transparency/255.0f;                  float[][] colorMatrixElements = {                                                      new float[] {1' 0' 0' 0' 0}'                                                      new float[] {0' 1' 0' 0' 0}'                                                      new float[] {0' 0' 1' 0' 0}'                                                      new[] {0' 0' 0' a' 0}'                                                      new float[] {0' 0' 0' 0' 1}                                                  };                    imageAttributes.SetColorMatrix(new ColorMatrix(colorMatrixElements));              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawBorderedText,The following statement contains a magic number: borderRect.Inflate((int) BorderWidth/2' (int) BorderWidth/2);
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawBorderedText,The following statement contains a magic number: borderRect.Inflate((int) BorderWidth/2' (int) BorderWidth/2);
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,TextAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,AutoCompleteCellEditor,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The following statement contains a magic number: for (int i = 0; i < Math.Min(lv.GetItemCount()' 1000); i++)              {                  String str = column.GetStringValue(lv.GetModelObject(i));                  if (!alreadySeen.ContainsKey(str))                  {                      Items.Add(str);                      alreadySeen[str] = true;                  }              }
Magic Number,BrightIdeasSoftware,IntUpDown,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,IntUpDown,The following statement contains a magic number: Minimum = -9999999;
Magic Number,BrightIdeasSoftware,IntUpDown,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,IntUpDown,The following statement contains a magic number: Maximum = 9999999;
Magic Number,BrightIdeasSoftware,UintUpDown,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,UintUpDown,The following statement contains a magic number: Maximum = 9999999;
Magic Number,BrightIdeasSoftware,FloatCellEditor,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: DecimalPlaces = 2;
Magic Number,BrightIdeasSoftware,FloatCellEditor,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: Minimum = -9999999;
Magic Number,BrightIdeasSoftware,FloatCellEditor,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: Maximum = 9999999;
Magic Number,BrightIdeasSoftware,DataSourceAdapter,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,ConfigureColumn,The following statement contains a magic number: if (property.PropertyType == typeof (bool) || property.PropertyType == typeof (CheckState))              {                  column.TextAlign = HorizontalAlignment.Center;                  column.Width = 32;                  column.CheckBoxes = true;                    if (property.PropertyType == typeof (CheckState))                      column.TriStateCheckBoxes = true;              }
Magic Number,BrightIdeasSoftware,TintedColumnDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,TintedColumnDecoration,The following statement contains a magic number: Tint = Color.FromArgb(15' Color.Blue);
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,BorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f)              {                  path.AddRectangle(rect);              }              else              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BorderPen = new Pen(Color.DarkBlue' 2);
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: CornerRounding = 8;
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BoundsPadding = new Size(10' 8);
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BoundsPadding = new Size(10' 8);
Magic Number,BrightIdeasSoftware,LightBoxDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: BoundsPadding = new Size(-1' 4);
Magic Number,BrightIdeasSoftware,LightBoxDecoration,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: FillBrush = new SolidBrush(Color.FromArgb(72' Color.Black));
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,SimpleDropSink,The following statement contains a magic number: timer.Interval = 250;
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,SimpleDropSink,The following statement contains a magic number: FeedbackColor = Color.FromArgb(180' Color.MediumBlue);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,HandleTimerTick,The following statement contains a magic number: const int GRACE_PERIMETER = 30;
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CalculateDropTarget,The following statement contains a magic number: const int SMALL_VALUE = 3;
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (ListView.View == View.Tile)                  close /= 2;
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close))              {                  // Scroll faster if the mouse is closer to the top                  timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);                  timer.Start();                  scrollAmount = -rowHeight;              }              else              {                  if (pt.Y >= (r.Bottom - close))                  {                      timer.Interval = ((pt.Y >= (r.Bottom - close/2)) ? 100 : 350);                      timer.Start();                      scrollAmount = rowHeight;                  }                  else                  {                      timer.Stop();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close))              {                  // Scroll faster if the mouse is closer to the top                  timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);                  timer.Start();                  scrollAmount = -rowHeight;              }              else              {                  if (pt.Y >= (r.Bottom - close))                  {                      timer.Interval = ((pt.Y >= (r.Bottom - close/2)) ? 100 : 350);                      timer.Start();                      scrollAmount = rowHeight;                  }                  else                  {                      timer.Stop();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close))              {                  // Scroll faster if the mouse is closer to the top                  timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);                  timer.Start();                  scrollAmount = -rowHeight;              }              else              {                  if (pt.Y >= (r.Bottom - close))                  {                      timer.Interval = ((pt.Y >= (r.Bottom - close/2)) ? 100 : 350);                      timer.Start();                      scrollAmount = rowHeight;                  }                  else                  {                      timer.Stop();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close))              {                  // Scroll faster if the mouse is closer to the top                  timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);                  timer.Start();                  scrollAmount = -rowHeight;              }              else              {                  if (pt.Y >= (r.Bottom - close))                  {                      timer.Interval = ((pt.Y >= (r.Bottom - close/2)) ? 100 : 350);                      timer.Start();                      scrollAmount = rowHeight;                  }                  else                  {                      timer.Stop();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close))              {                  // Scroll faster if the mouse is closer to the top                  timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);                  timer.Start();                  scrollAmount = -rowHeight;              }              else              {                  if (pt.Y >= (r.Bottom - close))                  {                      timer.Interval = ((pt.Y >= (r.Bottom - close/2)) ? 100 : 350);                      timer.Start();                      scrollAmount = rowHeight;                  }                  else                  {                      timer.Stop();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close))              {                  // Scroll faster if the mouse is closer to the top                  timer.Interval = ((pt.Y <= (r.Top + close/2)) ? 100 : 350);                  timer.Start();                  scrollAmount = -rowHeight;              }              else              {                  if (pt.Y >= (r.Bottom - close))                  {                      timer.Interval = ((pt.Y >= (r.Bottom - close/2)) ? 100 : 350);                      timer.Start();                      scrollAmount = rowHeight;                  }                  else                  {                      timer.Stop();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: if (Billboard != null)              {                  Point pt = args.MouseLocation;                  pt.Offset(5' 5);                  if (Billboard.Text != dropEventArgs.InfoMessage || Billboard.Location != pt)                  {                      Billboard.Text = dropEventArgs.InfoMessage;                      Billboard.Location = pt;                      ListView.Invalidate();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: if (Billboard != null)              {                  Point pt = args.MouseLocation;                  pt.Offset(5' 5);                  if (Billboard.Text != dropEventArgs.InfoMessage || Billboard.Location != pt)                  {                      Billboard.Text = dropEventArgs.InfoMessage;                      Billboard.Location = pt;                      ListView.Invalidate();                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: r.Inflate((int) -penWidth/2' (int) -penWidth/2);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: r.Inflate((int) -penWidth/2' (int) -penWidth/2);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: using (var p = new Pen(Color.FromArgb(128' FeedbackColor)' penWidth))              {                  using (GraphicsPath path = GetRoundedRect(r' 30.0f))                  {                      g.DrawPath(p' path);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackItemTarget,The following statement contains a magic number: float diameter = r.Height/3;
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackItemTarget,The following statement contains a magic number: using (GraphicsPath path = GetRoundedRect(r' diameter))              {                  using (var b = new SolidBrush(Color.FromArgb(48' FeedbackColor)))                  {                      g.FillPath(b' path);                  }                  using (var p = new Pen(FeedbackColor' 3.0f))                  {                      g.DrawPath(p' path);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 180' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 270' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 0' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc(arc' 90' 90);
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush(FeedbackColor))              {                  int x = x1;                  int y = y1;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 5'                          x' y - 5);                      gp.AddBezier(                          x' y - 6'                          x + 3' y - 2'                          x + 6' y - 1'                          x + 11' y);                      gp.AddBezier(                          x + 11' y'                          x + 6' y + 1'                          x + 3' y + 2'                          x' y + 6);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }                  x = x2;                  y = y2;                  using (var gp = new GraphicsPath())                  {                      gp.AddLine(                          x' y + 6'                          x' y - 6);                      gp.AddBezier(                          x' y - 7'                          x - 3' y - 2'                          x - 6' y - 1'                          x - 11' y);                      gp.AddBezier(                          x - 11' y'                          x - 6' y + 1'                          x - 3' y + 2'                          x' y + 7);                      gp.CloseFigure();                      g.FillPath(b' gp);                  }              }
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int h = 8;
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int w = 8;
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int x = r.X + 4;
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int y = r.Y + (r.Height/2) - 4;
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: int y = r.Y + (r.Height/2) - 4;
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: g.DrawLine(Pens.Black' x + 2' y + 4' x + w - 2' y + 4);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: if (!isExpanded)                      g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: if (!isExpanded)                      g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: if (!isExpanded)                      g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawExpansionGlyphManual,The following statement contains a magic number: if (!isExpanded)                      g.DrawLine(Pens.Black' x + 4' y + 2' x + 4' y + h - 2);
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawLines,The following statement contains a magic number: foreach (Branch ancestor in ancestors)                  {                      if (!ancestor.IsLastChild && !ancestor.IsOnlyBranch)                      {                          midX = r2.Left + r2.Width/2;                          g.DrawLine(p' midX' top' midX' r2.Bottom);                      }                      r2.Offset(PIXELS_PER_LEVEL' 0);                  }
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawLines,The following statement contains a magic number: midX = r2.Left + r2.Width/2;
Magic Number,BrightIdeasSoftware,TreeRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\TreeRenderer.cs,DrawLines,The following statement contains a magic number: int midY = r2.Top + r2.Height/2;
Magic Number,BrightIdeasSoftware,ToolStripCheckedListBox,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolStripCheckedListBox.cs,ToolStripCheckedListBox,The following statement contains a magic number: CheckedListBoxControl.MaximumSize = new Size(400' 700);
Magic Number,BrightIdeasSoftware,ToolStripCheckedListBox,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolStripCheckedListBox.cs,ToolStripCheckedListBox,The following statement contains a magic number: CheckedListBoxControl.MaximumSize = new Size(400' 700);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point(295' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point(295' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point(295' 60);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point(295' 60);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.TabIndex = 2;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Location = new System.Drawing.Point(295' 89);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Location = new System.Drawing.Point(295' 89);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.TabIndex = 3;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Location = new System.Drawing.Point(295' 118);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Location = new System.Drawing.Point(295' 118);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.TabIndex = 4;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(366' 19);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(366' 19);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 5;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(198' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(198' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 6;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(295' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(295' 304);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(87' 23);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 7;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb(((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Location = new System.Drawing.Point(12' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Location = new System.Drawing.Point(12' 31);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Size = new System.Drawing.Size(273' 259);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Size = new System.Drawing.Size(273' 259);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.olvColumn1.Width = 267;
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(391' 339);
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(391' 339);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb(255' 254' 254' 254);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,HideGlass,The following statement contains a magic number: Bounds = new Rectangle(-10000' -10000' 1' 1);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,HideGlass,The following statement contains a magic number: Bounds = new Rectangle(-10000' -10000' 1' 1);
Magic Number,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,WndProc,The following statement contains a magic number: const int WM_NCHITTEST = 132;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (column.IsHeaderVertical)                  return TextRenderer.MeasureText(g' column.Text' f' new Size(10000' 10000)' flags).Width;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (column.IsHeaderVertical)                  return TextRenderer.MeasureText(g' column.Text' f' new Size(10000' 10000)' flags).Width;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: const int fudge = 9;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= 6;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (HasNonThemedSortIndicator(column))                  r.Width -= 16;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (column.HasHeaderImage)                  r.Width -= column.ImageList.ImageSize.Width + 3;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: SizeF size = TextRenderer.MeasureText(g' column.Text' f' new Size(r.Width' 100)' flags);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,GetItemRect,The following statement contains a magic number: const int HDM_GETITEMRECT = HDM_FIRST + 7;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following statement contains a magic number: const int WM_DESTROY = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following statement contains a magic number: const int HDM_LAYOUT = (HDM_FIRST + 5);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following statement contains a magic number: const int CDRF_NEWFONT = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following statement contains a magic number: const int CDRF_SKIPDEFAULT = 4;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following statement contains a magic number: const int CDDS_POSTPAINT = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (columnIndex == 0 &&                  VisualStyleRenderer.IsElementDefined(VisualStyleElement.Header.ItemLeft.Normal))                  part = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (columnIndex == ListView.Columns.Count - 1 &&                  VisualStyleRenderer.IsElementDefined(VisualStyleElement.Header.ItemRight.Normal))                  part = 3;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (isSelected)                  state = 3; // pressed              else if (columnIndex == ColumnIndexUnderCursor)                  state = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (isSelected)                  state = 3; // pressed              else if (columnIndex == ColumnIndexUnderCursor)                  state = 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: if (renderer2 != null)              {                  Size sz = renderer2.GetPartSize(g' ThemeSizeType.True);                  Point pt = renderer2.GetPoint(PointProperty.Offset);                  // GetPoint() should work' but if it doesn't' put the arrow in the top middle                  if (pt.X == 0 && pt.Y == 0)                      pt = new Point(r.X + (r.Width/2) - (sz.Width/2)' r.Y);                  renderer2.DrawBackground(g' new Rectangle(pt' sz));              }
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: if (renderer2 != null)              {                  Size sz = renderer2.GetPartSize(g' ThemeSizeType.True);                  Point pt = renderer2.GetPoint(PointProperty.Offset);                  // GetPoint() should work' but if it doesn't' put the arrow in the top middle                  if (pt.X == 0 && pt.Y == 0)                      pt = new Point(r.X + (r.Width/2) - (sz.Width/2)' r.Y);                  renderer2.DrawBackground(g' new Rectangle(pt' sz));              }
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int triangleHeight = 16;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int triangleWidth = 16;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int midX = triangleWidth/2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int midY = (triangleHeight/2) - 1;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int deltaX = midX - 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: const int deltaY = deltaX/2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: var triangleLocation = new Point(r.Right - triangleWidth - 2' r.Top + (r.Height - triangleHeight)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: var triangleLocation = new Point(r.Right - triangleWidth - 2' r.Top + (r.Height - triangleHeight)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: if (ListView.LastSortOrder == SortOrder.Ascending)              {                  pts[0].Offset(midX - deltaX' midY + deltaY);                  pts[1].Offset(midX' midY - deltaY - 1);                  pts[2].Offset(midX + deltaX' midY + deltaY);              }              else              {                  pts[0].Offset(midX - deltaX' midY - deltaY);                  pts[1].Offset(midX' midY + deltaY);                  pts[2].Offset(midX + deltaX' midY - deltaY);              }
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: if (ListView.LastSortOrder == SortOrder.Ascending)              {                  pts[0].Offset(midX - deltaX' midY + deltaY);                  pts[1].Offset(midX' midY - deltaY - 1);                  pts[2].Offset(midX + deltaX' midY + deltaY);              }              else              {                  pts[0].Offset(midX - deltaX' midY - deltaY);                  pts[1].Offset(midX' midY + deltaY);                  pts[2].Offset(midX + deltaX' midY - deltaY);              }
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawFilterIndicator,The following statement contains a magic number: int y = r.Top + (r.Height - indicator.Height)/2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateFilterIndicatorWidth,The following statement contains a magic number: if (Resources.ColumnFilterIndicator == null || r.Width < 48)                  return 0;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: r.Inflate(-3' 0);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: r.Y -= 2;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: const int imageTextGap = 3;
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: if (column.IsHeaderVertical)              {                  DrawVerticalText(g' r' column' f' color);              }              else              {                  // Does the column have a header image and is there space for it?                  if (column.HasHeaderImage && r.Width > column.ImageList.ImageSize.Width*2)                      DrawImageAndText(g' r' column' flags' f' color' imageTextGap);                  else                      DrawText(g' r' column' flags' f' color);              }
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The following statement contains a magic number: int imageY = r.Top + ((r.Height - column.ImageList.ImageSize.Height)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The following statement contains a magic number: if (column.HeaderTextAlign == HorizontalAlignment.Center)                  imageX = textRect.Left + ((textRect.Width - textSize.Width)/2);
Magic Number,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The following statement contains a magic number: try              {                  // Create a matrix transformation that will rotate the text 90 degrees vertically                  // AND place the text in the middle of where it was previously. [Think of tipping                  // a box over by its bottom left edge -- you have to move it back a bit so it's                  // in the same place as it started]                  var m = new Matrix();                  m.RotateAt(-90' new Point(r.X' r.Bottom));                  m.Translate(0' r.Height);                  g.Transform = m;                  var fmt = new StringFormat(StringFormatFlags.NoWrap);                  fmt.Alignment = StringAlignment.Near;                  fmt.LineAlignment = column.HeaderTextAlignAsStringAlignment;                  //fmt.Trimming = StringTrimming.EllipsisCharacter;                    // The drawing is rotated 90 degrees' so switch our text boundaries                  Rectangle textRect = r;                  textRect.Width = r.Height;                  textRect.Height = r.Width;                  using (Brush b = new SolidBrush(color))                      g.DrawString(column.Text' f' b' textRect' fmt);              }              finally              {                  g.ResetTransform();              }
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SelectAllItems,The following statement contains a magic number: SetItemState(list' -1' 2' 2);
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SelectAllItems,The following statement contains a magic number: SetItemState(list' -1' 2' 2);
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,DeselectAllItems,The following statement contains a magic number: SetItemState(list' -1' 2' 0);
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetColumnUnderPoint,The following statement contains a magic number: const int HHT_ONHEADER = 2;
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetColumnUnderPoint,The following statement contains a magic number: const int HHT_ONDIVIDER = 4;
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetDividerUnderPoint,The following statement contains a magic number: const int HHT_ONDIVIDER = 4;
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,ShowWithoutActivate,The following statement contains a magic number: const int SW_SHOWNA = 8;
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,HasHorizontalScrollBar,The following statement contains a magic number: const int GWL_STYLE = -16;
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)                  return (int) GetWindowLong32(hWnd' nIndex);              else                  return (int) (long) GetWindowLongPtr64(hWnd' nIndex);
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)                  return (int) SetWindowLongPtr32(hWnd' nIndex' dwNewLong);              else                  return (int) (long) SetWindowLongPtr64(hWnd' nIndex' dwNewLong);
Magic Number,BrightIdeasSoftware,NativeMethods,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetGroupImageList,The following statement contains a magic number: const int LVSIL_GROUPHEADER = 3;
Magic Number,BrightIdeasSoftware,ImageOverlay,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawImage(g' insetRect' Image' 255);
Magic Number,BrightIdeasSoftware,TextOverlay,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawText(g' insetRect' Text' 255);
Magic Number,BrightIdeasSoftware,BillboardOverlay,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,BillboardOverlay,The following statement contains a magic number: Transparency = 255;
Magic Number,BrightIdeasSoftware,BillboardOverlay,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,BillboardOverlay,The following statement contains a magic number: Font = new Font("Tahoma"' 10);
Magic Number,BrightIdeasSoftware,BillboardOverlay,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawBorderedText(g' textRect' Text' 255);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: if (inner.Width < outer.Width)              {                  switch (Column.TextAlign)                  {                      case HorizontalAlignment.Left:                          r.X = outer.Left;                          break;                      case HorizontalAlignment.Center:                          r.X = outer.Left + ((outer.Width - inner.Width)/2);                          break;                      case HorizontalAlignment.Right:                          r.X = outer.Right - inner.Width - 1;                          break;                  }              }
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: if (inner.Height < outer.Height)                  r.Y = outer.Top + ((outer.Height - inner.Height)/2);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,CalculateCheckBoxWidth,The following statement contains a magic number: if (ListView.CheckBoxes && Column.Index == 0)                  return CheckBoxRenderer.GetGlyphSize(g' CheckBoxState.UncheckedNormal).Width + 6;              else                  return 0;
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardRender,The following statement contains a magic number: if (Column.Index == 0)              {                  r.X += 3;                  r.Width -= 1;              }
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardGetEditRectangle,The following statement contains a magic number: r.Width = Math.Max(r.Width - width' 40);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: using (Brush brush = new SolidBrush(backgroundColor))              {                  g.FillRectangle(brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);              }
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: using (Brush brush = new SolidBrush(backgroundColor))              {                  g.FillRectangle(brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);              }
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: if (IsPrinting)              {                  if (ListView.StateImageList == null || imageIndex < 0)                      return 0;                  else                      return DrawImage(g' r' ListView.StateImageList.Images[imageIndex]) + 4;              }
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: int switchValue = (imageIndex << 4);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox(g' new Point(r.X + 3' r.Y + (r.Height/2) - 6)' boxState);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox(g' new Point(r.X + 3' r.Y + (r.Height/2) - 6)' boxState);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox(g' new Point(r.X + 3' r.Y + (r.Height/2) - 6)' boxState);
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: return CheckBoxRenderer.GetGlyphSize(g' boxState).Width + 6;
Magic Number,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The following statement contains a magic number: if (image != null)              {                  int top = r.Y;                  if (image.Size.Height < r.Height)                      top += ((r.Height - image.Size.Height)/2);                    g.DrawImageUnscaled(image' r.X' top);                  return image.Width;              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The following statement contains a magic number: int paddingAdjustment = 6;
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The following statement contains a magic number: foreach (CharacterRange range in Filter.FindAllMatchedRanges(txt))              {                  // Measure the text that comes before our substring                  Size precedingTextSize = Size.Empty;                  if (range.First > 0)                  {                      string precedingText = txt.Substring(0' range.First);                      precedingTextSize = TextRenderer.MeasureText(g' precedingText' f' r.Size' flags);                      precedingTextSize.Width -= paddingAdjustment;                  }                    // Measure the length of our substring (may be different each time due to case differences)                  string highlightText = txt.Substring(range.First' range.Length);                  Size textToHighlightSize = TextRenderer.MeasureText(g' highlightText' f' r.Size' flags);                  textToHighlightSize.Width -= paddingAdjustment;                    // Draw a filled frame around our substring                  DrawSubstringFrame(g' r.X + precedingTextSize.Width + 1' r.Top'                                     textToHighlightSize.Width' r.Height - 2);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiPlusTextHighlighting,The following statement contains a magic number: using (StringFormat fmt = StringFormatForGdiPlus)              {                  RectangleF rf = r;                  fmt.SetMeasurableCharacterRanges(ranges.ToArray());                  Region[] stringRegions = g.MeasureCharacterRanges(txt' Font' rf' fmt);                    foreach (Region region in stringRegions)                  {                      RectangleF bounds = region.GetBounds(g);                      DrawSubstringFrame(g' bounds.X - 1' bounds.Y - 1' bounds.Width + 2' bounds.Height);                  }              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0)              {                  var arc = new RectangleF(rect.X' rect.Y' diameter' diameter);                  path.AddArc(arc' 180' 90);                  arc.X = rect.Right - diameter;                  path.AddArc(arc' 270' 90);                  arc.Y = rect.Bottom - diameter;                  path.AddArc(arc' 0' 90);                  arc.X = rect.Left;                  path.AddArc(arc' 90' 90);                  path.CloseFigure();              }              else              {                  path.AddRectangle(rect);              }
Magic Number,BrightIdeasSoftware,MappedImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,MappedImageRenderer,The following statement contains a magic number: if ((keysAndImages.GetLength(0)%2) != 0)                  throw new ArgumentException("Array must have key/image pairs");
Magic Number,BrightIdeasSoftware,MappedImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,MappedImageRenderer,The following statement contains a magic number: for (int i = 0; i < keysAndImages.GetLength(0); i += 2)                  Add(keysAndImages[i]' keysAndImages[i + 1]);
Magic Number,BrightIdeasSoftware,ImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimer,The following statement contains a magic number: if (ListView == null || Paused)                  tickler.Change(1000' Timeout.Infinite);              else              {                  if (ListView.InvokeRequired)                      ListView.Invoke((MethodInvoker) delegate { OnTimer(state); });                  else                      OnTimerInThread();              }
Magic Number,BrightIdeasSoftware,ImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,The following statement contains a magic number: if (ListView.View != View.Details || Column.Index < 0)              {                  tickler.Change(1000' Timeout.Infinite);                  return;              }
Magic Number,BrightIdeasSoftware,ImageRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,The following statement contains a magic number: long nextCheckAt = elapsedMilliseconds + 1000;
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,AnimationState,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AnimationState,The following statement contains a magic number: foreach (PropertyItem pi in this.image.PropertyItems)                  {                      if (pi.Id == PropertyTagFrameDelay)                      {                          for (int i = 0; i < pi.Len; i += 4)                          {                              //TODO: There must be a better way to convert 4-bytes to an int                              int delay = (pi.Value[i + 3] << 24) + (pi.Value[i + 2] << 16) + (pi.Value[i + 1] << 8) +                                          pi.Value[i];                              imageDuration.Add(delay*10); // store delays as milliseconds                          }                          break;                      }                  }
Magic Number,BrightIdeasSoftware,VirtualObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,DisableVirtualGroups,The following statement contains a magic number: const int LVM_ENABLEGROUPVIEW = 0x1000 + 157;
Magic Number,BrightIdeasSoftware,VirtualObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,EnableVirtualGroups,The following statement contains a magic number: const int LVM_ENABLEGROUPVIEW = 0x1000 + 157;
Missing Default,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following switch statement is missing a default case: switch (hti.Column.TextAlign)              {                  case HorizontalAlignment.Center:                      textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width)/2;                      break;                  case HorizontalAlignment.Right:                      textBounds.X = cellBounds.Right - textSize.Width;                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following switch statement is missing a default case: switch (nmcustomdraw.nmcd.dwDrawStage)              {                  case CDDS_PREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREPAINT");                      // Remember which items were drawn during this paint cycle                      if (prePaintLevel == 0)                          drawnItems = new List<OLVListItem>();                        // If there are any items' we have to wait until at least one has been painted                      // before we draw the overlays. If there aren't any items' there will never be any                      // item paint events' so we can draw the overlays whenever                      isAfterItemPaint = (GetItemCount() == 0);                      prePaintLevel++;                      base.WndProc(ref m);                        // Make sure that we get postpaint notifications                      m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_POSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTPAINT");                      prePaintLevel--;                        // When in group view' we have two problems. On XP' the control sends                      // a whole heap of PREPAINT/POSTPAINT messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays.                      // On Vista' we have a different problem. On Vista' the control nests calls                      // to PREPAINT and POSTPAINT. We only want to draw overlays on the outermost                      // POSTPAINT.                      if (prePaintLevel == 0 && (isMarqueSelecting || isAfterItemPaint))                      {                          shouldDoCustomDrawing = false;                            // Draw our overlays after everything has been drawn                          using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                          {                              DrawAllDecorations(g' drawnItems);                          }                      }                      break;                    case CDDS_ITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREPAINT");                        // When in group view on XP' the control send a whole heap of PREPAINT/POSTPAINT                      // messages before drawing any items.                      // We have to wait until after the first item paint before we draw overlays                      isAfterItemPaint = true;                        // This scheme of catching custom draw msgs works fine' except                      // for Tile view. Something in .NET's handling of Tile view causes lots                      // of invalidates and erases. So' we just ignore completely                      // .NET's handling of Tile view and let the underlying control                      // do its stuff. Strangely' if the Tile view is                      // completely owner drawn' those erasures don't happen.                      if (View == View.Tile)                      {                          if (OwnerDraw && ItemRenderer != null)                              base.WndProc(ref m);                      }                      else                      {                          base.WndProc(ref m);                      }                        m.Result = (IntPtr) ((int) m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);                      return true;                    case CDDS_ITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTPAINT");                      if (Columns.Count > 0)                      {                          OLVListItem olvi = GetItem((int) nmcustomdraw.nmcd.dwItemSpec);                          if (olvi != null)                              drawnItems.Add(olvi);                      }                      break;                    case CDDS_SUBITEMPREPAINT:                      //System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem));                        // There is a bug in the .NET framework which appears when column 0 of an owner drawn listview                      // is dragged to another column position.                      // The bounds calculation always returns the left edge of column 0 as being 0.                      // The effects of this bug become apparent                      // when the listview is scrolled horizontally: the control can think that column 0                      // is no longer visible (the horizontal scroll position is subtracted from the bounds' giving a                      // rectangle that is offscreen). In those circumstances' column 0 is not redraw because                      // the control thinks it is not visible and so does not trigger a DrawSubItem event.                        // To fix this problem' we have to detected the situation -- owner drawing column 0 in any column except 0 --                      // trigger our own DrawSubItem' and then prevent the default processing from occuring.                        // Are we owner drawing column 0 when it's in any column except 0?                      if (!OwnerDraw)                          return false;                        int columnIndex = nmcustomdraw.iSubItem;                      if (columnIndex != 0)                          return false;                        int displayIndex = Columns[0].DisplayIndex;                      if (displayIndex == 0)                          return false;                        var rowIndex = (int) nmcustomdraw.nmcd.dwItemSpec;                      OLVListItem item = GetItem(rowIndex);                      if (item == null)                          return false;                        // OK. We have the error condition' so lets do what the .NET framework should do.                      // Trigger an event to draw column 0 when it is not at display index 0                      using (Graphics g = Graphics.FromHdc(nmcustomdraw.nmcd.hdc))                      {                          // Correctly calculate the bounds of cell 0                          Rectangle r = item.GetSubItemBounds(0);                            // We can hardcode "0" here since we know we are only doing this for column 0                          var args = new DrawListViewSubItemEventArgs(g' r' item' item.SubItems[0]' rowIndex' 0'                                                                      Columns[0]'                                                                      (ListViewItemStates) nmcustomdraw.nmcd.uItemState);                          OnDrawSubItem(args);                            // If the event handler wants to do the default processing (i.e. DrawDefault = true)' we are stuck.                          // There is no way we can force the default drawing because of the bug in .NET we are trying to get around.                          Trace.Assert(!args.DrawDefault' "Default drawing is impossible in this situation");                      }                      m.Result = (IntPtr) 4;                        return true;                    case CDDS_SUBITEMPOSTPAINT:                      //System.Diagnostics.Debug.WriteLine("CDDS_SUBITEMPOSTPAINT");                      break;                        // I have included these stages' but it doesn't seem that they are sent for ListViews.                      // http://www.tech-archive.net/Archive/VC/microsoft.public.vc.mfc/2006-08/msg00220.html                    case CDDS_PREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_PREERASE");                      break;                    case CDDS_POSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_POSTERASE");                      break;                    case CDDS_ITEMPREERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREERASE");                      break;                    case CDDS_ITEMPOSTERASE:                      //System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTERASE");                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following switch statement is missing a default case: switch (nmhdr.code)              {                  case NM_CLICK:                      // The standard ListView does some strange stuff here when the list has checkboxes.                      // If you shift click on non-primary columns when FullRowSelect is true' the                       // checkedness of the selected rows changes.                       // We avoid all that by just saying we've handled this message.                      //System.Diagnostics.Debug.WriteLine("NM_CLICK");                      isMsgHandled = true;                      OnClick(EventArgs.Empty);                      break;                    case LVN_BEGINSCROLL:                      isMsgHandled = HandleBeginScroll(ref m);                      break;                    case LVN_ENDSCROLL:                      isMsgHandled = HandleEndScroll(ref m);                      break;                    case LVN_LINKCLICK:                      isMsgHandled = HandleLinkClick(ref m);                      break;                    case LVN_MARQUEEBEGIN:                      //System.Diagnostics.Debug.WriteLine("LVN_MARQUEEBEGIN");                      isMarqueSelecting = true;                      break;                    case LVN_GETINFOTIP:                      //System.Diagnostics.Debug.WriteLine("LVN_GETINFOTIP");                      // When virtual lists are in SmallIcon view' they generates tooltip message with invalid item indicies.                      var nmGetInfoTip = (NativeMethods.NMLVGETINFOTIP) m.GetLParam(typeof (NativeMethods.NMLVGETINFOTIP));                      isMsgHandled = nmGetInfoTip.iItem >= GetItemCount();                      break;                    case NM_RELEASEDCAPTURE:                      //System.Diagnostics.Debug.WriteLine("NM_RELEASEDCAPTURE");                      isMarqueSelecting = false;                      Invalidate();                      break;                    case NM_CUSTOMDRAW:                      //System.Diagnostics.Debug.WriteLine("NM_CUSTOMDRAW");                      isMsgHandled = HandleCustomDraw(ref m);                      break;                    case NM_DBLCLK:                      // The default behavior of a .NET ListView with checkboxes is to toggle the checkbox on                      // double-click. That's just silly' if you ask me :)                      if (CheckBoxes)                      {                          // How do we make ListView not do that silliness? We could just ignore the message                          // but the last part of the base code sets up state information' and without that                          // state' the ListView doesn't trigger MouseDoubleClick events. So we fake a                          // right button double click event' which sets up the same state' but without                          // toggling the checkbox.                          nmhdr.code = NM_RDBLCLK;                          Marshal.StructureToPtr(nmhdr' m.LParam' false);                      }                      break;                    case LVN_ITEMCHANGED:                      //System.Diagnostics.Debug.WriteLine("LVN_ITEMCHANGED");                      var nmlistviewPtr2 = (NativeMethods.NMLISTVIEW) m.GetLParam(typeof (NativeMethods.NMLISTVIEW));                      if ((nmlistviewPtr2.uChanged & LVIF_STATE) != 0)                      {                          CheckState currentValue = CalculateCheckState(nmlistviewPtr2.uOldState);                          CheckState newCheckValue = CalculateCheckState(nmlistviewPtr2.uNewState);                          if (currentValue != newCheckValue)                          {                              // Remove the state indicies so that we don't trigger the OnItemChecked method                              // when we call our base method after exiting this method                              nmlistviewPtr2.uOldState = (nmlistviewPtr2.uOldState & 0x0FFF);                              nmlistviewPtr2.uNewState = (nmlistviewPtr2.uNewState & 0x0FFF);                              Marshal.StructureToPtr(nmlistviewPtr2' m.LParam' false);                          }                      }                      break;                    case LVN_ITEMCHANGING:                      //System.Diagnostics.Debug.WriteLine("LVN_ITEMCHANGING");                      var nmlistviewPtr = (NativeMethods.NMLISTVIEW) m.GetLParam(typeof (NativeMethods.NMLISTVIEW));                      if ((nmlistviewPtr.uChanged & LVIF_STATE) != 0)                      {                          CheckState currentValue = CalculateCheckState(nmlistviewPtr.uOldState);                          CheckState newCheckValue = CalculateCheckState(nmlistviewPtr.uNewState);                            if (currentValue != newCheckValue)                          {                              // Prevent the base method from seeing the state change'                              // since we handled it elsewhere                              nmlistviewPtr.uChanged &= ~LVIF_STATE;                              Marshal.StructureToPtr(nmlistviewPtr' m.LParam' false);                          }                      }                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following switch statement is missing a default case: switch (nmheader.nhdr.code)              {                  case NM_CUSTOMDRAW:                      if (!OwnerDrawnHeader)                          isMsgHandled = HeaderControl.HandleHeaderCustomDraw(ref m);                      break;                    case HDN_ITEMCLICKA:                  case HDN_ITEMCLICKW:                      if (!PossibleFinishCellEditing())                      {                          m.Result = (IntPtr) 1; // prevent the change from happening                          isMsgHandled = true;                      }                      break;                    case HDN_DIVIDERDBLCLICKA:                  case HDN_DIVIDERDBLCLICKW:                  case HDN_BEGINTRACKA:                  case HDN_BEGINTRACKW:                      if (!PossibleFinishCellEditing())                      {                          m.Result = (IntPtr) 1; // prevent the change from happening                          isMsgHandled = true;                          break;                      }                      if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count)                      {                          OLVColumn column = GetColumn(nmheader.iItem);                          // Space filling columns can't be dragged or double-click resized                          if (column.FillsFreeSpace)                          {                              m.Result = (IntPtr) 1; // prevent the change from happening                              isMsgHandled = true;                          }                      }                      break;                  case HDN_ENDTRACKA:                  case HDN_ENDTRACKW:                      if (ShowGroups)                          ResizeLastGroup();                      break;                  case HDN_TRACKA:                  case HDN_TRACKW:                      if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count)                      {                          var hditem =                              (NativeMethods.HDITEM)                              Marshal.PtrToStructure(nmheader.pHDITEM' typeof (NativeMethods.HDITEM));                          OLVColumn column = GetColumn(nmheader.iItem);                          if (hditem.cxy < column.MinimumWidth)                              hditem.cxy = column.MinimumWidth;                          else if (column.MaximumWidth != -1 && hditem.cxy > column.MaximumWidth)                              hditem.cxy = column.MaximumWidth;                          Marshal.StructureToPtr(hditem' nmheader.pHDITEM' false);                      }                      break;                    case HDN_ITEMCHANGINGA:                  case HDN_ITEMCHANGINGW:                      nmheader = (NativeMethods.NMHEADER) m.GetLParam(typeof (NativeMethods.NMHEADER));                      if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count)                      {                          var hditem =                              (NativeMethods.HDITEM)                              Marshal.PtrToStructure(nmheader.pHDITEM' typeof (NativeMethods.HDITEM));                          OLVColumn column = GetColumn(nmheader.iItem);                          // Check the mask to see if the width field is valid' and if it is' make sure it's within range                          if ((hditem.mask & 1) == 1)                          {                              if (hditem.cxy < column.MinimumWidth ||                                  (column.MaximumWidth != -1 && hditem.cxy > column.MaximumWidth))                              {                                  m.Result = (IntPtr) 1; // prevent the change from happening                                  isMsgHandled = true;                              }                          }                      }                      break;                    case ToolTipControl.TTN_SHOW:                      //System.Diagnostics.Debug.WriteLine("olv TTN_SHOW");                      Trace.Assert(CellToolTip.Handle == nmheader.nhdr.hwndFrom);                      isMsgHandled = CellToolTip.HandleShow(ref m);                      break;                    case ToolTipControl.TTN_POP:                      //System.Diagnostics.Debug.WriteLine("olv TTN_POP");                      Trace.Assert(CellToolTip.Handle == nmheader.nhdr.hwndFrom);                      isMsgHandled = CellToolTip.HandlePop(ref m);                      break;                    case ToolTipControl.TTN_GETDISPINFO:                      //System.Diagnostics.Debug.WriteLine("olv TTN_GETDISPINFO");                      Trace.Assert(CellToolTip.Handle == nmheader.nhdr.hwndFrom);                      isMsgHandled = CellToolTip.HandleGetDispInfo(ref m);                      break;              }
Missing Default,BrightIdeasSoftware,ObjectListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ToggleSubItemCheckBox,The following switch statement is missing a default case: switch (args.NewValue)              {                  case CheckState.Checked:                      CheckSubItem(rowObject' column);                      break;                  case CheckState.Indeterminate:                      CheckIndeterminateSubItem(rowObject' column);                      break;                  case CheckState.Unchecked:                      UncheckSubItem(rowObject' column);                      break;              }
Missing Default,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following switch statement is missing a default case: switch (corner)              {                  case ContentAlignment.TopLeft:                      return pt;                  case ContentAlignment.TopCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y);                  case ContentAlignment.TopRight:                      return new Point(pt.X - size.Width' pt.Y);                  case ContentAlignment.MiddleLeft:                      return new Point(pt.X' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - (size.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(pt.X - size.Width' pt.Y - (size.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(pt.X' pt.Y - size.Height);                  case ContentAlignment.BottomCenter:                      return new Point(pt.X - (size.Width/2)' pt.Y - size.Height);                  case ContentAlignment.BottomRight:                      return new Point(pt.X - size.Width' pt.Y - size.Height);              }
Missing Default,BrightIdeasSoftware,GraphicAdornment,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following switch statement is missing a default case: switch (corner)              {                  case ContentAlignment.TopLeft:                      return new Point(r.Left' r.Top);                  case ContentAlignment.TopCenter:                      return new Point(r.X + (r.Width/2)' r.Top);                  case ContentAlignment.TopRight:                      return new Point(r.Right' r.Top);                  case ContentAlignment.MiddleLeft:                      return new Point(r.Left' r.Top + (r.Height/2));                  case ContentAlignment.MiddleCenter:                      return new Point(r.X + (r.Width/2)' r.Top + (r.Height/2));                  case ContentAlignment.MiddleRight:                      return new Point(r.Right' r.Top + (r.Height/2));                  case ContentAlignment.BottomLeft:                      return new Point(r.Left' r.Bottom);                  case ContentAlignment.BottomCenter:                      return new Point(r.X + (r.Width/2)' r.Bottom);                  case ContentAlignment.BottomRight:                      return new Point(r.Right' r.Bottom);              }
Missing Default,BrightIdeasSoftware,DataSourceAdapter,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType)              {                  case ListChangedType.Reset:                      HandleListChanged_Reset(e);                      break;                    case ListChangedType.ItemChanged:                      HandleListChanged_ItemChanged(e);                      break;                    case ListChangedType.ItemAdded:                      HandleListChanged_ItemAdded(e);                      break;                        // An item has gone away.                  case ListChangedType.ItemDeleted:                      HandleListChanged_ItemDeleted(e);                      break;                        // An item has changed its index.                  case ListChangedType.ItemMoved:                      HandleListChanged_ItemMoved(e);                      break;                        // Something has changed in the metadata.                      // CHECK: When are these events actually fired?                  case ListChangedType.PropertyDescriptorAdded:                  case ListChangedType.PropertyDescriptorChanged:                  case ListChangedType.PropertyDescriptorDeleted:                      HandleListChanged_MetadataChanged(e);                      break;              }
Missing Default,BrightIdeasSoftware,SimpleDropSink,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedback,The following switch statement is missing a default case: switch (DropTargetLocation)              {                  case DropTargetLocation.Background:                      DrawFeedbackBackgroundTarget(g' bounds);                      break;                  case DropTargetLocation.Item:                      DrawFeedbackItemTarget(g' bounds);                      break;                  case DropTargetLocation.AboveItem:                      DrawFeedbackAboveItemTarget(g' bounds);                      break;                  case DropTargetLocation.BelowItem:                      DrawFeedbackBelowItemTarget(g' bounds);                      break;              }
Missing Default,BrightIdeasSoftware,TreeListView,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Left:                      // If the branch is expanded' collapse it. If it's collapsed'                      // select the parent of the branch.                      if (br.IsExpanded)                          Collapse(modelObject);                      else                      {                          if (br.ParentBranch != null && br.ParentBranch.Model != null)                              SelectObject(br.ParentBranch.Model' true);                      }                      e.Handled = true;                      break;                    case Keys.Right:                      // If the branch is expanded' select the first child.                      // If it isn't expanded and can be' expand it.                      if (br.IsExpanded)                      {                          List<Branch> filtered = br.FilteredChildBranches;                          if (filtered.Count > 0)                              SelectObject(filtered[0].Model' true);                      }                      else                      {                          if (br.CanExpand)                              Expand(modelObject);                      }                      e.Handled = true;                      break;              }
Missing Default,BrightIdeasSoftware,GlassPanelForm,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                      // Ignore all mouse interactions                  case WM_NCHITTEST:                      m.Result = (IntPtr) HTTRANSPARENT;                      break;              }
Missing Default,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case WM_SETCURSOR:                      if (!HandleSetCursor(ref m))                          return;                      break;                    case WM_NOTIFY:                      if (!HandleNotify(ref m))                          return;                      break;                    case WM_MOUSEMOVE:                      if (!HandleMouseMove(ref m))                          return;                      break;                    case HDM_LAYOUT:                      if (!HandleLayout(ref m))                          return;                      break;                    case WM_DESTROY:                      if (!HandleDestroy(ref m))                          return;                      break;              }
Missing Default,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleNotify,The following switch statement is missing a default case: switch (nmhdr.code)              {                  case ToolTipControl.TTN_SHOW:                      //System.Diagnostics.Debug.WriteLine("hdr TTN_SHOW");                      //System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);                      return ToolTip.HandleShow(ref m);                    case ToolTipControl.TTN_POP:                      //System.Diagnostics.Debug.WriteLine("hdr TTN_POP");                      //System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);                      return ToolTip.HandlePop(ref m);                    case ToolTipControl.TTN_GETDISPINFO:                      //System.Diagnostics.Debug.WriteLine("hdr TTN_GETDISPINFO");                      //System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);                      return ToolTip.HandleGetDispInfo(ref m);              }
Missing Default,BrightIdeasSoftware,HeaderControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following switch statement is missing a default case: switch (nmcustomdraw.dwDrawStage)              {                  case CDDS_PREPAINT:                      cachedNeedsCustomDraw = NeedsCustomDraw();                      m.Result = (IntPtr) CDRF_NOTIFYITEMDRAW;                      return true;                    case CDDS_ITEMPREPAINT:                      int columnIndex = nmcustomdraw.dwItemSpec.ToInt32();                      OLVColumn column = ListView.GetColumn(columnIndex);                        // These don't work when visual styles are enabled                      //NativeMethods.SetBkColor(nmcustomdraw.hdc' ColorTranslator.ToWin32(Color.Red));                      //NativeMethods.SetTextColor(nmcustomdraw.hdc' ColorTranslator.ToWin32(Color.Blue));                      //m.Result = IntPtr.Zero;                        if (cachedNeedsCustomDraw)                      {                          using (Graphics g = Graphics.FromHdc(nmcustomdraw.hdc))                          {                              g.TextRenderingHint = ObjectListView.TextRenderingHint;                              CustomDrawHeaderCell(g' columnIndex' nmcustomdraw.uItemState);                          }                          m.Result = (IntPtr) CDRF_SKIPDEFAULT;                      }                      else                      {                          const int CDIS_SELECTED = 1;                          bool isPressed = ((nmcustomdraw.uItemState & CDIS_SELECTED) == CDIS_SELECTED);                            Font f = CalculateFont(column' columnIndex == ColumnIndexUnderCursor' isPressed);                            fontHandle = f.ToHfont();                          NativeMethods.SelectObject(nmcustomdraw.hdc' fontHandle);                            m.Result = (IntPtr) (CDRF_NEWFONT | CDRF_NOTIFYPOSTPAINT);                      }                        return true;                    case CDDS_ITEMPOSTPAINT:                      if (fontHandle != IntPtr.Zero)                      {                          NativeMethods.DeleteObject(fontHandle);                          fontHandle = IntPtr.Zero;                      }                      break;              }
Missing Default,BrightIdeasSoftware,CellEditKeyEngine,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleRowChange,The following switch statement is missing a default case: switch (atEdgeBehaviour)              {                  case CellEditAtEdgeBehaviour.Ignore:                      break;                  case CellEditAtEdgeBehaviour.EndEdit:                      ListView.PossibleFinishCellEditing();                      break;                  case CellEditAtEdgeBehaviour.Wrap:                      adjacentOlvi = GetAdjacentItemOrNull(null' isGoingUp);                      StartCellEditIfDifferent(adjacentOlvi' subItemIndex);                      break;                  case CellEditAtEdgeBehaviour.ChangeColumn:                      // Figure out the next editable column                      List<OLVColumn> editableColumnsInDisplayOrder = EditableColumnsInDisplayOrder;                      int displayIndex = Math.Max(0'                                                  editableColumnsInDisplayOrder.IndexOf(ListView.GetColumn(subItemIndex)));                      if (isGoingUp)                          displayIndex = (editableColumnsInDisplayOrder.Count + displayIndex - 1)%                                         editableColumnsInDisplayOrder.Count;                      else                          displayIndex = (displayIndex + 1)%editableColumnsInDisplayOrder.Count;                      subItemIndex = editableColumnsInDisplayOrder[displayIndex].Index;                        // Wrap to the next row and start the cell edit                      adjacentOlvi = GetAdjacentItemOrNull(null' isGoingUp);                      StartCellEditIfDifferent(adjacentOlvi' subItemIndex);                      break;              }
Missing Default,BrightIdeasSoftware,CellEditKeyEngine,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,The following switch statement is missing a default case: switch (atEdgeBehaviour)                  {                      case CellEditAtEdgeBehaviour.Ignore:                          return;                      case CellEditAtEdgeBehaviour.EndEdit:                          HandleEndEdit();                          return;                      case CellEditAtEdgeBehaviour.ChangeRow:                      case CellEditAtEdgeBehaviour.Wrap:                          if (atEdgeBehaviour == CellEditAtEdgeBehaviour.ChangeRow)                              olvi = GetAdjacentItem(olvi' displayIndex == 0);                          if (isGoingLeft)                              displayIndex = editableColumns.Count - 1;                          else                              displayIndex = 0;                          break;                  }
Missing Default,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following switch statement is missing a default case: switch (Column.TextAlign)                  {                      case HorizontalAlignment.Left:                          r.X = outer.Left;                          break;                      case HorizontalAlignment.Center:                          r.X = outer.Left + ((outer.Width - inner.Width)/2);                          break;                      case HorizontalAlignment.Right:                          r.X = outer.Right - inner.Width - 1;                          break;                  }
Missing Default,BrightIdeasSoftware,BaseRenderer,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following switch statement is missing a default case: switch (switchValue)              {                  case 0x00:                      boxState = CheckBoxState.UncheckedNormal;                      break;                  case 0x01:                      boxState = CheckBoxState.UncheckedHot;                      break;                  case 0x10:                      boxState = CheckBoxState.CheckedNormal;                      break;                  case 0x11:                      boxState = CheckBoxState.CheckedHot;                      break;                  case 0x20:                      boxState = CheckBoxState.MixedNormal;                      break;                  case 0x21:                      boxState = CheckBoxState.MixedHot;                      break;              }
Missing Default,BrightIdeasSoftware,ToolTipControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,HandleReflectNotify,The following switch statement is missing a default case: switch (nmheader.nhdr.code)              {                  case TTN_SHOW:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_SHOW");                      if (HandleShow(ref msg))                          return true;                      break;                  case TTN_POP:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_POP");                      if (HandlePop(ref msg))                          return true;                      break;                  case TTN_LINKCLICK:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_LINKCLICK");                      if (HandleLinkClick(ref msg))                          return true;                      break;                  case TTN_GETDISPINFO:                      //System.Diagnostics.Trace.WriteLine("reflect TTN_GETDISPINFO");                      if (HandleGetDispInfo(ref msg))                          return true;                      break;              }
Missing Default,BrightIdeasSoftware,ToolTipControl,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,WndProc,The following switch statement is missing a default case: switch (msg.Msg)              {                  case 0x4E: // WM_NOTIFY                      if (!HandleNotify(ref msg))                          return;                      break;                    case 0x204E: // WM_REFLECT_NOTIFY                      if (!HandleReflectNotify(ref msg))                          return;                      break;              }
Missing Default,BrightIdeasSoftware,TypedColumn<T>,C:\repos\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\TypedObjectListView.cs,GeneratePart,The following switch statement is missing a default case: switch (info.MemberType)              {                  case MemberTypes.Method:                      var mi = (MethodInfo) info;                      if (mi.IsVirtual)                          il.Emit(OpCodes.Callvirt' mi);                      else                          il.Emit(OpCodes.Call' mi);                      resultType = mi.ReturnType;                      break;                  case MemberTypes.Property:                      var pi = (PropertyInfo) info;                      il.Emit(OpCodes.Call' pi.GetGetMethod());                      resultType = pi.PropertyType;                      break;                  case MemberTypes.Field:                      var fi = (FieldInfo) info;                      il.Emit(OpCodes.Ldfld' fi);                      resultType = fi.FieldType;                      break;              }
