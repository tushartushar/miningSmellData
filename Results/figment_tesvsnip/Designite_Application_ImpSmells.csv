Implementation smell,Namespace,Class,File,Method,Description
Long Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The method has 115 lines of code.
Long Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The method has 155 lines of code.
Long Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The method has 1196 lines of code.
Long Method,TESVSnip.UI.Forms,CompressSettings,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,InitializeComponent,The method has 134 lines of code.
Long Method,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The method has 105 lines of code.
Long Method,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The method has 104 lines of code.
Long Method,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The method has 207 lines of code.
Long Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The method has 269 lines of code.
Long Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The method has 139 lines of code.
Long Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The method has 105 lines of code.
Long Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,The method has 135 lines of code.
Long Method,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The method has 206 lines of code.
Long Method,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,InitializeComponent,The method has 182 lines of code.
Long Method,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,InitializeComponent,The method has 157 lines of code.
Long Method,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,InitializeComponent,The method has 388 lines of code.
Long Method,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The method has 202 lines of code.
Long Method,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method has 342 lines of code.
Long Method,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The method has 164 lines of code.
Long Method,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The method has 166 lines of code.
Long Method,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The method has 143 lines of code.
Long Method,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The method has 123 lines of code.
Long Method,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The method has 118 lines of code.
Long Method,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The method has 113 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The method has 151 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The method has 101 lines of code.
Long Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The method has 118 lines of code.
Long Method,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The method has 145 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The method has 179 lines of code.
Long Method,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The method has 296 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The method has 168 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The method has 106 lines of code.
Long Method,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The method has 273 lines of code.
Long Method,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The method has 120 lines of code.
Long Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The method has 178 lines of code.
Complex Method,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,SetupGameDirectory,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,AddLanguageUIOption,Cyclomatic complexity of the method is 14
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,IncrementalSearch,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,Cyclomatic complexity of the method is 13
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse2,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileAllToolStripMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileScriptToolStripMenuItem_Click,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,mergeRecordsXMLToolStripMenuItem_Click,Cyclomatic complexity of the method is 17
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,exportStringsToFileToolStripMenuItem_Click,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,Cyclomatic complexity of the method is 50
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,Cyclomatic complexity of the method is 20
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,martigensToolStripMenuItem_Click,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PreFilterMessage,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,GetRecordFilter,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,htmlContent_OnLinkClicked,Cyclomatic complexity of the method is 17
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,searchToolStripMenuItem_Click,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,openListToolStripMenuItem_Click,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,editScriptsToolStripMenuItem_DropDownItemClicked,Cyclomatic complexity of the method is 13
Complex Method,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,EditRecords,Cyclomatic complexity of the method is 15
Complex Method,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,GetAssignmentType,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,Cyclomatic complexity of the method is 65
Complex Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,CheckBox_CheckedChanged,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,Cyclomatic complexity of the method is 40
Complex Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,Cyclomatic complexity of the method is 23
Complex Method,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,Cyclomatic complexity of the method is 59
Complex Method,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,GetStringDict,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,Cyclomatic complexity of the method is 40
Complex Method,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,Cyclomatic complexity of the method is 35
Complex Method,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.Controls,CustomTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\Controls\CustomTreeView.cs,WndProc,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,Cyclomatic complexity of the method is 132
Complex Method,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,Cyclomatic complexity of the method is 36
Complex Method,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,Cyclomatic complexity of the method is 17
Complex Method,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,AddFile,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,Process,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,Cyclomatic complexity of the method is 35
Complex Method,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,CreateSubrecords,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,MergeRecord,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,Cyclomatic complexity of the method is 21
Complex Method,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,UpdateAllControls,Cyclomatic complexity of the method is 20
Complex Method,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,cboOptions_SelectedIndexChanged,Cyclomatic complexity of the method is 28
Complex Method,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,Cyclomatic complexity of the method is 19
Complex Method,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,cboFlags_ItemCheck,Cyclomatic complexity of the method is 27
Complex Method,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateAllControls,Cyclomatic complexity of the method is 11
Complex Method,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,Cyclomatic complexity of the method is 47
Complex Method,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,Cyclomatic complexity of the method is 52
Complex Method,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,DataSource_ListChanged,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,Cyclomatic complexity of the method is 13
Complex Method,TESVSnip.Windows.Controls,ObjectBindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,DataSource_ListChanged,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,AutoSizeDropDown,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,Cyclomatic complexity of the method is 17
Complex Method,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FitRectOnDesktop,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.Windows.Controls,GripRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,OnDispInfoNotice,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,Cyclomatic complexity of the method is 34
Complex Method,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,_vScrollBar_Scroll,Cyclomatic complexity of the method is 33
Complex Method,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,OnPaintBackground,Cyclomatic complexity of the method is 8
Complex Method,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,Cyclomatic complexity of the method is 18
Complex Method,BrightIdeasSoftware,CellEditKeyEngine,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleKey,Cyclomatic complexity of the method is 18
Complex Method,BrightIdeasSoftware,CellEditKeyEngine,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleRowChange,Cyclomatic complexity of the method is 19
Complex Method,BrightIdeasSoftware,CellEditKeyEngine,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedback,Cyclomatic complexity of the method is 13
Complex Method,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CalculateDropTarget,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,RearrangingDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,RearrangeModels,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,FilterMenuBuilder,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\FilterMenuBuilder.cs,Cluster,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,FilterMenuBuilder,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Filtering\FilterMenuBuilder.cs,HandleSelectAllItem,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,DataSourceAdapter,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,Cyclomatic complexity of the method is 20
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeGroups,Cyclomatic complexity of the method is 10
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildList,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,RestoreState,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,WndProc,Cyclomatic complexity of the method is 66
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,Cyclomatic complexity of the method is 13
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,Cyclomatic complexity of the method is 46
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,Cyclomatic complexity of the method is 43
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,Cyclomatic complexity of the method is 51
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeColumnCommandMenu,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ResizeFreeSpaceFillingColumns,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ToggleSubItemCheckBox,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DoSort,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,FillInValues,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ApplyRowStyle,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DrawAllDecorations,Cyclomatic complexity of the method is 15
Complex Method,BrightIdeasSoftware,TreeListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,OnKeyDown,Cyclomatic complexity of the method is 14
Complex Method,BrightIdeasSoftware,OLVGroup,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Groups.cs,AsNativeGroup,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,SimpleMunger,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,ResolveName,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,OlvListViewHitTestInfo,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\OlvListViewHitTestInfo.cs,OlvListViewHitTestInfo,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,FastListGroupingStrategy,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,GetGroups,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,Cyclomatic complexity of the method is 18
Complex Method,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,CheckStateRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetCheckBoxState,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,ImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetImageFromAspect,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,BarRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,Render,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,DescribedTaskRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawDescribedTask,Cyclomatic complexity of the method is 15
Complex Method,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,Bind,Cyclomatic complexity of the method is 11
Complex Method,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,Cyclomatic complexity of the method is 15
Complex Method,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,Cyclomatic complexity of the method is 14
Complex Method,BrightIdeasSoftware,ToolTipControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,ToolTipControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,HandleReflectNotify,Cyclomatic complexity of the method is 12
Complex Method,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,BrightIdeasSoftware,Generator,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\Generator.cs,GenerateColumns,Cyclomatic complexity of the method is 9
Complex Method,BrightIdeasSoftware,TypedColumn,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\TypedObjectListView.cs,GeneratePart,Cyclomatic complexity of the method is 18
Complex Method,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,WmReflectNotify,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PasteFromClipboard,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_KeyDown,Cyclomatic complexity of the method is 34
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_ModelCanDrop,Cyclomatic complexity of the method is 12
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_ModelDropped,Cyclomatic complexity of the method is 15
Complex Method,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Opening,Cyclomatic complexity of the method is 17
Complex Method,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,Cyclomatic complexity of the method is 26
Complex Method,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,toolStripSelectColumns_Click,Cyclomatic complexity of the method is 8
Complex Method,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,Save,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,Cyclomatic complexity of the method is 26
Complex Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecord,Cyclomatic complexity of the method is 13
Complex Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecordHex,Cyclomatic complexity of the method is 10
Complex Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,PasteSubRecord,Cyclomatic complexity of the method is 9
Complex Method,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,toolStripInsertRecord_DropDownOpening,Cyclomatic complexity of the method is 11
Long Parameter List,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,IncrementalSearch,The method has 5 parameters.
Long Parameter List,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,MediumLevelRecordEditor,The method has 5 parameters.
Long Parameter List,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The method has 5 parameters.
Long Parameter List,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenu,The method has 5 parameters.
Long Parameter List,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,Init,The method has 5 parameters.
Long Parameter List,JWC,MruStripMenuInline,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The method has 5 parameters.
Long Parameter List,JWC,MruStripMenuInline,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The method has 5 parameters.
Long Parameter List,JWC,MruStripMenuInline,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The method has 6 parameters.
Long Parameter List,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,AddBindingColumn,The method has 5 parameters.
Long Parameter List,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,AddBindingColumn,The method has 5 parameters.
Long Parameter List,TESVSnip.Windows.Controls,ObjectBindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,AddBindingColumn,The method has 5 parameters.
Long Parameter List,TESVSnip.Windows.Controls,ObjectBindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,AddBindingColumn,The method has 5 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,BitBlt,The method has 9 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,DrawText,The method has 5 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,Rectangle,The method has 5 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,RoundRect,The method has 7 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,TESVSnip.Windows.Controls,PopupControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Show,The method has 6 parameters.
Long Parameter List,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintHexStringSelected,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildGroups,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CollectGroupingParameters,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,CellEditEventArgs,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,CellEditEventArgs,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,BeforeSortingEventArgs,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,BeforeSortingEventArgs,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,AfterSortingEventArgs,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,AfterSortingEventArgs,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,SubItemCheckingEventArgs,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,SubItemCheckingEventArgs,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,GroupingParameters,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\GroupingParameters.cs,GroupingParameters,The method has 10 parameters.
Long Parameter List,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,ImageList_Draw,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetWindowPos,The method has 7 parameters.
Long Parameter List,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetBackgroundImage,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,DrawImageList,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,AbstractVirtualListDataSource,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualListDataSource.cs,DefaultSearchText,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,OLVColumn,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,MakeGroupies,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,OLVColumn,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\OLVColumn.cs,MakeEqualGroupies,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CreateAlignedRectangle,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,ImageAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawImage,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardHitTest,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawSubstringFrame,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,BarRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,BarRenderer,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,DescribedTaskRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawDescribedTask,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedBackground,The method has 5 parameters.
Long Parameter List,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawText,The method has 6 parameters.
Long Parameter List,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The method has 7 parameters.
Long Parameter List,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The method has 5 parameters.
Long Identifier,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the parameter dockPaneStripToolWindowGradient1 is 32.
Long Identifier,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The length of the parameter MILLISECONDS_BETWEEN_KEYPRESSES is 31.
Long Statement,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,SetupApplicationDirectory,The length of the statement  "		if (System.String.Compare (dir.Name' "Debug"' System.StringComparison.OrdinalIgnoreCase) == 0 || System.String.Compare (dir.Name' "Release"' System.StringComparison.OrdinalIgnoreCase) == 0) " is 189.
Long Statement,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,SetupScriptHostDirectory,The length of the statement  "		using (var key = Registry.LocalMachine.OpenSubKey (Environment.Is64BitOperatingSystem ? @"SOFTWARE\Wow6432Node\IronPython\2.7\InstallPath" : @"SOFTWARE\IronPython\2.7\InstallPath")) { " is 183.
Long Statement,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,SetupGameDirectory,The length of the statement  "		string msg = "Options.SetupGameDirectory" + Environment.NewLine + "Message: " + ex.Message + Environment.NewLine + "StackTrace: " + ex.StackTrace; " is 146.
Long Statement,TESVSnip.UI.Services,Settings,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Settings.cs,GetWindowPosition,The length of the statement  "		f.Location = new Point (int.Parse (xe.Attributes.GetNamedItem ("left").Value)' int.Parse (xe.Attributes.GetNamedItem ("top").Value)); " is 133.
Long Statement,TESVSnip.UI.Services,Settings,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Settings.cs,GetWindowPosition,The length of the statement  "		f.ClientSize = new Size (int.Parse (xe.Attributes.GetNamedItem ("width").Value)' int.Parse (xe.Attributes.GetNamedItem ("height").Value)); " is 138.
Long Statement,TESVSnip.UI.Services,Settings,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Settings.cs,Init,The length of the statement  "			MessageBox.Show (TranslateUI.TranslateUiGlobalization.ResManager.GetString (name: "Domain_Services_Settings_UnableLoadSettings")' TranslateUI.TranslateUiGlobalization.ResManager.GetString (name: "Global_Msg_TESVsnipError")); " is 224.
Long Statement,TESVSnip.UI.Services,Scripting,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Scripting.cs,Initialize,The length of the statement  "		if (!string.IsNullOrWhiteSpace (Options.Value.IronPythonDirectory) && Directory.Exists (Options.Value.IronPythonDirectory)) { " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	fileToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_fileToolStripMenuItem"); " is 130.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	newToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_newToolStripMenuItem"); " is 128.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	openNewPluginToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_openNewPluginToolStripMenuItem"); " is 148.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	saveToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_saveToolStripMenuItem"); " is 130.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	saveAsToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_saveAsToolStripMenuItem"); " is 134.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	closeToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_closeToolStripMenuItem"); " is 132.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	closeAllToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_closeAllToolStripMenuItem"); " is 138.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	reloadXmlToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_reloadXmlToolStripMenuItem"); " is 140.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LocalizeApp,The length of the statement  "	exitToolStripMenuItem.Text = TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_MainView_exitToolStripMenuItem"); " is 130.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,giveSelectionNewFormID,The length of the statement  "		this.SendStatusText (string.Format ("Changed {0} FormID's and updated {1} references"' formCount' refCount)' SystemColors.ControlText); " is 135.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The length of the statement  "	if (MessageBox.Show (@"This may delete records from the esp. Are you sure you wish to continue?"' @"Warning"' MessageBoxButtons.YesNo) != DialogResult.Yes) { " is 157.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse2,The length of the statement  "			if (r2.Name == r3.Name && r2.Size == r3.Size && r2.SubRecords.Count == r3.SubRecords.Count && r2.Flags1 == r3.Flags1 && r2.Flags2 == r3.Flags2 && r2.Flags3 == r3.Flags3) { " is 171.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileAllToolStripMenuItem_Click,The length of the statement  "								thingy += r.DescriptiveName + Environment.NewLine + "Size changed from " + size + " to " + sr.Size + Environment.NewLine + Environment.NewLine; " is 143.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,compileScriptToolStripMenuItem_Click,The length of the statement  "				while (i < srs.Count && (srs [i].Name == "SCTX" || srs [i].Name == "SLSD" || srs [i].Name == "SCVR" || srs [i].Name == "SCRO" || srs [i].Name == "SCRV")) { " is 155.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,copyReferencedStringsFromMastersToolStripMenuItem_Click,The length of the statement  "		MessageBox.Show ("Plugin does not have any Masters. Use 'Add Masters...' to add references before running."' Resources.ErrorText); " is 130.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,exportStringsToFileToolStripMenuItem_Click,The length of the statement  "		if (string.IsNullOrEmpty (Settings.Default.DefaultSaveFolder) || !Directory.Exists (Settings.Default.DefaultSaveFolder)) { " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,exportStringsToFileToolStripMenuItem_Click,The length of the statement  "		dlg.FileName = string.Format ("{0}_{1}.xml"' Path.GetFileNameWithoutExtension (plugin.Name)' TESVSnip.Domain.Properties.Settings.Default.LocalizationName); " is 155.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,findDuplicatedFormIDToolStripMenuItem_Click,The length of the statement  "			this.SendStatusText (string.Format ("Record FormID duplicates {0}"' ids [record.FormID].DescriptiveName)' Color.OrangeRed); " is 123.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The length of the statement  "						sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />"); " is 205.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The length of the statement  "						sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />"); " is 205.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The length of the statement  "						sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />"); " is 205.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,The length of the statement  "			if (string.IsNullOrEmpty (Settings.Default.DefaultSaveFolder) || !Directory.Exists (Settings.Default.DefaultSaveFolder)) { " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,The length of the statement  "			dlg.FileName = string.Format ("{0}_{1}.xml"' Path.GetFileNameWithoutExtension (plugin.Name)' TESVSnip.Domain.Properties.Settings.Default.LocalizationName); " is 155.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,internalizeStringReferencesToolStripMenuItem_Click,The length of the statement  "		MessageBox.Show ("Plugin does not have any Masters. Use 'Add Masters...' to add references before running."' Resources.ErrorText); " is 130.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,reorderSubrecordsToolStripMenuItem_Click,The length of the statement  "	var records = this.PluginTree.SelectedRecords.SelectMany (rec => rec.Enumerate (x => true).OfType<Record> ().Distinct ()).ToList (); " is 132.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveStringsToolStripMenuItem_Click,The length of the statement  "		if (string.IsNullOrEmpty (Settings.Default.DefaultSaveFolder) || !Directory.Exists (Settings.Default.DefaultSaveFolder)) { " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveStringsToolStripMenuItem_Click,The length of the statement  "		dlg.FileName = string.Format ("{0}_{1}.STRINGS"' Path.GetFileNameWithoutExtension (plugin.Name)' Domain.Properties.Settings.Default.LocalizationName); " is 150.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveStringsToolStripMenuItem_Click,The length of the statement  "			plugin.SaveStrings (Path.Combine (Path.GetDirectoryName (dlg.FileName)' Path.GetFileNameWithoutExtension (dlg.FileName))); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,stripEDIDsToolStripMenuItem_Click,The length of the statement  "	if (MessageBox.Show (Resources.GeneralSpellWarningInquiry' Resources.WarningText' MessageBoxButtons.YesNo) != DialogResult.Yes) { " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "	if (MessageBox.Show (TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_Spell_ReduceFormVersionTo40")' TranslateUI.TranslateUiGlobalization.ResManager.GetString ("Application_Title")' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2) == DialogResult.No) { " is 305.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "		this.SendStatusText (TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_Spell_ReduceFormVersionTo40Aborted")' Color.Red); " is 138.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "		this.SendStatusText (string.Format (TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_Spell_ReduceFormVersionTo40Cleaned")' count)' Color.DarkGreen); " is 167.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,reduceFormVersionTo40ToolStripMenuItem_Click,The length of the statement  "		this.SendStatusText (TranslateUI.TranslateUiGlobalization.ResManager.GetString ("TESSNIP_Spell_NoFormVersionGreater40")' Color.OrangeRed); " is 138.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,GetRecordFilter,The length of the statement  "			var result = MessageBox.Show (this' Resources.MainView_FirstTimeSkyrimLoad_ExcludeInquiry' Resources.FirstLoadOptions' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 208.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,GetRecordFilter,The length of the statement  "			var result = MessageBox.Show (this' Resources.ESM_Large_File_Size_Inquiry' Resources.Filter_Options_Text' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1); " is 189.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,addMasterToolStripMenuItem_Click,The length of the statement  "				MessageBox.Show (this' "No plugin selected. Cannot continue."' "Missing Plugin"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,closeAllToolStripMenuItem_Click,The length of the statement  "	if (MessageBox.Show (Resources.CloseAllLoseChangesInquiry' Resources.WarningText' MessageBoxButtons.YesNo) != DialogResult.Yes) { " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,closeToolStripMenuItem_Click,The length of the statement  "	if (MessageBox.Show (Resources.CloseActivePluginInquiry' Resources.WarningText' MessageBoxButtons.YesNo) != DialogResult.Yes) { " is 127.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,editStringsToolStripMenuItem_Click,The length of the statement  "			MessageBox.Show (this' "No plugins available to edit"' Resources.ErrorText' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,languageToolStripMenuItem_DropDownOpening,The length of the statement  "		kvp.Value.Checked = string.Compare (kvp.Key' Domain.Properties.Settings.Default.LocalizationName' StringComparison.OrdinalIgnoreCase) == 0; " is 139.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,noWindowsSoundsToolStripMenuItem_Click,The length of the statement  "	Settings.Default.NoWindowsSounds = noWindowsSoundsToolStripMenuItem.Checked = !noWindowsSoundsToolStripMenuItem.Checked; " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LoadPluginFromListOfFileNames,The length of the statement  "			toolStripStatusLabel.Text = string.Format (TranslateUiGlobalization.ResManager.GetString ("MSG_LoadPluginIn")' t.ToString ()); " is 126.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LoadPluginFromListOfFileNames,The length of the statement  "		string errMsg = "Message: " + ex.Message + Environment.NewLine + Environment.NewLine + "StackTrace: " + ex.StackTrace + Environment.NewLine + Environment.NewLine + "Source: " + ex.Source + Environment.NewLine + Environment.NewLine + "GetType: " + ex.GetType (); " is 261.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,htmlContent_OnLinkClicked,The length of the statement  "					var dr = MessageBox.Show (this' string.Format (Resources.Plugin_not_loaded__LoadNow' masterName)' Resources.Load_Reference' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button2); " is 207.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveAsToolStripMenuItem_Click,The length of the statement  "		var result = MessageBox.Show (this' Resources.SavePluginWithFilterAppliedInquiry' Resources.WarningText' MessageBoxButtons.YesNo' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button2); " is 187.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveAsToolStripMenuItem_Click,The length of the statement  "		toolStripStatusLabel.Text = string.Format (TranslateUiGlobalization.ResManager.GetString ("MSG_SavePluginIn")' t.ToString ()); " is 126.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveStringsFilesToolStripMenuItem_Click,The length of the statement  "	Domain.Properties.Settings.Default.SaveStringsFiles = saveStringsFilesToolStripMenuItem.Checked = !saveStringsFilesToolStripMenuItem.Checked; " is 141.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,saveToolStripMenuItem_Click,The length of the statement  "		var result = MessageBox.Show (this' Resources.SavePluginWithFilterAppliedInquiry' Resources.WarningText' MessageBoxButtons.YesNo' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button2); " is 187.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,toolStripIncrInvalidRecNext_Click,The length of the statement  "	BackgroundNonConformingRecordIncrementalSearch (PluginTree.SelectedRecord' true' toolStripIncrInvalidRecWrapAround.Checked); " is 124.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,toolStripIncrInvalidRecPrev_Click,The length of the statement  "	BackgroundNonConformingRecordIncrementalSearch (PluginTree.SelectedRecord' false' toolStripIncrInvalidRecWrapAround.Checked); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,useWindowsClipboardToolStripMenuItem_Click,The length of the statement  "	Settings.Default.UseWindowsClipboard = useWindowsClipboardToolStripMenuItem.Checked = !useWindowsClipboardToolStripMenuItem.Checked; " is 132.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,openListToolStripMenuItem_Click,The length of the statement  "			toolStripStatusLabel.Text = string.Format (TranslateUiGlobalization.ResManager.GetString ("MSG_LoadPluginIn")' t.ToString ()); " is 126.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,editScriptsToolStripMenuItem_DropDownItemClicked,The length of the statement  "				using (var key = Registry.CurrentUser.OpenSubKey (@"Software\Microsoft\Windows\CurrentVersion\Explorer\FileExts\" + Path.GetExtension (filename) + @"\OpenWithList"' false)) { " is 174.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,editScriptsToolStripMenuItem_DropDownItemClicked,The length of the statement  "					info.Verb = info.Verbs.FirstOrDefault (v => 0 == string.Compare (v' "edit"' StringComparison.InvariantCultureIgnoreCase)); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,editScriptsToolStripMenuItem_DropDownItemClicked,The length of the statement  "					info.Verb = info.Verbs.FirstOrDefault (v => v.StartsWith ("edit"' StringComparison.InvariantCultureIgnoreCase) && v.IndexOf ("notepad"' StringComparison.InvariantCultureIgnoreCase) > 0); " is 186.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LoadDynamicScripts,The length of the statement  "	foreach (var filename in Directory.EnumerateFiles (PluginEngine.PluginsPyPath' "*.py"' SearchOption.TopDirectoryOnly)) { " is 120.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,scriptsToolStripMenuItem_DropDownOpening,The length of the statement  "	selectionScriptsToolStripMenuItem.Enabled = scriptsToolStripMenuItem.Enabled && selectionScriptsToolStripMenuItem.HasDropDownItems && PluginTree.SelectedRecord != null; " is 168.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MainView)); " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin autoHideStripSkin1 = new WeifenLuo.WinFormsUI.Docking.AutoHideStripSkin (); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient (); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin dockPaneStripSkin1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripSkin (); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient dockPaneStripGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripGradient (); " is 134.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient2 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient (); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient dockPaneStripToolWindowGradient1 = new WeifenLuo.WinFormsUI.Docking.DockPaneStripToolWindowGradient (); " is 164.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	WeifenLuo.WinFormsUI.Docking.DockPanelGradient dockPanelGradient3 = new WeifenLuo.WinFormsUI.Docking.DockPanelGradient (); " is 122.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.useNewSubrecordEditorToolStripMenuItem.Click += new System.EventHandler (this.useNewSubrecordEditorToolStripMenuItem_Click); " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.useWindowsClipboardToolStripMenuItem.Click += new System.EventHandler (this.useWindowsClipboardToolStripMenuItem_Click); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.resetDockingWindowsToolStripMenuItem.Click += new System.EventHandler (this.resetDockingWindowsToolStripMenuItem_Click); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.eSMFilterSettingsToolStripMenuItem.Click += new System.EventHandler (this.eSMFilterSettingsToolStripMenuItem_Click); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.compressionSettingsToolStripMenuItem.Click += new System.EventHandler (this.compressionSettingsToolStripMenuItem_Click); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.resetSettingsToDefaultsToolStripMenuItem.Click += new System.EventHandler (this.resetSettingsToDefaultsToolStripMenuItem_Click); " is 133.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.languageToolStripMenuItem.DropDownOpening += new System.EventHandler (this.languageToolStripMenuItem_DropDownOpening); " is 123.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.languageToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.languageToolStripMenuItem_DropDownItemClicked); " is 165.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.internalizeStringReferencesToolStripMenuItem' "internalizeStringReferencesToolStripMenuItem"); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.internalizeStringReferencesToolStripMenuItem.Click += new System.EventHandler (this.internalizeStringReferencesToolStripMenuItem_Click); " is 141.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.extractInternalStringsToTableToolStripMenuItem' "extractInternalStringsToTableToolStripMenuItem"); " is 129.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.extractInternalStringsToTableToolStripMenuItem.Click += new System.EventHandler (this.extractInternalStringsToTableToolStripMenuItem_Click); " is 145.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.copyReferencedStringsFromMastersToolStripMenuItem' "copyReferencedStringsFromMastersToolStripMenuItem"); " is 135.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.copyReferencedStringsFromMastersToolStripMenuItem.Click += new System.EventHandler (this.copyReferencedStringsFromMastersToolStripMenuItem_Click); " is 151.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.cleanUnusedStringsToolStripMenuItem.Click += new System.EventHandler (this.cleanUnusedStringsToolStripMenuItem_Click); " is 123.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.createStubsForMissingStringsToolStripMenuItem' "createStubsForMissingStringsToolStripMenuItem"); " is 127.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.createStubsForMissingStringsToolStripMenuItem.Click += new System.EventHandler (this.createStubsForMissingStringsToolStripMenuItem_Click); " is 143.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.exportStringsToFileToolStripMenuItem.Click += new System.EventHandler (this.exportStringsToFileToolStripMenuItem_Click); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.importStringsToFileToolStripMenuItem.Click += new System.EventHandler (this.importStringsToFileToolStripMenuItem_Click); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.findDuplicatedFormIDToolStripMenuItem.Click += new System.EventHandler (this.findDuplicatedFormIDToolStripMenuItem_Click); " is 127.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.findNonconformingRecordToolStripMenuItem.Click += new System.EventHandler (this.findNonconformingRecordToolStripMenuItem_Click); " is 133.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.createRecordStructureXmlToolStripMenuItem.Click += new System.EventHandler (this.createRecordStructureXmlToolStripMenuItem_Click); " is 135.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.reorderSubrecordsToolStripMenuItem.Click += new System.EventHandler (this.reorderSubrecordsToolStripMenuItem_Click); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	resources.ApplyResources (this.newFormIDNoReferenceUpdateToolStripMenuItem' "newFormIDNoReferenceUpdateToolStripMenuItem"); " is 123.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.newFormIDNoReferenceUpdateToolStripMenuItem.Click += new System.EventHandler (this.newFormIDNoReferenceUpdateToolStripMenuItem_Click); " is 139.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.reduceFormVersionsTo40ToolStripMenuItem.Click += new System.EventHandler (this.reduceFormVersionTo40ToolStripMenuItem_Click); " is 130.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.scriptsToolStripMenuItem.DropDownOpening += new System.EventHandler (this.scriptsToolStripMenuItem_DropDownOpening); " is 121.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.globalScriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.globalScriptsToolStripMenuItem_DropDownItemClicked); " is 175.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.selectionScriptsToolStripMenuItem.DropDownOpening += new System.EventHandler (this.selectionScriptsToolStripMenuItem_DropDownOpening); " is 139.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.selectionScriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.selectionScriptsToolStripMenuItem_DropDownItemClicked); " is 181.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.editScriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.editScriptsToolStripMenuItem_DropDownItemClicked); " is 171.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.backgroundWorker1.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler (this.backgroundWorker1_ProgressChanged); " is 137.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.backgroundWorker1.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler (this.backgroundWorker1_RunWorkerCompleted); " is 146.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrFindTypeFilter.SelectedIndexChanged += new System.EventHandler (this.toolStripIncrFindTypeFilter_SelectedIndexChanged); " is 137.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrFindTypeFilter.VisibleChanged += new System.EventHandler (this.toolStripIncrFindTypeFilter_VisibleChanged); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrFindType.SelectedIndexChanged += new System.EventHandler (this.toolStripIncrFindType_SelectedIndexChanged); " is 125.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrInvalidRec.ItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.toolStripIncrInvalidRec_ItemClicked); " is 145.
Long Statement,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrInvalidRecWrapAround.CheckStateChanged += new System.EventHandler (this.toolStripCheck_CheckStateChanged); " is 124.
Long Statement,TESVSnip.UI.Forms,AddMasterForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\AddMasterForm.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(AddMasterForm)); " is 134.
Long Statement,TESVSnip.UI.Forms,CompressSettings,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,LoadSettings_Load,The length of the statement  "	this.txtCompressLimit.Text = Domain.Properties.Settings.Default.CompressionLimit.ToString (CultureInfo.InvariantCulture); " is 121.
Long Statement,TESVSnip.UI.Forms,CompressSettings,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,LoadSettings_Load,The length of the statement  "	var records = Domain.Properties.Settings.Default.AutoCompressRecords != null ? Settings.Default.AutoCompressRecords.Trim ().Split (new[] { " is 138.
Long Statement,TESVSnip.UI.Forms,CompressSettings,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,btnOk_Click,The length of the statement  "	Domain.Properties.Settings.Default.AutoCompressRecords = string.Join (";"' this.listRecordFilter.CheckedItems.Cast<string> ().ToArray ()); " is 138.
Long Statement,TESVSnip.UI.Forms,CompressSettings,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\CompressSettings.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(CompressSettings)); " is 137.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,ApplySettings,The length of the statement  "		MessageBox.Show (this' "No record was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 140.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,ApplySettings,The length of the statement  "			MessageBox.Show (this' "No Batch criteria was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 148.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The length of the statement  "		AspectGetter = x => (x is BatchSubrecord) ? (object)((BatchSubrecord)x).Type : (x is BatchElement) ? (object)((BatchElement)x).Type : null' " is 139.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,filterTree_SizeChanged,The length of the statement  "			col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "	this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "	this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 234.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "	this.filterTree.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "	this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 163.
Long Statement,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The length of the statement  "	this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TESVSnip.UI.Forms,InputBox,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\InputBox.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(InputBox)); " is 129.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,ApplySettings,The length of the statement  "		MessageBox.Show (this' "No record was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 140.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,ApplySettings,The length of the statement  "			MessageBox.Show (this' "No Column criteria was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 149.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,filterTree_SizeChanged,The length of the statement  "			col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "	this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "	this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 234.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "	this.filterTree.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "	this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 163.
Long Statement,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The length of the statement  "	this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,ApplySettings,The length of the statement  "		MessageBox.Show (this' "No record was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 140.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,ApplySettings,The length of the statement  "			MessageBox.Show (this' "No search criteria was selected."' "Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button1); " is 149.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComboBox,The length of the statement  "	var records = TESVSnip.Domain.Data.DomainDefinition.LoadedDomains ().SelectMany (domain => domain.Records.Values.Select (x => new ComboBoxItem<RecordStructure> { " is 161.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The length of the statement  "		AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null' " is 143.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,LoadSearches,The length of the statement  "		var configFile = Path.Combine (Path.GetDirectoryName (Application.ExecutablePath)' Path.Combine ("conf"' "SearchSettings.xml")); " is 128.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,SaveSearches,The length of the statement  "		var configFile = Path.Combine (Path.GetDirectoryName (Application.ExecutablePath)' Path.Combine ("conf"' "SearchSettings.xml")); " is 128.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,filterTree_SizeChanged,The length of the statement  "			col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.cboRecordType.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 192.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.cboRecordType.Font = new System.Drawing.Font ("Lucida Console"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 158.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.bApply.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.cboSavedSearches.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 195.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.btnRemoveSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.btnAddSearch.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 234.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.filterTree.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 163.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.filterTree.CellEditValidating += new BrightIdeasSoftware.CellEditEventHandler (this.filterTree_CellEditValidating); " is 120.
Long Statement,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The length of the statement  "	this.filterTree.ItemsChanging += new System.EventHandler<BrightIdeasSoftware.ItemsChangingEventArgs> (this.filterTree_ItemsChanging); " is 133.
Long Statement,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The length of the statement  "		if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) { " is 158.
Long Statement,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MediumLevelRecordEditor)); " is 144.
Long Statement,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,The length of the statement  "		if (DialogResult.Yes != MessageBox.Show (this' this.strWarnOnSave + "\n\nData maybe lost if saved. Do you want to continue saving?"' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button2)) { " is 228.
Long Statement,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(NewMediumLevelRecordEditor)); " is 147.
Long Statement,TESVSnip.UI.Forms,LoadSettings,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\LoadSettings.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(LoadSettings)); " is 133.
Long Statement,TESVSnip.UI.Forms,MultilineStringEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MultilineStringEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(MultilineStringEditor)); " is 142.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The length of the statement  "		AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null' " is 143.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,filterTree_SizeChanged,The length of the statement  "			col.Width = this.filterTree.Width - width + col.Width - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 139.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.bSave.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.bCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.filterTree.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 234.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.filterTree.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 163.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.tableLayoutPanel1.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Percent' 50F)); " is 124.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.tableLayoutPanel1.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Absolute' 77F)); " is 125.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.tableLayoutPanel1.ColumnStyles.Add (new System.Windows.Forms.ColumnStyle (System.Windows.Forms.SizeType.Percent' 50F)); " is 124.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.treeListView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 237.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.treeListView1.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 170.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.treeListView1.SelectColumnsOnRightClickBehaviour = BrightIdeasSoftware.ObjectListView.ColumnSelectBehaviour.Submenu; " is 121.
Long Statement,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The length of the statement  "	this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))); " is 166.
Long Statement,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,TryGetCurrentFormat,The length of the statement  "	format = (LocalizedStringFormat)Enum.Parse (typeof(LocalizedStringFormat)' this.cboType.SelectedItem.ToString ()' true); " is 120.
Long Statement,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,btnAddString_Click,The length of the statement  "	StringHolder addStr = this.addStrings.FirstOrDefault (a => (a.ID == uiID && a.Plugin.Equals (plugin) && a.Format == format)); " is 125.
Long Statement,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,btnDeleteString_Click,The length of the statement  "	StringHolder remStr = this.remStrings.FirstOrDefault (a => (a.ID == uiID && a.Plugin.Equals (plugin) && a.Format == format)); " is 125.
Long Statement,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,btnLookup_Click,The length of the statement  "		MessageBox.Show (this' "ID Field is empty.  Please specify a string ID to find."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 135.
Long Statement,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(StringsEditor)); " is 134.
Long Statement,TESVSnip.UI.Forms,DataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(DataEdit)); " is 129.
Long Statement,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(GroupEditor)); " is 132.
Long Statement,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(HeaderEditor)); " is 133.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The length of the statement  "		this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString (); " is 135.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The length of the statement  "		this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString (); " is 134.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The length of the statement  "		this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8"); " is 140.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(HexDataEdit)); " is 132.
Long Statement,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The length of the statement  "	this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255))))); " is 162.
Long Statement,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The length of the statement  "	this.webBrowser1.PreviewKeyDown += new System.Windows.Forms.PreviewKeyDownEventHandler (this.webBrowser1_PreviewKeyDown); " is 121.
Long Statement,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The length of the statement  "	this.copyToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C))); " is 139.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,dockingMenuStrip_Opening,The length of the statement  "	this.dockAsTabbedDocumentToolStripMenuItem.Enabled = DockState == DockState.Float && IsDockStateValid (DockState.Document); " is 123.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BaseDockContent)); " is 136.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "	this.closeToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F4))); " is 141.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "	this.dockAsTabbedDocumentToolStripMenuItem.Click += new System.EventHandler (this.dockAsTabbedDocumentToolStripMenuItem_Click); " is 127.
Long Statement,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The length of the statement  "	this.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 150.
Long Statement,TESVSnip.UI.Docking,SubrecordListContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SubrecordListContent)); " is 141.
Long Statement,TESVSnip.UI.Docking,SubrecordListContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The length of the statement  "	this.DockAreas = ((WeifenLuo.WinFormsUI.Docking.DockAreas)(((((WeifenLuo.WinFormsUI.Docking.DockAreas.Float | WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft) | WeifenLuo.WinFormsUI.Docking.DockAreas.DockRight) | WeifenLuo.WinFormsUI.Docking.DockAreas.DockTop) | WeifenLuo.WinFormsUI.Docking.DockAreas.DockBottom))); " is 316.
Long Statement,TESVSnip.UI.Docking,FullRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,UpdateTitle,The length of the statement  "			Text = string.Format ("{0} - [{1:X8}] {2}"' Resources.FullRecordEditorTitle' this.panelRecordEditor.Record.FormID' this.panelRecordEditor.Record.DescriptiveName); " is 162.
Long Statement,TESVSnip.UI.Docking,FullRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,UpdateTitle,The length of the statement  "			Text = string.Format ("[{0:X8}] {1}"' this.panelRecordEditor.Record.FormID' this.panelRecordEditor.Record.DescriptiveName); " is 123.
Long Statement,TESVSnip.UI.Docking,PluginTreeContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\PluginTreeContent.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(PluginTreeContent)); " is 138.
Long Statement,TESVSnip.UI.Docking,PluginTreeContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\PluginTreeContent.cs,InitializeComponent,The length of the statement  "	this.DockAreas = ((WeifenLuo.WinFormsUI.Docking.DockAreas)(((((WeifenLuo.WinFormsUI.Docking.DockAreas.Float | WeifenLuo.WinFormsUI.Docking.DockAreas.DockLeft) | WeifenLuo.WinFormsUI.Docking.DockAreas.DockRight) | WeifenLuo.WinFormsUI.Docking.DockAreas.DockTop) | WeifenLuo.WinFormsUI.Docking.DockAreas.DockBottom))); " is 316.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "		end = "Warning: An error occurred while processing the record. It may not conform to the structure defined in RecordStructure.xml"; " is 131.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetBaseDesc,The length of the statement  "	return "Type: " + rec.Name + Environment.NewLine + "FormID: " + rec.FormID.ToString ("x8") + Environment.NewLine + "Flags 1: " + rec.Flags1.ToString ("x8") + (rec.Flags1 == 0 ? string.Empty : " (" + FlagDefs.GetRecFlags1Desc (rec.Flags1) + ")") + Environment.NewLine + "Flags 2: " + rec.Flags2.ToString ("x8") + Environment.NewLine + "Flags 3: " + rec.Flags3.ToString ("x8") + Environment.NewLine + "Subrecords: " + rec.SubRecords.Count.ToString () + Environment.NewLine + "Size: " + rec.Size.ToString () + " bytes (excluding header)"; " is 535.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "							string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString (); " is 130.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "									s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8")); " is 130.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "							string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString (); " is 129.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The length of the statement  "									s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8")); " is 130.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The length of the statement  "		return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")"; " is 137.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The length of the statement  "		return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")"; " is 154.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "	return desc + Environment.NewLine + "Records: " + rec.Records.Count.ToString () + Environment.NewLine + "Size: " + rec.Size.ToString () + " bytes (including header)"; " is 166.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "	return string.Format ("[{0} plugin]{1}Filename: {2}{3}File size: {4}{5}Records: {6}"' rec.Domain.Name' Environment.NewLine' rec.Name' Environment.NewLine' rec.Size' Environment.NewLine' rec.Records.Count); " is 205.
Long Statement,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The length of the statement  "	return "[Subrecord]" + Environment.NewLine + "Name: " + rec.Name + Environment.NewLine + "Size: " + rec.Size.ToString () + " bytes (Excluding header)"; " is 151.
Long Statement,TESVSnip.UI.Hosting,IronPythonConsole,F:\newReposMay17\figment_tesvsnip\Application\UI\Hosting\IronPythonConsole.xaml.cs,openFileClick,The length of the statement  "		textEditor.SyntaxHighlighting = HighlightingManager.Instance.GetDefinitionByExtension (System.IO.Path.GetExtension (currentFileName)); " is 134.
Long Statement,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The length of the statement  "	string[] elements = pathname.Substring (root.Length).Split (Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar); " is 121.
Long Statement,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The length of the statement  "		this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString (); " is 135.
Long Statement,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The length of the statement  "		this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString (); " is 134.
Long Statement,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The length of the statement  "		this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8"); " is 140.
Long Statement,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(HexElement)); " is 131.
Long Statement,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The length of the statement  "	this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255))))); " is 162.
Long Statement,TESVSnip.UI.RecordControls,BaseElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\BaseElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(BaseElement)); " is 132.
Long Statement,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,UpdateElement,The length of the statement  "		this.groupBox1.Text = string.Format ("{0}: {1}"' Element.type' Element.name) + (!string.IsNullOrEmpty (Element.desc) ? (" (" + Element.desc + ")") : string.Empty); " is 163.
Long Statement,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(RepeatingElement)); " is 137.
Long Statement,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The length of the statement  "	this.bindingNavigatorPositionItem.KeyDown += new System.Windows.Forms.KeyEventHandler (this.bindingNavigatorPositionItem_KeyDown); " is 130.
Long Statement,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(OptionsElement)); " is 135.
Long Statement,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this.cboOptions' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("cboOptions.IconAlignment")))); " is 141.
Long Statement,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("$this.IconAlignment")))); " is 125.
Long Statement,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(FlagsElement)); " is 133.
Long Statement,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(LStringElement)); " is 135.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(FormIDElement)); " is 134.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this.cboFormID' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("cboFormID.IconAlignment")))); " is 139.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this.cboRecType' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("cboRecType.IconAlignment")))); " is 141.
Long Statement,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("$this.IconAlignment")))); " is 125.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(OptionalElement)); " is 136.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this.chkUseValue' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("chkUseValue.IconAlignment")))); " is 143.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this.controlPanel' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("controlPanel.IconAlignment")))); " is 145.
Long Statement,TESVSnip.UI.RecordControls,OptionalElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The length of the statement  "	this.Error.SetIconAlignment (this' ((System.Windows.Forms.ErrorIconAlignment)(resources.GetObject ("$this.IconAlignment")))); " is 125.
Long Statement,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "				this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture); " is 122.
Long Statement,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "				this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture); " is 122.
Long Statement,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "				this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture); " is 122.
Long Statement,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The length of the statement  "				this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture); " is 122.
Long Statement,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(TextElement)); " is 132.
Long Statement,TESVSnip.Windows.Controls,BallonToolTip,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,CreateRegion,The length of the statement  "		var num1 = (int)NativeMethods.SendMessage (new HandleRef (this' Handle)' NativeMethods.TTM_ADDTOOL' 0' GetTOOLINFO (ctl)); " is 122.
Long Statement,TESVSnip.Windows.Controls,BallonToolTip,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,CreateHandle,The length of the statement  "		NativeMethods.SetWindowPos (new HandleRef (this' Handle)' NativeMethods.HWND_TOPMOST' 0' 0' 0' 0' NativeMethods.SWP_NOACTIVATE | NativeMethods.SWP_NOMOVE | NativeMethods.SWP_NOSIZE); " is 182.
Long Statement,TESVSnip.Windows.Controls,BallonToolTip,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,CreateHandle,The length of the statement  "		NativeMethods.SendMessage (new HandleRef (this' Handle)' NativeMethods.TTM_SETMAXTIPWIDTH' 0' SystemInformation.MaxWindowTrackSize.Width); " is 138.
Long Statement,TESVSnip.Windows.Controls,CheckedComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CheckedComboBox.cs,OnKeyDown,The length of the statement  "	e.Handled = !e.Alt && !(e.KeyCode == Keys.Tab) && !((e.KeyCode == Keys.Left) || (e.KeyCode == Keys.Right) || (e.KeyCode == Keys.Home) || (e.KeyCode == Keys.End)); " is 162.
Long Statement,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,ModifyStyle,The length of the statement  "		SetWindowPos (hWnd' IntPtr.Zero' 0' 0' 0' 0' posFlags.SWP_NOSIZE | posFlags.SWP_NOMOVE | posFlags.SWP_NOZORDER | posFlags.SWP_NOACTIVATE | (posFlags)nFlags); " is 157.
Long Statement,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,ModifyStyleEx,The length of the statement  "		SetWindowPos (hWnd' IntPtr.Zero' 0' 0' 0' 0' posFlags.SWP_NOSIZE | posFlags.SWP_NOMOVE | posFlags.SWP_NOZORDER | posFlags.SWP_NOACTIVATE | (posFlags)nFlags); " is 157.
Long Statement,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The length of the statement  "		} else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) { " is 129.
Long Statement,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The length of the statement  "			OnPaint (new PaintEventArgs (internalGraphics' Rectangle.FromLTRB (updateRect.left' updateRect.top' updateRect.right' updateRect.bottom))); " is 139.
Long Statement,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,EnableSubImages,The length of the statement  "	SendMessage (Handle' ListViewMessages.LVM_SETEXTENDEDLISTVIEWSTYLE' (int)LVS_EX.LVS_EX_SUBITEMIMAGES' (int)LVS_EX.LVS_EX_SUBITEMIMAGES); " is 136.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintHexAndStringView,The length of the statement  "	bool isStringKeyInterpreterActive = _keyInterpreter != null && _keyInterpreter.GetType () == typeof(StringKeyInterpreter); " is 122.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height); " is 161.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height); " is 174.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "						var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1))); " is 163.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height); " is 152.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height); " is 165.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height); " is 171.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "						var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1))); " is 172.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The length of the statement  "					var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height); " is 142.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		_recLineInfo = new Rectangle (_recContent.X + marginLeft' _recContent.Y' (int)(_charSize.Width * 10)' _recContent.Height); " is 122.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "	_recHex = new Rectangle (_recLineInfo.X + _recLineInfo.Width' _recLineInfo.Y' _recContent.Width - _recLineInfo.Width' _recContent.Height); " is 138.
Long Statement,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The length of the statement  "		_recStringView = new Rectangle (_recHex.X + _recHex.Width' _recHex.Y' (int)(_charSize.Width * _iHexMaxHBytes)' _recHex.Height); " is 127.
Long Statement,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,HandleTimerTick,The length of the statement  "	if ((IsLeftMouseButtonDown && (Control.MouseButtons & MouseButtons.Left) != MouseButtons.Left) || (IsMiddleMouseButtonDown && (Control.MouseButtons & MouseButtons.Middle) != MouseButtons.Middle) || (IsRightMouseButtonDown && (Control.MouseButtons & MouseButtons.Right) != MouseButtons.Right)) { " is 294.
Long Statement,BrightIdeasSoftware,OLVDataObject,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\OLVDataObject.cs,ConvertToHtmlFragment,The length of the statement  "	const String MARKER_BLOCK = "Version:1.0\r\n" + "StartHTML:{0'8}\r\n" + "EndHTML:{1'8}\r\n" + "StartFragment:{2'8}\r\n" + "EndFragment:{3'8}\r\n" + "StartSelection:{2'8}\r\n" + "EndSelection:{3'8}\r\n" + "SourceURL:{4}\r\n" + "{5}"; " is 232.
Long Statement,BrightIdeasSoftware,OLVDataObject,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\OLVDataObject.cs,ConvertToHtmlFragment,The length of the statement  "	const String DEFAULT_HTML_BODY = "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\">" + "<HTML><HEAD></HEAD><BODY><!--StartFragment-->{0}<!--EndFragment--></BODY></HTML>"; " is 185.
Long Statement,BrightIdeasSoftware,OLVDataObject,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\OLVDataObject.cs,ConvertToHtmlFragment,The length of the statement  "	return String.Format (MARKER_BLOCK' prefixLength' prefixLength + html.Length' startFragment' endFragment' source' html); " is 120.
Long Statement,BrightIdeasSoftware,DataSourceAdapter,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,The length of the statement  "	//System.Diagnostics.Debug.WriteLine(String.Format("Processing {0} event on {1} rows took {2}ms"' e.ListChangedType' this.ListView.GetItemCount()' sw.ElapsedMilliseconds)); " is 172.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildGroups,The length of the statement  "	BuildGroups (args.ColumnToGroupBy' args.GroupByOrder' args.ColumnToSort' args.SortOrder' args.SecondaryColumnToSort' args.SecondarySortOrder); " is 142.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildBeforeSortingEventArgs,The length of the statement  "	var args = new BeforeSortingEventArgs (groupBy' groupByOrder' column' order' SecondarySortColumn ?? GetColumn (0)' SecondarySortOrder == SortOrder.None ? order : SecondarySortOrder); " is 182.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,BuildGroups,The length of the statement  "	GroupingParameters parms = CollectGroupingParameters (groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder); " is 131.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CollectGroupingParameters,The length of the statement  "	var parms = new GroupingParameters (this' groupByColumn' groupByOrder' column' order' secondaryColumn' secondaryOrder' titleFormat' titleSingularFormat' SortGroupItemsByPrimaryColumn); " is 184.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeGroups,The length of the statement  "		var itemSorter = new ColumnComparer (primarySortColumn' parms.PrimarySortOrder' parms.SecondarySort' parms.SecondarySortOrder); " is 127.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The length of the statement  "	Size textSize = TextRenderer.MeasureText (hti.SubItem.Text' Font' proposedSize' TextFormatFlags.EndEllipsis | TextFormatFlags.SingleLine | TextFormatFlags.NoPrefix); " is 165.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleBeginScroll,The length of the statement  "		var args = new ScrollEventArgs (ScrollEventType.EndScroll' scrollPositionH - nmlvscroll.dx' scrollPositionH' ScrollOrientation.HorizontalScroll); " is 145.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleBeginScroll,The length of the statement  "		var args = new ScrollEventArgs (ScrollEventType.EndScroll' scrollPositionV - nmlvscroll.dy' scrollPositionV' ScrollOrientation.VerticalScroll); " is 143.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "	//System.Diagnostics.Debug.WriteLine(String.Format("cd: {0:x}' {1}' {2}"' nmcustomdraw.nmcd.dwDrawStage' nmcustomdraw.dwItemType' nmcustomdraw.nmcd.dwItemSpec)); " is 161.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "		//System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem)); " is 144.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The length of the statement  "			var args = new DrawListViewSubItemEventArgs (g' r' item' item.SubItems [0]' rowIndex' 0' Columns [0]' (ListViewItemStates)nmcustomdraw.nmcd.uItemState); " is 152.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleKeyDown,The length of the statement  "		var args = new ScrollEventArgs (ScrollEventType.EndScroll' scrollPositionH' newScrollPositionH' ScrollOrientation.HorizontalScroll); " is 132.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleKeyDown,The length of the statement  "		var args = new ScrollEventArgs (ScrollEventType.EndScroll' scrollPositionV' newScrollPositionV' ScrollOrientation.VerticalScroll); " is 130.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DoSort,The length of the statement  "				BuildGroups (args.ColumnToGroupBy' args.GroupByOrder' args.ColumnToSort' args.SortOrder' args.SecondaryColumnToSort' args.SecondarySortOrder); " is 142.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,DoSort,The length of the statement  "				ListViewItemSorter = new ColumnComparer (args.ColumnToSort' args.SortOrder' args.SecondaryColumnToSort' args.SecondarySortOrder); " is 129.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetCellToolTip,The length of the statement  "		if (subItem != null && !String.IsNullOrEmpty (subItem.Url) && subItem.Url != subItem.Text && HotCellHitLocation == HitTestLocation.Text) " is 136.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetupBaseImageList,The length of the statement  "	if (rowHeight == -1 || View != View.Details || (shadowedImageList != null && shadowedImageList.ImageSize.Height == rowHeight)) " is 126.
Long Statement,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnMouseUp,The length of the statement  "	if (UseHyperlinks && args.HitTest.HitTestLocation == HitTestLocation.Text && args.SubItem != null && !String.IsNullOrEmpty (args.SubItem.Url)) { " is 144.
Long Statement,BrightIdeasSoftware,Munger,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,GetValue,The length of the statement  "		return String.Format ("'{0}' is not a parameter-less method' property or field of type '{1}'"' ex.Munger.AspectName' ex.Target.GetType ()); " is 139.
Long Statement,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetBackgroundImage,The length of the statement  "		lvbkimage.ulFlags = isWatermark ? LVBKIF_TYPE_WATERMARK : (isTiled ? LVBKIF_SOURCE_HBITMAP | LVBKIF_STYLE_TILE : LVBKIF_SOURCE_HBITMAP); " is 136.
Long Statement,BrightIdeasSoftware,FastListGroupingStrategy,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,GetGroups,The length of the statement  "	OLVColumn primarySortColumn = parmameters.SortItemsByPrimaryColumn ? parmameters.ListView.GetColumn (0) : parmameters.PrimarySort; " is 130.
Long Statement,BrightIdeasSoftware,FastListGroupingStrategy,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,GetGroups,The length of the statement  "	var sorter = new ModelObjectComparer (primarySortColumn' parmameters.PrimarySortOrder' parmameters.SecondarySort' parmameters.SecondarySortOrder); " is 146.
Long Statement,BrightIdeasSoftware,OwnerDataCallbackImpl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\VirtualGroups.cs,OnCacheHint,The length of the statement  "	//System.Diagnostics.Debug.WriteLine(String.Format("OnCacheHint({0}' {1}' {2}' {3})"' from.iGroup' from.iItem' to.iGroup' to.iItem)); " is 133.
Long Statement,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,CalculateTextWidth,The length of the statement  "		return TextRenderer.MeasureText (g' txt' Font' proposedSize' TextFormatFlags.EndEllipsis | TextFormatFlags.NoPrefix).Width; " is 123.
Long Statement,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The length of the statement  "				// If we are not printing' it's probable that the given Graphics object is double buffered using a BufferedGraphics object. " is 123.
Long Statement,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdi,The length of the statement  "	TextFormatFlags flags = TextFormatFlags.EndEllipsis | TextFormatFlags.NoPrefix | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsTranslateTransform; " is 165.
Long Statement,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The length of the statement  "	TextFormatFlags flags = TextFormatFlags.NoPrefix | TextFormatFlags.VerticalCenter | TextFormatFlags.PreserveGraphicsTranslateTransform; " is 135.
Long Statement,BrightIdeasSoftware,CheckStateRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetCheckBoxState,The length of the statement  "	bool isDisabled = ListView.RenderNonEditableCheckboxesAsDisabled && (ListView.CellEditActivation == ObjectListView.CellEditActivateMode.None || !Column.IsEditable); " is 164.
Long Statement,BrightIdeasSoftware,CheckStateRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetCheckBoxState,The length of the statement  "	bool isHot = ListView != null && ListItem != null && ListView.HotRowIndex == ListItem.Index && ListView.HotColumnIndex == Column.Index && ListView.HotCellHitLocation == HitTestLocation.CheckBox; " is 194.
Long Statement,BrightIdeasSoftware,BarRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,Render,The length of the statement  "				using (var gradient = new LinearGradientBrush (frameRect' GradientStartColor' GradientEndColor' LinearGradientMode.Horizontal)) { " is 129.
Long Statement,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HasNonThemedSortIndicator,The length of the statement  "		return !VisualStyleRenderer.IsElementDefined (VisualStyleElement.Header.SortArrow.SortedUp) && HasSortIndicator (column); " is 121.
Long Statement,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The length of the statement  "	//System.Diagnostics.Debug.WriteLine(String.Format("header cd: {0:x}' {1}' {2:x}"' nmcustomdraw.dwDrawStage' nmcustomdraw.dwItemSpec' nmcustomdraw.uItemState)); " is 160.
Long Statement,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,NeedsCustomDraw,The length of the statement  "		if (column.HasHeaderImage || !column.ShowTextInHeader || column.IsHeaderVertical || HasFilterIndicator (column) || column.TextAlign != column.HeaderTextAlign || NeedsCustomDraw (column.HeaderFormatStyle)) " is 204.
Long Statement,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CustomDrawHeaderCell,The length of the statement  "	if (ListView.HeaderUsesThemes && VisualStyleRenderer.IsSupported && VisualStyleRenderer.IsElementDefined (VisualStyleElement.Header.Item.Normal)) " is 145.
Long Statement,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CustomDrawHeaderCell,The length of the statement  "		if (ListView.HeaderUsesThemes && VisualStyleRenderer.IsSupported && VisualStyleRenderer.IsElementDefined (VisualStyleElement.Header.SortArrow.SortedUp)) " is 152.
Long Statement,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The length of the statement  "	if (columnIndex == ListView.Columns.Count - 1 && VisualStyleRenderer.IsElementDefined (VisualStyleElement.Header.ItemRight.Normal)) " is 131.
Long Statement,BrightIdeasSoftware,ToolTipControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,The length of the statement  "	if (!args.IsBalloon.HasValue && !args.BackColor.HasValue && !args.ForeColor.HasValue && args.Title == null && !args.StandardIcon.HasValue && !args.AutoPopDelay.HasValue && args.Font == null) " is 190.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.buttonMoveUp.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.buttonMoveDown.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.buttonShow.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.buttonHide.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 185.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb (((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192))))); " is 148.
Long Statement,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The length of the statement  "	this.objectListView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right))); " is 239.
Long Statement,BrightIdeasSoftware,TypedColumn,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\TypedObjectListView.cs,GeneratePart,The length of the statement  "		il.Emit (OpCodes.Ldstr' String.Format ("'{0}' is not a parameter-less method' property or field of type '{1}'"' pathPart' type.FullName)); " is 138.
Long Statement,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(RecordEditor)); " is 133.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,DeleteSelection,The length of the statement  "	if (DialogResult.Yes != MessageBox.Show (Resources.AreYouSureInquiry' Resources.DeleteNode' MessageBoxButtons.YesNo' MessageBoxIcon.Question' MessageBoxDefaultButton.Button1)) { " is 177.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeToolStripRecords,The length of the statement  "	this._historyHandler = new History<BaseRecord> (this.toolStripRecordBack' this.toolStripRecordNext' Settings.Default.MaxHistoryItem); " is 133.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_ModelDropped,The length of the statement  "	} else if (e.DropTargetLocation == DropTargetLocation.AboveItem || e.DropTargetLocation == DropTargetLocation.BelowItem) { " is 122.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_OnContextMenuKey,The length of the statement  "	this.contextMenuRecord.Show (this.PluginTree.PointToScreen (new Point (this.PluginTree.Width / 4' this.PluginTree.Height / 4))); " is 128.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_SelectedIndexChanged,The length of the statement  "		if (this._historyHandler.CurrentItem == null && !this.PluginTree.SelectedRecord.Equals (this._historyHandler.CurrentItem)) { " is 124.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Closing,The length of the statement  "	foreach (var item in this.contextMenuRecordAddMaster.DropDownItems.OfType<ToolStripButton> ().Where (x => !x.Equals (this.browseToolStripMenuItem)).ToArray ()) { " is 161.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecord_Opening,The length of the statement  "		foreach (var item in this.contextMenuRecordAddMaster.DropDownItems.OfType<ToolStripButton> ().Where (x => !x.Equals (this.browseToolStripMenuItem)).ToArray ()) { " is 161.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(PluginTreeView)); " is 135.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.contextMenuRecord.Closing += new System.Windows.Forms.ToolStripDropDownClosingEventHandler (this.contextMenuRecord_Closing); " is 129.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.contextMenuRecordAddMaster.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.contextMenuRecordAddMaster_DropDownItemClicked); " is 167.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.contextMenuRecordCopyTo.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.contextMenuRecordCopyTo_DropDownItemClicked); " is 161.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.scriptsToolStripMenuItem.DropDownOpening += new System.EventHandler (this.scriptsToolStripMenuItem_DropDownOpening); " is 121.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.scriptsToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.scriptsToolStripMenuItem_DropDownItemClicked); " is 163.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.PluginTree.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 14.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 167.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.PluginTree.ModelCanDrop += new System.EventHandler<BrightIdeasSoftware.ModelDropEventArgs> (this.PluginTree_ModelCanDrop); " is 127.
Long Statement,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,InitializeComponent,The length of the statement  "	this.PluginTree.ModelDropped += new System.EventHandler<BrightIdeasSoftware.ModelDropEventArgs> (this.PluginTree_ModelDropped); " is 127.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,ReferenceSearch,The length of the statement  "	var cboItem = this.toolStripIncrFindType.Items.OfType<MRUComboHelper<SearchType' string>> ().FirstOrDefault (x => x.Key == SearchType.FormIDRef); " is 145.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,SetSearchCriteria,The length of the statement  "	var cboItem = this.toolStripIncrFindType.Items.OfType<MRUComboHelper<SearchType' string>> ().FirstOrDefault (x => x.Key == SearchType.BasicCriteriaRef); " is 152.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeToolStripFind,The length of the statement  "		new MRUComboHelper<SearchType' string> (SearchType.TypeEditorIdSearch' "Name w/Type"' Settings.Default.SearchMRUNameList)' " is 122.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,contextMenuStripList_Opening,The length of the statement  "		this.batchEditToolStripMenuItem.ToolTipText = string.Format ("Batch Edit not allowed when multiple record types are selected"); " is 127.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(RecordSearch)); " is 133.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrFindTypeFilter.SelectedIndexChanged += new System.EventHandler (this.toolStripIncrFindTypeFilter_SelectedIndexChanged); " is 137.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.toolStripIncrFindType.SelectedIndexChanged += new System.EventHandler (this.toolStripIncrFindType_SelectedIndexChanged); " is 125.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.contextMenuStripList.Closing += new System.Windows.Forms.ToolStripDropDownClosingEventHandler (this.contextMenuStripList_Closing); " is 135.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.copyToToolStripMenuItem.DropDownItemClicked += new System.Windows.Forms.ToolStripItemClickedEventHandler (this.copyToToolStripMenuItem_DropDownItemClicked); " is 161.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.listSearchView.EmptyListMsgFont = new System.Drawing.Font ("Comic Sans MS"' 15.75F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 168.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.listSearchView.BeforeSorting += new System.EventHandler<BrightIdeasSoftware.BeforeSortingEventArgs> (this.listSearchView_BeforeSorting); " is 141.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.listSearchView.BeforeCreatingGroups += new System.EventHandler<BrightIdeasSoftware.CreateGroupsEventArgs> (this.listSearchView_BeforeCreatingGroups); " is 154.
Long Statement,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,InitializeComponent,The length of the statement  "	this.listSearchView.CellClick += new System.EventHandler<BrightIdeasSoftware.CellClickEventArgs> (this.listSearchView_CellClick); " is 129.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,Save,The length of the statement  "		if (DialogResult.Yes != MessageBox.Show (this' this.strWarnOnSave + "\n\nData maybe lost if saved. Do you want to continue saving?"' "Warning"' MessageBoxButtons.YesNo' MessageBoxIcon.Warning' MessageBoxDefaultButton.Button2)) { " is 228.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The length of the statement  "		this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect."; " is 135.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SubrecordEditor)); " is 136.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecord,The length of the statement  "	} else if (!Settings.Default.UseHexSubRecordEditor && sr.Structure != null && sr.Structure.elements != null && sr.Structure.elements.Length > 0 && sr.Structure.elements [0].type != ElementValueType.Blob && !sr.Structure.UseHexEditor) { " is 235.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The length of the statement  "	this.listSubrecord.AddBindingColumn ("IsValid"' "*"' 20' new Func<SubRecord' string> (a => a.IsValid ? "*" : string.Empty)); " is 124.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,SubrecordListEditor_SizeChanged,The length of the statement  "		descColumn.Width = Width - totalWidth - SystemInformation.VerticalScrollBarWidth - SystemInformation.FrameBorderSize.Width; " is 123.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The length of the statement  "	System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager (typeof(SubrecordListEditor)); " is 140.
Long Statement,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The length of the statement  "	this.listSubrecord.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler (this.listSubrecord_MouseDoubleClick); " is 120.
Long Statement,TESVSnip,Program,F:\newReposMay17\figment_tesvsnip\Application\Program.cs,CurrentDomainUnhandledException,The length of the statement  "		string errMsg = "Message: " + ex.Message + Environment.NewLine + Environment.NewLine + "StackTrace: " + ex.StackTrace + Environment.NewLine + Environment.NewLine + "Source: " + ex.Source + Environment.NewLine + Environment.NewLine + "GetType: " + ex.GetType ().ToString (); " is 273.
Long Statement,TESVSnip,Program,F:\newReposMay17\figment_tesvsnip\Application\Program.cs,ApplicationThreadException,The length of the statement  "		string errMsg = "Message: " + e.Exception.Message + Environment.NewLine + Environment.NewLine + "StackTrace: " + e.Exception.StackTrace + Environment.NewLine + Environment.NewLine + "Source: " + e.Exception.Source + Environment.NewLine + Environment.NewLine + "GetType: " + e.Exception.GetType ().ToString (); " is 309.
Complex Conditional,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse,The conditional expression  "r2.Name != "REFR" && r2.Name != "ACHR" && r2.Name != "NAVM" && r2.Name != "INFO""  is complex.
Complex Conditional,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanRecurse2,The conditional expression  "r2.Name == r3.Name && r2.Size == r3.Size && r2.SubRecords.Count == r3.SubRecords.Count && r2.Flags1 == r3.Flags1 && r2.Flags2 == r3.Flags2 && r2.Flags3 == r3.Flags3"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The conditional expression  "!force && IsVisible (pluginTreeContent) && IsVisible (subrecordListContent) && IsVisible (htmlContent)"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The conditional expression  "(CurrentGroup == 0 && es.group != 0) || (CurrentGroup != 0 && es.group != 0 && CurrentGroup != es.group)"  is complex.
Complex Conditional,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The conditional expression  "es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString"  is complex.
Complex Conditional,TESVSnip.UI.Forms,DataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_KeyPress,The conditional expression  "!char.IsControl (e.KeyChar) && !char.IsDigit (e.KeyChar) && !char.IsLetter (e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexOnlyKeyPress,The conditional expression  "c != 'a' && c != 'b' && c != 'c' && c != 'd' && c != 'e' && c != 'f'"  is complex.
Complex Conditional,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_KeyPress,The conditional expression  "!char.IsControl (e.KeyChar) && !char.IsDigit (e.KeyChar) && !char.IsLetter (e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_KeyPress,The conditional expression  "!char.IsControl (e.KeyChar) && !char.IsDigit (e.KeyChar) && !char.IsLetter (e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,webBrowser1_PreviewKeyDown,The conditional expression  "e.Control && !e.Alt && !e.Shift && e.KeyCode == Keys.C"  is complex.
Complex Conditional,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The conditional expression  "lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255"  is complex.
Complex Conditional,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,tbName_KeyPress,The conditional expression  "!char.IsControl (e.KeyChar) && !char.IsDigit (e.KeyChar) && !char.IsLetter (e.KeyChar) && e.KeyChar != '_'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'C'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'A'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,ObjectBindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'C'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,ObjectBindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,BindingListView_KeyDown,The conditional expression  "e.Control && !e.Shift && !e.Alt && e.KeyValue == 'A'"  is complex.
Complex Conditional,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The conditional expression  "names == null || names.Length == 0 || values == null || values.Length == 0 || names.Length != values.Length"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateScrollSize,The conditional expression  "VScrollBarVisible && _byteProvider != null && _byteProvider.Length > 0 && _iHexMaxHBytes != 0"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,CreateCaret,The conditional expression  "_byteProvider == null || _keyInterpreter == null || _caretVisible || !Focused"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The conditional expression  "_keyInterpreter != null && Focused && _bytePos != -1 && Enabled"  is complex.
Complex Conditional,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentByteSign,The conditional expression  "rec.Top < 0 || rec.Left < 0 || rec.Width <= 0 || rec.Height <= 0"  is complex.
Complex Conditional,BrightIdeasSoftware,CellEditKeyEngine,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,The conditional expression  "(isGoingLeft && displayIndex == 0) || (!isGoingLeft && displayIndex == editableColumns.Count - 1)"  is complex.
Complex Conditional,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,HandleTimerTick,The conditional expression  "(IsLeftMouseButtonDown && (Control.MouseButtons & MouseButtons.Left) != MouseButtons.Left) || (IsMiddleMouseButtonDown && (Control.MouseButtons & MouseButtons.Middle) != MouseButtons.Middle) || (IsRightMouseButtonDown && (Control.MouseButtons & MouseButtons.Right) != MouseButtons.Right)"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The conditional expression  "View != View.Details || hti.ColumnIndex == 0 || hti.SubItem == null || hti.Column == null"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetCellToolTip,The conditional expression  "subItem != null && !String.IsNullOrEmpty (subItem.Url) && subItem.Url != subItem.Text && HotCellHitLocation == HitTestLocation.Text"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetupBaseImageList,The conditional expression  "rowHeight == -1 || View != View.Details || (shadowedImageList != null && shadowedImageList.ImageSize.Height == rowHeight)"  is complex.
Complex Conditional,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnMouseUp,The conditional expression  "UseHyperlinks && args.HitTest.HitTestLocation == HitTestLocation.Text && args.SubItem != null && !String.IsNullOrEmpty (args.SubItem.Url)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetForegroundColor,The conditional expression  "IsItemSelected && !ListView.UseTranslucentSelection && (Column.Index == 0 || ListView.FullRowSelect)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetTextBackgroundColor,The conditional expression  "IsItemSelected && !ListView.UseTranslucentSelection && (Column.Index == 0 || ListView.FullRowSelect)"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdi,The conditional expression  "IsDrawBackground && IsItemSelected && Column.Index == 0 && !ListView.FullRowSelect"  is complex.
Complex Conditional,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawTextGdiPlus,The conditional expression  "IsDrawBackground && IsItemSelected && Column.Index == 0 && !ListView.FullRowSelect"  is complex.
Complex Conditional,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,NeedsCustomDraw,The conditional expression  "column.HasHeaderImage || !column.ShowTextInHeader || column.IsHeaderVertical || HasFilterIndicator (column) || column.TextAlign != column.HeaderTextAlign || NeedsCustomDraw (column.HeaderFormatStyle)"  is complex.
Complex Conditional,BrightIdeasSoftware,ToolTipControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,ApplyEventFormatting,The conditional expression  "!args.IsBalloon.HasValue && !args.BackColor.HasValue && !args.ForeColor.HasValue && args.Title == null && !args.StandardIcon.HasValue && !args.AutoPopDelay.HasValue && args.Font == null"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,listSearchView_KeyDown,The conditional expression  "e.KeyCode == Keys.Enter && e.Control && !e.Alt && !e.Shift"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecord,The conditional expression  "!Settings.Default.UseHexSubRecordEditor && sr.Structure != null && sr.Structure.elements != null && sr.Structure.elements.Length > 0 && sr.Structure.elements [0].type != ElementValueType.Blob && !sr.Structure.UseHexEditor"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,listSubrecord_KeyDown,The conditional expression  "e.KeyCode == Keys.C && e.Control && !e.Alt && !e.Shift"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,listSubrecord_KeyDown,The conditional expression  "e.KeyCode == Keys.V && e.Control && !e.Alt && !e.Shift"  is complex.
Complex Conditional,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,listSubrecord_KeyDown,The conditional expression  "e.KeyCode == Keys.Delete && !e.Control && !e.Alt && !e.Shift"  is complex.
Virtual Method Call from Constructor,BrightIdeasSoftware,AutoCompleteCellEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The constructor "AutoCompleteCellEditor" calls a virtual method "GetItemCount".
Virtual Method Call from Constructor,BrightIdeasSoftware,AutoCompleteCellEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The constructor "AutoCompleteCellEditor" calls a virtual method "GetModelObject".
Empty Catch Block,TESVSnip.UI.Services,PluginStore,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\PluginStore.cs,Cleanup,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Services,Scripting,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Scripting.cs,Initialize,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,MainView,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,CloseStringEditor,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LoadDockingWindows,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,MainView_Shown,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,RegisterMessageFilter,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SaveDockingWindows,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,htmlContent_OnLinkClicked,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,consoleToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,EditRecords,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,LoadSearches,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,SaveSearches,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,filterTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_QueryItemText,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FitRectOnDesktop,The method has an empty catch block.
Empty Catch Block,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,EnsureModelVisible,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetControlValue,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,Munger,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Munger.cs,PutProperty,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,ImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetImageFromAspect,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,BrightIdeasSoftware,VirtualObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\VirtualObjectListView.cs,SetVirtualListSize,The method has an empty catch block.
Empty Catch Block,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The method has an empty catch block.
Empty Catch Block,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_SizeChanged,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecordAddMaster_DropDownItemClicked,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,contextMenuRecordCopyTo_DropDownItemClicked,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,listSearchView_BeforeCreatingGroups,The method has an empty catch block.
Empty Catch Block,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,EditSelectedSubrecordHex,The method has an empty catch block.
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: for (int i = 0; i < args.Length; ++i) {  	string arg = args [i];  	if (string.IsNullOrEmpty (arg)) {  		continue;  	}  	if (arg [0] == '-' || arg [0] == '/') {  		if (arg.Length == 1) {  			continue;  		}  		switch (char.ToLower (arg [1])) {  		case 'c':  			this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  			break;  		}  	} else {  		this._plugins.Add (arg);  	}  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: for (int i = 0; i < args.Length; ++i) {  	string arg = args [i];  	if (string.IsNullOrEmpty (arg)) {  		continue;  	}  	if (arg [0] == '-' || arg [0] == '/') {  		if (arg.Length == 1) {  			continue;  		}  		switch (char.ToLower (arg [1])) {  		case 'c':  			this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  			break;  		}  	} else {  		this._plugins.Add (arg);  	}  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: for (int i = 0; i < args.Length; ++i) {  	string arg = args [i];  	if (string.IsNullOrEmpty (arg)) {  		continue;  	}  	if (arg [0] == '-' || arg [0] == '/') {  		if (arg.Length == 1) {  			continue;  		}  		switch (char.ToLower (arg [1])) {  		case 'c':  			this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  			break;  		}  	} else {  		this._plugins.Add (arg);  	}  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: if (arg [0] == '-' || arg [0] == '/') {  	if (arg.Length == 1) {  		continue;  	}  	switch (char.ToLower (arg [1])) {  	case 'c':  		this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  		break;  	}  } else {  	this._plugins.Add (arg);  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: if (arg [0] == '-' || arg [0] == '/') {  	if (arg.Length == 1) {  		continue;  	}  	switch (char.ToLower (arg [1])) {  	case 'c':  		this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  		break;  	}  } else {  	this._plugins.Add (arg);  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: if (arg [0] == '-' || arg [0] == '/') {  	if (arg.Length == 1) {  		continue;  	}  	switch (char.ToLower (arg [1])) {  	case 'c':  		this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  		break;  	}  } else {  	this._plugins.Add (arg);  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: switch (char.ToLower (arg [1])) {  case 'c':  	this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  	break;  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: switch (char.ToLower (arg [1])) {  case 'c':  	this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  	break;  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: switch (char.ToLower (arg [1])) {  case 'c':  	this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  	break;  }  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  
Magic Number,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following statement contains a magic number: this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundIncrementalSearch,The following statement contains a magic number: if (counter != prevCount) {  	prevCount = counter;  	if (counter % 10 == 0) {  		this.UpdateBackgroundProgress (counter);  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundIncrementalSearch,The following statement contains a magic number: if (counter % 10 == 0) {  	this.UpdateBackgroundProgress (counter);  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundNonConformingRecordIncrementalSearch,The following statement contains a magic number: if (counter != prevCount) {  	prevCount = counter;  	if (counter % 10 == 0) {  		this.UpdateBackgroundProgress (counter);  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,BackgroundNonConformingRecordIncrementalSearch,The following statement contains a magic number: if (counter % 10 == 0) {  	this.UpdateBackgroundProgress (counter);  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (ctx.type == SearchType.FormID) {  	if (string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	uint searchID;  	if (!uint.TryParse (ctx.text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  		PostStatusWarning ("Invalid FormID");  		return null;  	}  	searchFunction = (BaseRecord node) => {  		var rec = node as Record;  		if (ctx.updateFunc != null && ctx.updateFunc (node))  			return true;  		return (rec != null) && rec.FormID == searchID;  	};  } else if (ctx.type == SearchType.EditorID || ctx.type == SearchType.TypeEditorIdSearch) {  	if (ctx.type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.EditorID && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = string.IsNullOrEmpty (ctx.text) ? null : ctx.text.ToLowerInvariant ();  	searchFunction = (BaseRecord node) => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FullSearch || ctx.type == SearchType.TypeFullSearch) {  	if (ctx.type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = ctx.text.ToLowerInvariant ();  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FormIDRef) {  	// Back reference form id search  	if (string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	uint searchID;  	if (!uint.TryParse (ctx.text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  		PostStatusWarning ("Invalid FormID");  		return null;  	}  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			rec.MatchRecordStructureToRecord ();  			if ((from sr in rec.SubRecords  			from elem in rec.EnumerateElements (sr)  			let es = elem.Structure  			where es != null && es.type == ElementValueType.FormID  			select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  				return true;  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (ctx.type == SearchType.FormID) {  	if (string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	uint searchID;  	if (!uint.TryParse (ctx.text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  		PostStatusWarning ("Invalid FormID");  		return null;  	}  	searchFunction = (BaseRecord node) => {  		var rec = node as Record;  		if (ctx.updateFunc != null && ctx.updateFunc (node))  			return true;  		return (rec != null) && rec.FormID == searchID;  	};  } else if (ctx.type == SearchType.EditorID || ctx.type == SearchType.TypeEditorIdSearch) {  	if (ctx.type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.EditorID && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = string.IsNullOrEmpty (ctx.text) ? null : ctx.text.ToLowerInvariant ();  	searchFunction = (BaseRecord node) => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FullSearch || ctx.type == SearchType.TypeFullSearch) {  	if (ctx.type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = ctx.text.ToLowerInvariant ();  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FormIDRef) {  	// Back reference form id search  	if (string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	uint searchID;  	if (!uint.TryParse (ctx.text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  		PostStatusWarning ("Invalid FormID");  		return null;  	}  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			rec.MatchRecordStructureToRecord ();  			if ((from sr in rec.SubRecords  			from elem in rec.EnumerateElements (sr)  			let es = elem.Structure  			where es != null && es.type == ElementValueType.FormID  			select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  				return true;  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (ctx.type == SearchType.EditorID || ctx.type == SearchType.TypeEditorIdSearch) {  	if (ctx.type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.EditorID && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = string.IsNullOrEmpty (ctx.text) ? null : ctx.text.ToLowerInvariant ();  	searchFunction = (BaseRecord node) => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FullSearch || ctx.type == SearchType.TypeFullSearch) {  	if (ctx.type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = ctx.text.ToLowerInvariant ();  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FormIDRef) {  	// Back reference form id search  	if (string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	uint searchID;  	if (!uint.TryParse (ctx.text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  		PostStatusWarning ("Invalid FormID");  		return null;  	}  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			rec.MatchRecordStructureToRecord ();  			if ((from sr in rec.SubRecords  			from elem in rec.EnumerateElements (sr)  			let es = elem.Structure  			where es != null && es.type == ElementValueType.FormID  			select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  				return true;  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (ctx.type == SearchType.EditorID || ctx.type == SearchType.TypeEditorIdSearch) {  	if (ctx.type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.EditorID && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = string.IsNullOrEmpty (ctx.text) ? null : ctx.text.ToLowerInvariant ();  	searchFunction = (BaseRecord node) => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FullSearch || ctx.type == SearchType.TypeFullSearch) {  	if (ctx.type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.rectype)) {  		return null;  	}  	if (ctx.type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	string searchString = ctx.text.ToLowerInvariant ();  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			bool typeOk = true;  			if (ctx.type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  } else if (ctx.type == SearchType.FormIDRef) {  	// Back reference form id search  	if (string.IsNullOrEmpty (ctx.text)) {  		return null;  	}  	uint searchID;  	if (!uint.TryParse (ctx.text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  		PostStatusWarning ("Invalid FormID");  		return null;  	}  	searchFunction = node => {  		var rec = node as Record;  		if (rec != null) {  			rec.MatchRecordStructureToRecord ();  			if ((from sr in rec.SubRecords  			from elem in rec.EnumerateElements (sr)  			let es = elem.Structure  			where es != null && es.type == ElementValueType.FormID  			select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  				return true;  			}  		}  		if (ctx.updateFunc != null && ctx.updateFunc (node)) {  			return true;  		}  		return false;  	};  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: searchFunction = (BaseRecord node) => {  	var rec = node as Record;  	if (rec != null) {  		bool typeOk = true;  		if (ctx.type == SearchType.TypeEditorIdSearch) {  			typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  		}  		if (typeOk) {  			if (string.IsNullOrEmpty (searchString)) {  				return true;  			} else if (ctx.partial) {  				var val = rec.DescriptiveName.ToLowerInvariant ();  				if (val.Contains (searchString)) {  					return true;  				}  			} else {  				var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  				if (val == searchString) {  					return true;  				}  			}  		}  	}  	if (ctx.updateFunc != null && ctx.updateFunc (node)) {  		return true;  	}  	return false;  };  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: searchFunction = (BaseRecord node) => {  	var rec = node as Record;  	if (rec != null) {  		bool typeOk = true;  		if (ctx.type == SearchType.TypeEditorIdSearch) {  			typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  		}  		if (typeOk) {  			if (string.IsNullOrEmpty (searchString)) {  				return true;  			} else if (ctx.partial) {  				var val = rec.DescriptiveName.ToLowerInvariant ();  				if (val.Contains (searchString)) {  					return true;  				}  			} else {  				var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  				if (val == searchString) {  					return true;  				}  			}  		}  	}  	if (ctx.updateFunc != null && ctx.updateFunc (node)) {  		return true;  	}  	return false;  };  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (rec != null) {  	bool typeOk = true;  	if (ctx.type == SearchType.TypeEditorIdSearch) {  		typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  	}  	if (typeOk) {  		if (string.IsNullOrEmpty (searchString)) {  			return true;  		} else if (ctx.partial) {  			var val = rec.DescriptiveName.ToLowerInvariant ();  			if (val.Contains (searchString)) {  				return true;  			}  		} else {  			var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  			if (val == searchString) {  				return true;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (rec != null) {  	bool typeOk = true;  	if (ctx.type == SearchType.TypeEditorIdSearch) {  		typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.rectype' true) == 0;  	}  	if (typeOk) {  		if (string.IsNullOrEmpty (searchString)) {  			return true;  		} else if (ctx.partial) {  			var val = rec.DescriptiveName.ToLowerInvariant ();  			if (val.Contains (searchString)) {  				return true;  			}  		} else {  			var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  			if (val == searchString) {  				return true;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (typeOk) {  	if (string.IsNullOrEmpty (searchString)) {  		return true;  	} else if (ctx.partial) {  		var val = rec.DescriptiveName.ToLowerInvariant ();  		if (val.Contains (searchString)) {  			return true;  		}  	} else {  		var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  		if (val == searchString) {  			return true;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (typeOk) {  	if (string.IsNullOrEmpty (searchString)) {  		return true;  	} else if (ctx.partial) {  		var val = rec.DescriptiveName.ToLowerInvariant ();  		if (val.Contains (searchString)) {  			return true;  		}  	} else {  		var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  		if (val == searchString) {  			return true;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (string.IsNullOrEmpty (searchString)) {  	return true;  } else if (ctx.partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (string.IsNullOrEmpty (searchString)) {  	return true;  } else if (ctx.partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (ctx.partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,PerformSearch,The following statement contains a magic number: if (ctx.partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < plugin.Masters.Length - 1; i++) {  	if (plugin.Masters [i] == null) {  		missingMasters = true;  		continue;  	}  	var tes4 = plugin.Records.OfType<Record> ().FirstOrDefault (x => x.Name.StartsWith ("TES"));  	if (plugin.Masters [i].Records.Count < 2 || tes4 == null) {  		continue;  	}  	var match = (uint)plugin.Masters.Count (x => x.Name == "MAST");  	match <<= 24;  	uint mask = (uint)i << 24;  	for (int j = 1; j < plugin.Masters [i].Records.Count; j++) {  		this.cleanRecurse (plugin.Masters [i].Records [j] as Rec' match' mask' lookup);  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < plugin.Masters.Length - 1; i++) {  	if (plugin.Masters [i] == null) {  		missingMasters = true;  		continue;  	}  	var tes4 = plugin.Records.OfType<Record> ().FirstOrDefault (x => x.Name.StartsWith ("TES"));  	if (plugin.Masters [i].Records.Count < 2 || tes4 == null) {  		continue;  	}  	var match = (uint)plugin.Masters.Count (x => x.Name == "MAST");  	match <<= 24;  	uint mask = (uint)i << 24;  	for (int j = 1; j < plugin.Masters [i].Records.Count; j++) {  		this.cleanRecurse (plugin.Masters [i].Records [j] as Rec' match' mask' lookup);  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < plugin.Masters.Length - 1; i++) {  	if (plugin.Masters [i] == null) {  		missingMasters = true;  		continue;  	}  	var tes4 = plugin.Records.OfType<Record> ().FirstOrDefault (x => x.Name.StartsWith ("TES"));  	if (plugin.Masters [i].Records.Count < 2 || tes4 == null) {  		continue;  	}  	var match = (uint)plugin.Masters.Count (x => x.Name == "MAST");  	match <<= 24;  	uint mask = (uint)i << 24;  	for (int j = 1; j < plugin.Masters [i].Records.Count; j++) {  		this.cleanRecurse (plugin.Masters [i].Records [j] as Rec' match' mask' lookup);  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: if (plugin.Masters [i].Records.Count < 2 || tes4 == null) {  	continue;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,cleanEspToolStripMenuItem_Click,The following statement contains a magic number: match <<= 24;  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: while (recs.Count > 0) {  	Rec rec = recs.Dequeue ();  	if (rec is GroupRecord) {  		var gr = (GroupRecord)rec;  		if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  			for (int i = 0; i < gr.Records.Count; i++) {  				recs.Enqueue (gr.Records [i] as Rec);  			}  		}  	} else {  		var r = (Record)rec;  		string edid = string.Empty;  		byte chance = 0;  		byte flags = 0;  		if ((r.FormID & 0xff000000) != 0) {  			continue;  		}  		switch (r.Name) {  		case "LVLI":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLI>");  			}  			sb3.Length = 0;  			break;  		case "LVLN":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLN>");  			}  			sb3.Length = 0;  			break;  		case "LVSP":  			for (int i = 0; i < r.SubRecords.Count; i++) {  				if (r.SubRecords [i].Name == "EDID") {  					edid = r.SubRecords [i].GetStrData ();  				} else if (r.SubRecords [i].Name == "LVLD") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					chance = data [0];  				} else if (r.SubRecords [i].Name == "LVLF") {  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					flags = data [0];  				} else if (r.SubRecords [i].Name == "LVLO") {  					if (r.SubRecords [i].Size != 12) {  						continue;  					}  					byte[] data = r.SubRecords [i].GetReadonlyData ();  					uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  					// if ((formid & 0xff000000) != mask) continue;  					sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  				}  			}  			if (sb3.Length > 0) {  				sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  				sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  				sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  				sb2.Append (sb3.ToString ());  				sb2.AppendLine ("    </LVLC>");  			}  			sb3.Length = 0;  			break;  		}  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (rec is GroupRecord) {  	var gr = (GroupRecord)rec;  	if (gr.ContentsType == "LVLI" || gr.ContentsType == "LVLN" || gr.ContentsType == "LVLC") {  		for (int i = 0; i < gr.Records.Count; i++) {  			recs.Enqueue (gr.Records [i] as Rec);  		}  	}  } else {  	var r = (Record)rec;  	string edid = string.Empty;  	byte chance = 0;  	byte flags = 0;  	if ((r.FormID & 0xff000000) != 0) {  		continue;  	}  	switch (r.Name) {  	case "LVLI":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLI>");  		}  		sb3.Length = 0;  		break;  	case "LVLN":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLN>");  		}  		sb3.Length = 0;  		break;  	case "LVSP":  		for (int i = 0; i < r.SubRecords.Count; i++) {  			if (r.SubRecords [i].Name == "EDID") {  				edid = r.SubRecords [i].GetStrData ();  			} else if (r.SubRecords [i].Name == "LVLD") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				chance = data [0];  			} else if (r.SubRecords [i].Name == "LVLF") {  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				flags = data [0];  			} else if (r.SubRecords [i].Name == "LVLO") {  				if (r.SubRecords [i].Size != 12) {  					continue;  				}  				byte[] data = r.SubRecords [i].GetReadonlyData ();  				uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  				// if ((formid & 0xff000000) != mask) continue;  				sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  			}  		}  		if (sb3.Length > 0) {  			sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  			sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  			sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  			sb2.Append (sb3.ToString ());  			sb2.AppendLine ("    </LVLC>");  		}  		sb3.Length = 0;  		break;  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Size != 12) {  	continue;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Size != 12) {  	continue;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: for (int i = 0; i < r.SubRecords.Count; i++) {  	if (r.SubRecords [i].Name == "EDID") {  		edid = r.SubRecords [i].GetStrData ();  	} else if (r.SubRecords [i].Name == "LVLD") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		chance = data [0];  	} else if (r.SubRecords [i].Name == "LVLF") {  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		flags = data [0];  	} else if (r.SubRecords [i].Name == "LVLO") {  		if (r.SubRecords [i].Size != 12) {  			continue;  		}  		byte[] data = r.SubRecords [i].GetReadonlyData ();  		uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  		// if ((formid & 0xff000000) != mask) continue;  		sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "EDID") {  	edid = r.SubRecords [i].GetStrData ();  } else if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLD") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	chance = data [0];  } else if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLF") {  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	flags = data [0];  } else if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Name == "LVLO") {  	if (r.SubRecords [i].Size != 12) {  		continue;  	}  	byte[] data = r.SubRecords [i].GetReadonlyData ();  	uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  	// if ((formid & 0xff000000) != mask) continue;  	sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: if (r.SubRecords [i].Size != 12) {  	continue;  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following statement contains a magic number: sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,MainView,The following statement contains a magic number: mruMenu = new MruStripMenu (recentFilelToolStripMenuItem' OnMruFile' mruRegKey + "\\MRU"' true' 16);  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,CreateSearchWindow,The following statement contains a magic number: if (searchform != null) {  	if (searchform.Pane != null) {  		// second item in list  		form.Show (searchform.Pane' null);  	} else if (searchform.PanelPane != null) {  		form.Show (searchform.PanelPane' null);  	}  } else {  	if (dockPanel.ActiveDocumentPane != null) {  		form.Show (dockPanel.ActiveDocumentPane' DockAlignment.Bottom' 0.33);  	} else {  		form.Show (dockPanel' DockState.Document);  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,CreateSearchWindow,The following statement contains a magic number: if (dockPanel.ActiveDocumentPane != null) {  	form.Show (dockPanel.ActiveDocumentPane' DockAlignment.Bottom' 0.33);  } else {  	form.Show (dockPanel' DockState.Document);  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,CreateSearchWindow,The following statement contains a magic number: form.Show (dockPanel.ActiveDocumentPane' DockAlignment.Bottom' 0.33);  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: try {  	if (InvokeRequired) {  		Invoke (new Action<string' Color> (SendStatusText)' new object[] {  			text'  			color  		});  	} else {  		toolStripStatusLabel.ForeColor = color;  		toolStripStatusLabel.Text = text;  		if (statusTimer == null) {  			statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  				toolStripStatusLabel.Text = string.Empty;  			})' new object[] {  				string.Empty  			})' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  		} else {  			statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  		}  	}  } catch (Exception) {  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: try {  	if (InvokeRequired) {  		Invoke (new Action<string' Color> (SendStatusText)' new object[] {  			text'  			color  		});  	} else {  		toolStripStatusLabel.ForeColor = color;  		toolStripStatusLabel.Text = text;  		if (statusTimer == null) {  			statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  				toolStripStatusLabel.Text = string.Empty;  			})' new object[] {  				string.Empty  			})' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  		} else {  			statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  		}  	}  } catch (Exception) {  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: if (InvokeRequired) {  	Invoke (new Action<string' Color> (SendStatusText)' new object[] {  		text'  		color  	});  } else {  	toolStripStatusLabel.ForeColor = color;  	toolStripStatusLabel.Text = text;  	if (statusTimer == null) {  		statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  			toolStripStatusLabel.Text = string.Empty;  		})' new object[] {  			string.Empty  		})' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  	} else {  		statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: if (InvokeRequired) {  	Invoke (new Action<string' Color> (SendStatusText)' new object[] {  		text'  		color  	});  } else {  	toolStripStatusLabel.ForeColor = color;  	toolStripStatusLabel.Text = text;  	if (statusTimer == null) {  		statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  			toolStripStatusLabel.Text = string.Empty;  		})' new object[] {  			string.Empty  		})' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  	} else {  		statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  	}  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: if (statusTimer == null) {  	statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  		toolStripStatusLabel.Text = string.Empty;  	})' new object[] {  		string.Empty  	})' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  } else {  	statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: if (statusTimer == null) {  	statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  		toolStripStatusLabel.Text = string.Empty;  	})' new object[] {  		string.Empty  	})' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  } else {  	statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: statusTimer = new Timer (o => Invoke (new TimerCallback (o2 => {  	toolStripStatusLabel.Text = string.Empty;  })' new object[] {  	string.Empty  })' string.Empty' TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,SendStatusText,The following statement contains a magic number: statusTimer.Change (TimeSpan.FromSeconds (15)' TimeSpan.FromMilliseconds (-1));  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The following statement contains a magic number: try {  	if (!force && IsVisible (pluginTreeContent) && IsVisible (subrecordListContent) && IsVisible (htmlContent)) {  		return;  	}  	dockPanel.SuspendLayout (true);  	if (force) {  		pluginTreeContent.DockPanel = null;  		subrecordListContent.DockPanel = null;  		htmlContent.DockPanel = null;  	}  	if (!IsVisible (pluginTreeContent) || force) {  		pluginTreeContent.Show (dockPanel' DockState.DockLeft);  		dockPanel.Width = Math.Max (dockPanel.Width' pluginTreeContent.MinimumSize.Width);  	}  	if (!IsVisible (subrecordListContent) || force) {  		subrecordListContent.Show (pluginTreeContent.Pane' DockAlignment.Bottom' 0.5);  	}  	if (!IsVisible (htmlContent) || force) {  		htmlContent.Show (dockPanel' DockState.Document);  	}  } catch {  } finally {  	dockPanel.ResumeLayout (true' true);  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The following statement contains a magic number: if (!IsVisible (subrecordListContent) || force) {  	subrecordListContent.Show (pluginTreeContent.Pane' DockAlignment.Bottom' 0.5);  }  
Magic Number,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,LayoutDockingWindows,The following statement contains a magic number: subrecordListContent.Show (pluginTreeContent.Pane' DockAlignment.Bottom' 0.5);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn {  	Name = "Name"'  	Text = "Name"'  	AspectName = "Name"'  	Width = 175'  	IsVisible = true'  	IsEditable = false'  	AspectGetter = x => {  		var r = x as BatchCriteria;  		return (r != null) ? r.Name : x;  	}  };  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnCond = new OLVColumn {  	Name = "Cond"'  	Text = "Cond"'  	AspectName = "Cond"'  	Width = 100'  	IsVisible = true'  	IsEditable = true'  	AspectGetter = x => (x is BatchSubrecord) ? (object)((BatchSubrecord)x).Type : (x is BatchElement) ? (object)((BatchElement)x).Type : null'  	AspectPutter = (x' v) => {  		if (x is BatchSubrecord) {  			((BatchSubrecord)x).Type = (BatchCondRecordType)v;  		}  		if (x is BatchElement) {  			((BatchElement)x).Type = (BatchCondElementType)v;  		}  	}'  };  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnValue = new OLVColumn {  	Name = "Value"'  	Text = "Value"'  	AspectName = "Value"'  	Width = 100'  	IsVisible = true'  	IsEditable = true'  	AspectGetter = x => {  		var r = x as BatchElement;  		return (r != null) ? r.Value : null;  	}  };  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (303' 343);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (303' 343);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 2;  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (12' 12);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (12' 12);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (366' 319);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (366' 319);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point (222' 343);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point (222' 343);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (389' 378);  
Magic Number,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (389' 378);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn {  	Name = "Name"'  	Text = "Name"'  	AspectName = "Name"'  	Width = 175'  	IsVisible = true'  	IsEditable = false'  	AspectGetter = x => {  		var r = x as ColumnCriteria;  		return (r != null) ? r.Name : x;  	}  };  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (303' 343);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (303' 343);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 17;  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (12' 12);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (12' 12);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (366' 319);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (366' 319);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.TabIndex = 19;  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point (222' 343);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point (222' 343);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.bApply.TabIndex = 18;  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (389' 378);  
Magic Number,TESVSnip.UI.Forms,RecordColumnSelect,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\RecordColumnSelect.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (389' 378);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn {  	Name = "Name"'  	Text = "Name"'  	AspectName = "Name"'  	Width = 175'  	IsVisible = true'  	IsEditable = false'  	AspectGetter = x => {  		var r = x as SearchCriteria;  		return (r != null) ? r.Name : x;  	}  };  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnCond = new OLVColumn {  	Name = "Cond"'  	Text = "Cond"'  	AspectName = "Cond"'  	Width = 100'  	IsVisible = true'  	IsEditable = true'  	AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null'  	AspectPutter = (x' v) => {  		if (x is SearchSubrecord) {  			((SearchSubrecord)x).Type = (SearchCondRecordType)v;  		}  		if (x is SearchElement) {  			((SearchElement)x).Type = (SearchCondElementType)v;  		}  	}'  };  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnValue = new OLVColumn {  	Name = "Value"'  	Text = "Value"'  	AspectName = "Value"'  	Width = 100'  	IsVisible = true'  	IsEditable = true'  	AspectGetter = x => {  		var r = x as SearchElement;  		return (r != null) ? r.Value : null;  	}  };  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point (124' 329);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point (124' 329);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bSave.TabIndex = 18;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (286' 329);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (286' 329);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 17;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Location = new System.Drawing.Point (86' 44);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Location = new System.Drawing.Point (86' 44);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Size = new System.Drawing.Size (275' 19);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.Size = new System.Drawing.Size (275' 19);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboRecordType.TabIndex = 20;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (8' 47);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (8' 47);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (72' 13);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (72' 13);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 21;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point (205' 329);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Location = new System.Drawing.Point (205' 329);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.bApply.TabIndex = 18;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Location = new System.Drawing.Point (86' 12);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Location = new System.Drawing.Point (86' 12);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Size = new System.Drawing.Size (230' 21);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.Size = new System.Drawing.Size (230' 21);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.cboSavedSearches.TabIndex = 22;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (8' 15);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (8' 15);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (53' 13);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (53' 13);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 23;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Location = new System.Drawing.Point (340' 11);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Location = new System.Drawing.Point (340' 11);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Size = new System.Drawing.Size (21' 21);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.Size = new System.Drawing.Size (21' 21);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnRemoveSearch.TabIndex = 24;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Location = new System.Drawing.Point (320' 11);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Location = new System.Drawing.Point (320' 11);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Size = new System.Drawing.Size (21' 21);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.Size = new System.Drawing.Size (21' 21);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.btnAddSearch.TabIndex = 26;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (5' 68);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (5' 68);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (358' 258);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (358' 258);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.TabIndex = 19;  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (372' 364);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (372' 364);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (373' 250);  
Magic Number,TESVSnip.UI.Forms,SearchFilterBasic,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterBasic.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (373' 250);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: panel1.Width = this.fpanel1.Width - 10;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.group != 0) {  	var cb = new CheckBox ();  	cb.Text = "Use this value?";  	panel1.Controls.Add (cb);  	cb.Location = new Point (10' ypos);  	ypos += 24;  	cb.Tag = new cbTag (es.group' tb);  	if (CurrentGroup != es.group) {  		cb.Checked = true;  	} else {  		tb.Enabled = false;  	}  	cb.CheckedChanged += this.CheckBox_CheckedChanged;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.group != 0) {  	var cb = new CheckBox ();  	cb.Text = "Use this value?";  	panel1.Controls.Add (cb);  	cb.Location = new Point (10' ypos);  	ypos += 24;  	cb.Tag = new cbTag (es.group' tb);  	if (CurrentGroup != es.group) {  		cb.Checked = true;  	} else {  		tb.Enabled = false;  	}  	cb.CheckedChanged += this.CheckBox_CheckedChanged;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cb.Location = new Point (10' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 24;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.optional > 0 || es.repeat > 0 && this.repeatcount > 0) {  	var cb = new CheckBox ();  	cb.Text = "Use this value?";  	panel1.Controls.Add (cb);  	cb.Location = new Point (10' ypos);  	ypos += 24;  	cb.Tag = new repeatCbTag (tb' this.elements.Count);  	if (data == null) {  		tb.Enabled = false;  	} else {  		cb.Checked = true;  	}  	cb.CheckedChanged += this.RepeatCheckBox_CheckedChanged;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.optional > 0 || es.repeat > 0 && this.repeatcount > 0) {  	var cb = new CheckBox ();  	cb.Text = "Use this value?";  	panel1.Controls.Add (cb);  	cb.Location = new Point (10' ypos);  	ypos += 24;  	cb.Tag = new repeatCbTag (tb' this.elements.Count);  	if (data == null) {  		tb.Enabled = false;  	} else {  		cb.Checked = true;  	}  	cb.CheckedChanged += this.RepeatCheckBox_CheckedChanged;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cb.Location = new Point (10' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 24;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (data != null) {  	switch (es.type) {  	case ElementValueType.UInt:  		{  			var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.Int:  		{  			var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			flagValue = (uint)v;  			flagSize = 4;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  			offset += 4;  		}  		break;  	case ElementValueType.FormID:  		tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  		offset += 4;  		break;  	case ElementValueType.Float:  		tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  		offset += 4;  		break;  	case ElementValueType.UShort:  		{  			var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  			flagValue = v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Short:  		{  			var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  			flagValue = (uint)v;  			flagSize = 2;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			var v = data [offset];  			flagValue = v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			var v = (sbyte)data [offset];  			flagValue = (uint)v;  			flagSize = 1;  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  			offset++;  		}  		break;  	case ElementValueType.String:  		{  			string s = string.Empty;  			while (data [offset] != 0) {  				s += (char)data [offset++];  			}  			offset++;  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  			string s = Encoding.Instance.GetString (data' offset + 2' len);  			offset = offset + (2 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			string s = Encoding.Instance.GetString (data' offset + 4' len);  			offset = offset + (4 + len);  			tb.Text = s;  			tb.Width += 200;  		}  		break;  	case ElementValueType.LString:  		{  			int left = data.Length - offset;  			uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  			int strOffset = offset;  			string s = null;  			if (isString) {  				s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  				tb.Text = 0.ToString ("X8");  				offset += s.Length;  			} else {  				offset += 4;  				tb.Text = id.ToString ("X8");  				if (this.strIDLookup != null) {  					s = this.strIDLookup (id);  				}  			}  			tb.Tag = new lTag (tb' s' data' strOffset' isString);  		}  		break;  	case ElementValueType.Str4:  		{  			string s = Encoding.Instance.GetString (data' offset' 4);  			offset += 4;  			tb.MaxLength = 4;  			tb.Text = s;  		}  		break;  	default:  		throw new ApplicationException ();  	}  } else {  	if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  		tb.Width += 200;  	}  	if (this.removedStrings.ContainsKey (this.boxes.Count - 1)) {  		tb.Text = this.removedStrings [this.boxes.Count - 1];  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: switch (es.type) {  case ElementValueType.UInt:  	{  		var v = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.Int:  	{  		var v = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		flagValue = (uint)v;  		flagSize = 4;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X8") : v.ToString ();  		offset += 4;  	}  	break;  case ElementValueType.FormID:  	tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  	offset += 4;  	break;  case ElementValueType.Float:  	tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  	offset += 4;  	break;  case ElementValueType.UShort:  	{  		var v = TypeConverter.h2s (data [offset]' data [offset + 1]);  		flagValue = v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Short:  	{  		var v = TypeConverter.h2ss (data [offset]' data [offset + 1]);  		flagValue = (uint)v;  		flagSize = 2;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X4") : v.ToString ();  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		var v = data [offset];  		flagValue = v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		var v = (sbyte)data [offset];  		flagValue = (uint)v;  		flagSize = 1;  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		offset++;  	}  	break;  case ElementValueType.String:  	{  		string s = string.Empty;  		while (data [offset] != 0) {  			s += (char)data [offset++];  		}  		offset++;  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (data [offset]' data [offset + 1]);  		string s = Encoding.Instance.GetString (data' offset + 2' len);  		offset = offset + (2 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		string s = Encoding.Instance.GetString (data' offset + 4' len);  		offset = offset + (4 + len);  		tb.Text = s;  		tb.Width += 200;  	}  	break;  case ElementValueType.LString:  	{  		int left = data.Length - offset;  		uint id = (left < 4) ? 0 : TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		bool isString = TypeConverter.IsLikelyString (new ArraySegment<byte> (data' offset' left));  		int strOffset = offset;  		string s = null;  		if (isString) {  			s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  			tb.Text = 0.ToString ("X8");  			offset += s.Length;  		} else {  			offset += 4;  			tb.Text = id.ToString ("X8");  			if (this.strIDLookup != null) {  				s = this.strIDLookup (id);  			}  		}  		tb.Tag = new lTag (tb' s' data' strOffset' isString);  	}  	break;  case ElementValueType.Str4:  	{  		string s = Encoding.Instance.GetString (data' offset' 4);  		offset += 4;  		tb.MaxLength = 4;  		tb.Text = s;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: flagSize = 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: flagSize = 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Text = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ("X8");  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Text = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: flagSize = 2;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 2;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: flagSize = 2;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 2;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Width += 200;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset = offset + (2 + len);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Width += 200;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset = offset + (4 + len);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Width += 200;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (isString) {  	s = TypeConverter.GetString (new ArraySegment<byte> (data' offset' data.Length - offset));  	tb.Text = 0.ToString ("X8");  	offset += s.Length;  } else {  	offset += 4;  	tb.Text = id.ToString ("X8");  	if (this.strIDLookup != null) {  		s = this.strIDLookup (id);  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.MaxLength = 4;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.String || es.type == ElementValueType.BString || es.type == ElementValueType.LString || es.type == ElementValueType.IString) {  	tb.Width += 200;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Width += 200;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Location = new Point (10' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.multiline) {  	tb.Multiline = true;  	ypos += tb.Height * 5;  	tb.Height *= 6;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.multiline) {  	tb.Multiline = true;  	ypos += tb.Height * 5;  	tb.Height *= 6;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += tb.Height * 5;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb.Height *= 6;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: l.Location = new Point (tb.Right + 10' ypos + 3);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: l.Location = new Point (tb.Right + 10' ypos + 3);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.FormID) {  	ypos += 28;  	var b = new Button ();  	b.Text = "FormID lookup";  	b.Click += this.LookupFormID_Click;  	panel1.Controls.Add (b);  	b.Location = new Point (20' ypos);  	var tb2 = new TextBox ();  	tb2.Width += 200;  	tb2.ReadOnly = true;  	panel1.Controls.Add (tb2);  	tb2.Location = new Point (b.Right + 10' ypos);  	b.Tag = new bTag (tb' tb2);  	if (es.FormIDType != null) {  		if (this.cachedFormIDs.ContainsKey (es.FormIDType)) {  			options = this.cachedFormIDs [es.FormIDType];  		} else {  			options = this.formIDScan (es.FormIDType);  			this.cachedFormIDs [es.FormIDType] = options;  		}  	}  } else if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 28;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: b.Location = new Point (20' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb2.Width += 200;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: tb2.Location = new Point (b.Right + 10' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (es.type == ElementValueType.LString) {  	ypos += 24;  	var ltag = tb.Tag as lTag;  	ltag.cb = new CheckBox ();  	ltag.cb.Width = ltag.cb.Height;  	ltag.cb.Checked = ltag.isString;  	panel1.Controls.Add (ltag.cb);  	ltag.cb.Location = new Point (8' ypos);  	ltag.str = new TextBox ();  	// ltag.str.Font = this.baseFont;  	ltag.str.Width += 200 - ltag.cb.Width + 8;  	panel1.Controls.Add (ltag.str);  	ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  	ltag.str.Text = string.IsNullOrEmpty (ltag.disp) ? string.Empty : ltag.disp;  	ypos += 24;  } else if (es.options != null) {  	options = es.options;  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 24;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ltag.cb.Location = new Point (8' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ltag.str.Width += 200 - ltag.cb.Width + 8;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ltag.str.Width += 200 - ltag.cb.Width + 8;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ltag.str.Location = new Point (ltag.cb.Location.X + ltag.cb.Width + 8' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 24;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null && options.Length > 0) {  	ypos += 28;  	var cmb = new ComboBox ();  	cmb.Tag = tb;  	cmb.Width += 200;  	for (int j = 0; j < options.Length; j += 2) {  		cmb.Items.Add (new comboBoxItem (options [j]' options [j + 1]));  	}  	cmb.KeyPress += this.cb_KeyPress;  	cmb.ContextMenu = new ContextMenu ();  	cmb.SelectedIndexChanged += this.cb_SelectedIndexChanged;  	panel1.Controls.Add (cmb);  	cmb.Location = new Point (20' ypos);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null && options.Length > 0) {  	ypos += 28;  	var cmb = new ComboBox ();  	cmb.Tag = tb;  	cmb.Width += 200;  	for (int j = 0; j < options.Length; j += 2) {  		cmb.Items.Add (new comboBoxItem (options [j]' options [j + 1]));  	}  	cmb.KeyPress += this.cb_KeyPress;  	cmb.ContextMenu = new ContextMenu ();  	cmb.SelectedIndexChanged += this.cb_SelectedIndexChanged;  	panel1.Controls.Add (cmb);  	cmb.Location = new Point (20' ypos);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null && options.Length > 0) {  	ypos += 28;  	var cmb = new ComboBox ();  	cmb.Tag = tb;  	cmb.Width += 200;  	for (int j = 0; j < options.Length; j += 2) {  		cmb.Items.Add (new comboBoxItem (options [j]' options [j + 1]));  	}  	cmb.KeyPress += this.cb_KeyPress;  	cmb.ContextMenu = new ContextMenu ();  	cmb.SelectedIndexChanged += this.cb_SelectedIndexChanged;  	panel1.Controls.Add (cmb);  	cmb.Location = new Point (20' ypos);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (options != null && options.Length > 0) {  	ypos += 28;  	var cmb = new ComboBox ();  	cmb.Tag = tb;  	cmb.Width += 200;  	for (int j = 0; j < options.Length; j += 2) {  		cmb.Items.Add (new comboBoxItem (options [j]' options [j + 1]));  	}  	cmb.KeyPress += this.cb_KeyPress;  	cmb.ContextMenu = new ContextMenu ();  	cmb.SelectedIndexChanged += this.cb_SelectedIndexChanged;  	panel1.Controls.Add (cmb);  	cmb.Location = new Point (20' ypos);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ypos += 28;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cmb.Width += 200;  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: for (int j = 0; j < options.Length; j += 2) {  	cmb.Items.Add (new comboBoxItem (options [j]' options [j + 1]));  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: j += 2
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: cmb.Location = new Point (20' ypos);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (hasFlags) {  	// add flags combo box to the side  	var ccb = new FlagComboBox ();  	ccb.Tag = tb;  	ccb.SetItems (es.flags' flagSize);  	ccb.SetState (flagValue);  	ccb.TextChanged += delegate {  		uint value = ccb.GetState ();  		var text = ccb.Tag as TextBox;  		text.Text = "0x" + value.ToString ("X");  	};  	ccb.Location = new Point (l.Location.X + l.Width + 10' tb.Top);  	ccb.Width = Math.Max (ccb.Width' Width - 50 - ccb.Location.X);  	ccb.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right;  	panel1.Controls.Add (ccb);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: if (hasFlags) {  	// add flags combo box to the side  	var ccb = new FlagComboBox ();  	ccb.Tag = tb;  	ccb.SetItems (es.flags' flagSize);  	ccb.SetState (flagValue);  	ccb.TextChanged += delegate {  		uint value = ccb.GetState ();  		var text = ccb.Tag as TextBox;  		text.Text = "0x" + value.ToString ("X");  	};  	ccb.Location = new Point (l.Location.X + l.Width + 10' tb.Top);  	ccb.Width = Math.Max (ccb.Width' Width - 50 - ccb.Location.X);  	ccb.Anchor = AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right;  	panel1.Controls.Add (ccb);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ccb.Location = new Point (l.Location.X + l.Width + 10' tb.Top);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,AddElement,The following statement contains a magic number: ccb.Width = Math.Max (ccb.Width' Width - 50 - ccb.Location.X);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: for (int j = 0; j < this.boxes.Count; j++) {  	var vt = this.valueTypes [j];  	string tbText = this.boxes [j].Text;  	var numStyle = NumberStyles.Any;  	if (tbText.StartsWith ("0x")) {  		numStyle = NumberStyles.HexNumber;  		tbText = tbText.Substring (2);  	}  	if (!this.boxes [j].Enabled) {  		continue;  	}  	switch (vt) {  	case ElementValueType.Byte: {  		byte b;  		if (!byte.TryParse (tbText' numStyle' null' out b)) {  			MessageBox.Show ("Invalid byte: " + tbText' "Error");  			return;  		}  		bytes.Add (b);  		break;  	}  	case ElementValueType.Short: {  		short s;  		if (!short.TryParse (tbText' numStyle' null' out s)) {  			MessageBox.Show ("Invalid short: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.ss2h (s);  		bytes.Add (conv [0]);  		bytes.Add (conv [1]);  		break;  	}  	case ElementValueType.UShort: {  		ushort s;  		if (!ushort.TryParse (tbText' numStyle' null' out s)) {  			MessageBox.Show ("Invalid ushort: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.s2h (s);  		bytes.Add (conv [0]);  		bytes.Add (conv [1]);  		break;  	}  	case ElementValueType.Int: {  		int i;  		if (!int.TryParse (tbText' numStyle' null' out i)) {  			MessageBox.Show ("Invalid int: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.si2h (i);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.UInt: {  		uint i;  		if (!uint.TryParse (tbText' numStyle' null' out i)) {  			MessageBox.Show ("Invalid uint: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.i2h (i);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.Float: {  		float f;  		if (!float.TryParse (tbText' numStyle' null' out f)) {  			MessageBox.Show ("Invalid float: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.f2h (f);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.FormID: {  		uint i;  		if (!uint.TryParse (tbText' NumberStyles.AllowHexSpecifier' null' out i)) {  			MessageBox.Show ("Invalid formID: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.i2h (i);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.String: {  		byte[] conv = System.Text.Encoding.Default.GetBytes (tbText);  		bytes.AddRange (conv);  		bytes.Add (0);  		break;  	}  	case ElementValueType.BString: {  		bytes.AddRange (TypeConverter.s2h ((ushort)tbText.Length));  		bytes.AddRange (System.Text.Encoding.Default.GetBytes (tbText));  		break;  	}  	case ElementValueType.IString: {  		bytes.AddRange (TypeConverter.si2h (tbText.Length));  		bytes.AddRange (System.Text.Encoding.Default.GetBytes (tbText));  		break;  	}  	case ElementValueType.LString: {  		uint i;  		var ltag = this.boxes [j].Tag as lTag;  		if (ltag != null) {  			if (!ltag.cb.Checked) {  				if (!uint.TryParse (ltag.id.Text' NumberStyles.AllowHexSpecifier' null' out i)) {  					MessageBox.Show ("Invalid string id: " + ltag.id.Text' "Error");  					return;  				}  				byte[] conv = TypeConverter.i2h (i);  				bytes.AddRange (conv);  			} else {  				byte[] conv = System.Text.Encoding.Default.GetBytes (ltag.str.Text);  				bytes.AddRange (conv);  				bytes.Add (0);  			}  		}  		break;  	}  	case ElementValueType.Str4:  		{  			var txtbytes = new byte[] {  				0x32'  				0x32'  				0x32'  				0x32  			};  			System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  			bytes.AddRange (txtbytes);  		}  		break;  	default:  		throw new ApplicationException ();  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: for (int j = 0; j < this.boxes.Count; j++) {  	var vt = this.valueTypes [j];  	string tbText = this.boxes [j].Text;  	var numStyle = NumberStyles.Any;  	if (tbText.StartsWith ("0x")) {  		numStyle = NumberStyles.HexNumber;  		tbText = tbText.Substring (2);  	}  	if (!this.boxes [j].Enabled) {  		continue;  	}  	switch (vt) {  	case ElementValueType.Byte: {  		byte b;  		if (!byte.TryParse (tbText' numStyle' null' out b)) {  			MessageBox.Show ("Invalid byte: " + tbText' "Error");  			return;  		}  		bytes.Add (b);  		break;  	}  	case ElementValueType.Short: {  		short s;  		if (!short.TryParse (tbText' numStyle' null' out s)) {  			MessageBox.Show ("Invalid short: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.ss2h (s);  		bytes.Add (conv [0]);  		bytes.Add (conv [1]);  		break;  	}  	case ElementValueType.UShort: {  		ushort s;  		if (!ushort.TryParse (tbText' numStyle' null' out s)) {  			MessageBox.Show ("Invalid ushort: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.s2h (s);  		bytes.Add (conv [0]);  		bytes.Add (conv [1]);  		break;  	}  	case ElementValueType.Int: {  		int i;  		if (!int.TryParse (tbText' numStyle' null' out i)) {  			MessageBox.Show ("Invalid int: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.si2h (i);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.UInt: {  		uint i;  		if (!uint.TryParse (tbText' numStyle' null' out i)) {  			MessageBox.Show ("Invalid uint: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.i2h (i);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.Float: {  		float f;  		if (!float.TryParse (tbText' numStyle' null' out f)) {  			MessageBox.Show ("Invalid float: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.f2h (f);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.FormID: {  		uint i;  		if (!uint.TryParse (tbText' NumberStyles.AllowHexSpecifier' null' out i)) {  			MessageBox.Show ("Invalid formID: " + tbText' "Error");  			return;  		}  		byte[] conv = TypeConverter.i2h (i);  		bytes.AddRange (conv);  		break;  	}  	case ElementValueType.String: {  		byte[] conv = System.Text.Encoding.Default.GetBytes (tbText);  		bytes.AddRange (conv);  		bytes.Add (0);  		break;  	}  	case ElementValueType.BString: {  		bytes.AddRange (TypeConverter.s2h ((ushort)tbText.Length));  		bytes.AddRange (System.Text.Encoding.Default.GetBytes (tbText));  		break;  	}  	case ElementValueType.IString: {  		bytes.AddRange (TypeConverter.si2h (tbText.Length));  		bytes.AddRange (System.Text.Encoding.Default.GetBytes (tbText));  		break;  	}  	case ElementValueType.LString: {  		uint i;  		var ltag = this.boxes [j].Tag as lTag;  		if (ltag != null) {  			if (!ltag.cb.Checked) {  				if (!uint.TryParse (ltag.id.Text' NumberStyles.AllowHexSpecifier' null' out i)) {  					MessageBox.Show ("Invalid string id: " + ltag.id.Text' "Error");  					return;  				}  				byte[] conv = TypeConverter.i2h (i);  				bytes.AddRange (conv);  			} else {  				byte[] conv = System.Text.Encoding.Default.GetBytes (ltag.str.Text);  				bytes.AddRange (conv);  				bytes.Add (0);  			}  		}  		break;  	}  	case ElementValueType.Str4:  		{  			var txtbytes = new byte[] {  				0x32'  				0x32'  				0x32'  				0x32  			};  			System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  			bytes.AddRange (txtbytes);  		}  		break;  	default:  		throw new ApplicationException ();  	}  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: if (tbText.StartsWith ("0x")) {  	numStyle = NumberStyles.HexNumber;  	tbText = tbText.Substring (2);  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: tbText = tbText.Substring (2);  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: switch (vt) {  case ElementValueType.Byte: {  	byte b;  	if (!byte.TryParse (tbText' numStyle' null' out b)) {  		MessageBox.Show ("Invalid byte: " + tbText' "Error");  		return;  	}  	bytes.Add (b);  	break;  }  case ElementValueType.Short: {  	short s;  	if (!short.TryParse (tbText' numStyle' null' out s)) {  		MessageBox.Show ("Invalid short: " + tbText' "Error");  		return;  	}  	byte[] conv = TypeConverter.ss2h (s);  	bytes.Add (conv [0]);  	bytes.Add (conv [1]);  	break;  }  case ElementValueType.UShort: {  	ushort s;  	if (!ushort.TryParse (tbText' numStyle' null' out s)) {  		MessageBox.Show ("Invalid ushort: " + tbText' "Error");  		return;  	}  	byte[] conv = TypeConverter.s2h (s);  	bytes.Add (conv [0]);  	bytes.Add (conv [1]);  	break;  }  case ElementValueType.Int: {  	int i;  	if (!int.TryParse (tbText' numStyle' null' out i)) {  		MessageBox.Show ("Invalid int: " + tbText' "Error");  		return;  	}  	byte[] conv = TypeConverter.si2h (i);  	bytes.AddRange (conv);  	break;  }  case ElementValueType.UInt: {  	uint i;  	if (!uint.TryParse (tbText' numStyle' null' out i)) {  		MessageBox.Show ("Invalid uint: " + tbText' "Error");  		return;  	}  	byte[] conv = TypeConverter.i2h (i);  	bytes.AddRange (conv);  	break;  }  case ElementValueType.Float: {  	float f;  	if (!float.TryParse (tbText' numStyle' null' out f)) {  		MessageBox.Show ("Invalid float: " + tbText' "Error");  		return;  	}  	byte[] conv = TypeConverter.f2h (f);  	bytes.AddRange (conv);  	break;  }  case ElementValueType.FormID: {  	uint i;  	if (!uint.TryParse (tbText' NumberStyles.AllowHexSpecifier' null' out i)) {  		MessageBox.Show ("Invalid formID: " + tbText' "Error");  		return;  	}  	byte[] conv = TypeConverter.i2h (i);  	bytes.AddRange (conv);  	break;  }  case ElementValueType.String: {  	byte[] conv = System.Text.Encoding.Default.GetBytes (tbText);  	bytes.AddRange (conv);  	bytes.Add (0);  	break;  }  case ElementValueType.BString: {  	bytes.AddRange (TypeConverter.s2h ((ushort)tbText.Length));  	bytes.AddRange (System.Text.Encoding.Default.GetBytes (tbText));  	break;  }  case ElementValueType.IString: {  	bytes.AddRange (TypeConverter.si2h (tbText.Length));  	bytes.AddRange (System.Text.Encoding.Default.GetBytes (tbText));  	break;  }  case ElementValueType.LString: {  	uint i;  	var ltag = this.boxes [j].Tag as lTag;  	if (ltag != null) {  		if (!ltag.cb.Checked) {  			if (!uint.TryParse (ltag.id.Text' NumberStyles.AllowHexSpecifier' null' out i)) {  				MessageBox.Show ("Invalid string id: " + ltag.id.Text' "Error");  				return;  			}  			byte[] conv = TypeConverter.i2h (i);  			bytes.AddRange (conv);  		} else {  			byte[] conv = System.Text.Encoding.Default.GetBytes (ltag.str.Text);  			bytes.AddRange (conv);  			bytes.Add (0);  		}  	}  	break;  }  case ElementValueType.Str4:  	{  		var txtbytes = new byte[] {  			0x32'  			0x32'  			0x32'  			0x32  		};  		System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  		bytes.AddRange (txtbytes);  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Forms,MediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\MediumLevelRecordEditor.cs,bSave_Click,The following statement contains a magic number: System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: try {  	this.fpanel1.ColumnStyles [0] = new ColumnStyle (SizeType.Percent' 100.0f);  	int maxWidth = this.fpanel1.Width - SystemInformation.VerticalScrollBarWidth - 8;  	int leftOffset = 0;  	// 8;  	foreach (var elem in ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = leftOffset;  				c.Width = maxWidth;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = leftOffset;  				c.Width = maxWidth;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = leftOffset;  				c.Width = maxWidth;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			this.controlMap.Add (elem' ec);  			int idx = this.fpanel1.RowCount - 1;  			this.fpanel1.Controls.Add (c' 0' idx);  			var info = new RowStyle (SizeType.Absolute' c.Size.Height + 2);  			if (idx == 0)  				this.fpanel1.RowStyles [0] = info;  			else  				this.fpanel1.RowStyles.Add (info);  			panelOffset = 0;  			++this.fpanel1.RowCount;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  	this.Error.SetError (this.bSave' this.strWarnOnSave);  	this.Error.SetIconAlignment (this.bSave' ErrorIconAlignment.MiddleLeft);  	AcceptButton = this.bCancel;  	// remove save as default button when exception occurs  	CancelButton = this.bCancel;  	UpdateDefaultButton ();  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: try {  	this.fpanel1.ColumnStyles [0] = new ColumnStyle (SizeType.Percent' 100.0f);  	int maxWidth = this.fpanel1.Width - SystemInformation.VerticalScrollBarWidth - 8;  	int leftOffset = 0;  	// 8;  	foreach (var elem in ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = leftOffset;  				c.Width = maxWidth;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = leftOffset;  				c.Width = maxWidth;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = leftOffset;  				c.Width = maxWidth;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			this.controlMap.Add (elem' ec);  			int idx = this.fpanel1.RowCount - 1;  			this.fpanel1.Controls.Add (c' 0' idx);  			var info = new RowStyle (SizeType.Absolute' c.Size.Height + 2);  			if (idx == 0)  				this.fpanel1.RowStyles [0] = info;  			else  				this.fpanel1.RowStyles.Add (info);  			panelOffset = 0;  			++this.fpanel1.RowCount;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  	this.Error.SetError (this.bSave' this.strWarnOnSave);  	this.Error.SetIconAlignment (this.bSave' ErrorIconAlignment.MiddleLeft);  	AcceptButton = this.bCancel;  	// remove save as default button when exception occurs  	CancelButton = this.bCancel;  	UpdateDefaultButton ();  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: foreach (var elem in ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = leftOffset;  			c.Width = maxWidth;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = leftOffset;  			c.Width = maxWidth;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = leftOffset;  			c.Width = maxWidth;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		this.controlMap.Add (elem' ec);  		int idx = this.fpanel1.RowCount - 1;  		this.fpanel1.Controls.Add (c' 0' idx);  		var info = new RowStyle (SizeType.Absolute' c.Size.Height + 2);  		if (idx == 0)  			this.fpanel1.RowStyles [0] = info;  		else  			this.fpanel1.RowStyles.Add (info);  		panelOffset = 0;  		++this.fpanel1.RowCount;  	}  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = leftOffset;  		c.Width = maxWidth;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = leftOffset;  		c.Width = maxWidth;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = leftOffset;  		c.Width = maxWidth;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	this.controlMap.Add (elem' ec);  	int idx = this.fpanel1.RowCount - 1;  	this.fpanel1.Controls.Add (c' 0' idx);  	var info = new RowStyle (SizeType.Absolute' c.Size.Height + 2);  	if (idx == 0)  		this.fpanel1.RowStyles [0] = info;  	else  		this.fpanel1.RowStyles.Add (info);  	panelOffset = 0;  	++this.fpanel1.RowCount;  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: if (this.fpanel1.PreferredSize.Height > this.fpanel1.Height) {  	var screen = Screen.FromPoint (Location);  	int maxHeight = Owner == null ? screen.WorkingArea.Height : Owner.Height;  	int workingSize = Math.Min (maxHeight' screen.WorkingArea.Height * 3 / 4);  	int offset = this.fpanel1.PreferredSize.Height - this.fpanel1.Height + 40;  	// height of scrollbar?  	Height = Math.Min (workingSize' Height + offset);  	if (Owner != null) {  		int yOff = (Owner.Height - Height) / 2;  		Top = Owner.Top + yOff;  	}  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: if (this.fpanel1.PreferredSize.Height > this.fpanel1.Height) {  	var screen = Screen.FromPoint (Location);  	int maxHeight = Owner == null ? screen.WorkingArea.Height : Owner.Height;  	int workingSize = Math.Min (maxHeight' screen.WorkingArea.Height * 3 / 4);  	int offset = this.fpanel1.PreferredSize.Height - this.fpanel1.Height + 40;  	// height of scrollbar?  	Height = Math.Min (workingSize' Height + offset);  	if (Owner != null) {  		int yOff = (Owner.Height - Height) / 2;  		Top = Owner.Top + yOff;  	}  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: if (this.fpanel1.PreferredSize.Height > this.fpanel1.Height) {  	var screen = Screen.FromPoint (Location);  	int maxHeight = Owner == null ? screen.WorkingArea.Height : Owner.Height;  	int workingSize = Math.Min (maxHeight' screen.WorkingArea.Height * 3 / 4);  	int offset = this.fpanel1.PreferredSize.Height - this.fpanel1.Height + 40;  	// height of scrollbar?  	Height = Math.Min (workingSize' Height + offset);  	if (Owner != null) {  		int yOff = (Owner.Height - Height) / 2;  		Top = Owner.Top + yOff;  	}  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: if (this.fpanel1.PreferredSize.Height > this.fpanel1.Height) {  	var screen = Screen.FromPoint (Location);  	int maxHeight = Owner == null ? screen.WorkingArea.Height : Owner.Height;  	int workingSize = Math.Min (maxHeight' screen.WorkingArea.Height * 3 / 4);  	int offset = this.fpanel1.PreferredSize.Height - this.fpanel1.Height + 40;  	// height of scrollbar?  	Height = Math.Min (workingSize' Height + offset);  	if (Owner != null) {  		int yOff = (Owner.Height - Height) / 2;  		Top = Owner.Top + yOff;  	}  }  
Magic Number,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,NewMediumLevelRecordEditor_Load,The following statement contains a magic number: if (Owner != null) {  	int yOff = (Owner.Height - Height) / 2;  	Top = Owner.Top + yOff;  }  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnName = new OLVColumn {  	Name = "Name"'  	Text = "Name"'  	AspectName = "Name"'  	Width = 175'  	IsVisible = true'  	IsEditable = false'  	AspectGetter = x => {  		var r = x as SearchCriteria;  		return (r != null) ? r.Name : x;  	}  };  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnCond = new OLVColumn {  	Name = "Cond"'  	Text = "Cond"'  	AspectName = "Cond"'  	Width = 100'  	IsVisible = true'  	IsEditable = true'  	AspectGetter = x => (x is SearchSubrecord) ? (object)((SearchSubrecord)x).Type : (x is SearchElement) ? (object)((SearchElement)x).Type : null'  	AspectPutter = (x' v) => {  		if (x is SearchSubrecord) {  			((SearchSubrecord)x).Type = (SearchCondRecordType)v;  		}  		if (x is SearchElement) {  			((SearchElement)x).Type = (SearchCondElementType)v;  		}  	}'  };  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeTreeList,The following statement contains a magic number: this.olvColumnValue = new OLVColumn {  	Name = "Value"'  	Text = "Value"'  	AspectName = "Value"'  	Width = 100'  	IsVisible = true'  	IsEditable = true'  	AspectGetter = x => {  		var r = x as SearchElement;  		return (r != null) ? r.Value : null;  	}  };  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point (483' 417);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Location = new System.Drawing.Point (483' 417);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bSave.TabIndex = 18;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (564' 417);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Location = new System.Drawing.Point (564' 417);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.Size = new System.Drawing.Size (75' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.bCancel.TabIndex = 17;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (3' 3);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Location = new System.Drawing.Point (3' 3);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetRowSpan (this.filterTree' 3);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (268' 393);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.Size = new System.Drawing.Size (268' 393);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.filterTree.TabIndex = 19;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListSmallTree.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.imageListFilter.ImageSize = new System.Drawing.Size (16' 16);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 3;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add (this.treeListView1' 2' 0);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point (12' 12);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point (12' 12);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 3;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size (626' 399);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size (626' 399);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.TabIndex = 20;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (277' 164);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (277' 164);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (71' 69);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (71' 69);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 20;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Location = new System.Drawing.Point (15' 10);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Location = new System.Drawing.Point (15' 10);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Size = new System.Drawing.Size (41' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.btnMoveRight.Size = new System.Drawing.Size (41' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (15' 39);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (15' 39);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (41' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (41' 23);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Location = new System.Drawing.Point (354' 3);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Location = new System.Drawing.Point (354' 3);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetRowSpan (this.treeListView1' 3);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.SelectedColumnTint = System.Drawing.Color.FromArgb (((int)(((byte)(15))))' ((int)(((byte)(245))))' ((int)(((byte)(245))))' ((int)(((byte)(245)))));  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Size = new System.Drawing.Size (269' 393);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.Size = new System.Drawing.Size (269' 393);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.treeListView1.TabIndex = 19;  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (650' 452);  
Magic Number,TESVSnip.UI.Forms,SearchFilterAdvanced,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\SearchFilterAdvanced.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (650' 452);  
Magic Number,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn ("ID"' "ID"' 80' new Func<StringHolder' string> (a => a.ID.ToString ("X8")));  
Magic Number,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn ("Plugin"' "Source"' 80' new Func<StringHolder' string> (a => a.Plugin.Name));  
Magic Number,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn ("Format"' "Format"' 50' HorizontalAlignment.Center);  
Magic Number,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,StringsEditor,The following statement contains a magic number: this.listStrings.AddBindingColumn ("Value"' "Value"' 500);  
Magic Number,TESVSnip.UI.Forms,DataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_Leave,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,DataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_Leave,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,DataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\DataEdit.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight (4' '_');  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbX.Text = TypeConverter.h2ss (data [2]' data [3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbX.Text = TypeConverter.h2ss (data [2]' data [3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbBlock.Text = TypeConverter.h2i (data [0]' data [1]' data [2]' data [3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbBlock.Text = TypeConverter.h2i (data [0]' data [1]' data [2]' data [3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbParent.Text = TypeConverter.h2i (data [0]' data [1]' data [2]' data [3]).ToString ("X8");  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,GroupEditor,The following statement contains a magic number: this.tbParent.Text = TypeConverter.h2i (data [0]' data [1]' data [2]' data [3]).ToString ("X8");  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	if (this.tbRecType.TextLength != 4) {  		this.tbRecType.Focus ();  		MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  		return;  	}  	data = new byte[4];  	Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  	break;  case 2:  case 3:  	uint block;  	if (!uint.TryParse (this.tbBlock.Text' out block)) {  		this.tbBlock.Focus ();  		MessageBox.Show ("Invalid value specified for block id");  		return;  	}  	data = TypeConverter.i2h (block);  	break;  case 4:  case 5:  	short x' y;  	if (!short.TryParse (this.tbX.Text' out x)) {  		this.tbX.Focus ();  		MessageBox.Show ("Invalid value specified for x coord");  		return;  	}  	if (!short.TryParse (this.tbY.Text' out y)) {  		this.tbY.Focus ();  		MessageBox.Show ("Invalid value specified for y coord");  		return;  	}  	data = new byte[4];  	TypeConverter.ss2h (x' data' 2);  	TypeConverter.ss2h (y' data' 0);  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	uint parent;  	if (!uint.TryParse (this.tbParent.Text' NumberStyles.AllowHexSpecifier' null' out parent)) {  		this.tbParent.Focus ();  		MessageBox.Show ("Invalid value specified for parent");  		return;  	}  	data = TypeConverter.i2h (parent);  	break;  default:  	this.cmbGroupType.Focus ();  	MessageBox.Show ("Sanity check failed; invalid group type");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: if (this.tbRecType.TextLength != 4) {  	this.tbRecType.Focus ();  	MessageBox.Show ("Invalid parent record type. Needs to be 4 characters!");  	return;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: data = new byte[4];  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: Encoding.Instance.GetBytes (this.tbRecType.Text' 0' 4' data' 0);  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: data = new byte[4];  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,bSave_Click,The following statement contains a magic number: TypeConverter.ss2h (x' data' 2);  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following statement contains a magic number: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: if (this.tbRecType.Text.Length < 4) {  	this.tbRecType.Text = this.tbRecType.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: if (this.tbRecType.Text.Length < 4) {  	this.tbRecType.Text = this.tbRecType.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,tbRecType_Leave,The following statement contains a magic number: this.tbRecType.Text = this.tbRecType.Text.PadRight (4' '_');  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: if (tb.Text.Length < 8) {  	tb.Text = tb.Text.PadLeft (8' '0');  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: if (tb.Text.Length < 8) {  	tb.Text = tb.Text.PadLeft (8' '0');  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,HexValidCheck,The following statement contains a magic number: tb.Text = tb.Text.PadLeft (8' '0');  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: if (this.checkHexValue (this.tbFlags2) && this.checkHexValue (this.tbFlags3) && this.checkHexValue (this.tbFormID)) {  	this.R.Flags1 = this.Flags1;  	this.R.Flags2 = this.Flags2;  	this.R.Flags3 = this.Flags3;  	this.R.FormID = this.FormID;  	if (this.tbName.Text.Length < 4) {  		this.tbName.Text = this.tbName.Text.PadRight (4' '_');  	}  	this.R.Name = this.tbName.Text;  	DialogResult = DialogResult.OK;  	Close ();  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: if (this.checkHexValue (this.tbFlags2) && this.checkHexValue (this.tbFlags3) && this.checkHexValue (this.tbFormID)) {  	this.R.Flags1 = this.Flags1;  	this.R.Flags2 = this.Flags2;  	this.R.Flags3 = this.Flags3;  	this.R.FormID = this.FormID;  	if (this.tbName.Text.Length < 4) {  		this.tbName.Text = this.tbName.Text.PadRight (4' '_');  	}  	this.R.Name = this.tbName.Text;  	DialogResult = DialogResult.OK;  	Close ();  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,bSave_Click,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight (4' '_');  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,HeaderEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HeaderEditor.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight (4' '_');  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.bCFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.bCFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 2) {  	this.tbWord.Text = TypeConverter.h2ss (this.bytes [pos]' this.bytes [pos + 1]).ToString ();  	this.tbWord.Enabled = true;  	this.bCWord.Enabled = true;  } else {  	this.tbWord.Enabled = false;  	this.bCWord.Enabled = false;  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: if (this.tbName.Text.Length < 4) {  	this.tbName.Text = this.tbName.Text.PadRight (4' '_');  }  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,tbName_Leave,The following statement contains a magic number: this.tbName.Text = this.tbName.Text.PadRight (4' '_');  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.Forms,HexDataEdit,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\HexDataEdit.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.MinimumSize = new System.Drawing.Size (20' 20);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.MinimumSize = new System.Drawing.Size (20' 20);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.Size = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.webBrowser1.Size = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.selectionMenuStrip.Size = new System.Drawing.Size (145' 48);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.selectionMenuStrip.Size = new System.Drawing.Size (145' 48);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size (144' 22);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.copyToolStripMenuItem.Size = new System.Drawing.Size (144' 22);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.asHTMLToolStripMenuItem.Size = new System.Drawing.Size (144' 22);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.asHTMLToolStripMenuItem.Size = new System.Drawing.Size (144' 22);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,HtmlContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\HtmlContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,OutputTextContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.MaxLength = 2147483647;  
Magic Number,TESVSnip.UI.Docking,OutputTextContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Size = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,OutputTextContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.Size = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,OutputTextContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.textBox.TabIndex = 4;  
Magic Number,TESVSnip.UI.Docking,OutputTextContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,OutputTextContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\OutputTextContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (376' 504);  
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.elementHost1.Size = new System.Drawing.Size (722' 447);  
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.elementHost1.Size = new System.Drawing.Size (722' 447);  
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (722' 447);  
Magic Number,TESVSnip.UI.Docking,InterpreterConsole,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\InterpreterConsole.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (722' 447);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockingMenuStrip.Size = new System.Drawing.Size (218' 98);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockingMenuStrip.Size = new System.Drawing.Size (218' 98);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size (217' 22);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.closeToolStripMenuItem.Size = new System.Drawing.Size (217' 22);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.floatToolStripMenuItem.Size = new System.Drawing.Size (217' 22);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.floatToolStripMenuItem.Size = new System.Drawing.Size (217' 22);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockAsTabbedDocumentToolStripMenuItem.Size = new System.Drawing.Size (217' 22);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.dockAsTabbedDocumentToolStripMenuItem.Size = new System.Drawing.Size (217' 22);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size (214' 6);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size (214' 6);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (337' 242);  
Magic Number,TESVSnip.UI.Docking,BaseDockContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\BaseDockContent.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (337' 242);  
Magic Number,TESVSnip.UI.Docking,SubrecordListContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size (192' 120);  
Magic Number,TESVSnip.UI.Docking,SubrecordListContent,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\SubrecordListContent.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size (192' 120);  
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.panelRecordEditor.Size = new System.Drawing.Size (692' 384);  
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.panelRecordEditor.Size = new System.Drawing.Size (692' 384);  
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (692' 384);  
Magic Number,TESVSnip.UI.Docking,FullRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\FullRecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (692' 384);  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size (200' 120);  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.MinimumSize = new System.Drawing.Size (200' 120);  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.Size = new System.Drawing.Size (633' 282);  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.Size = new System.Drawing.Size (633' 282);  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.subrecordPanel.TabIndex = 107;  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (633' 282);  
Magic Number,TESVSnip.UI.Docking,RecordSearchForm,F:\newReposMay17\figment_tesvsnip\Application\UI\Docking\RecordSearchForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (633' 282);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: try {  	for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  		var sselem = ss.elements [eidx];  		bool repeat = sselem.repeat > 0;  		elen = sselem.repeat > 1 ? sselem.repeat : 1;  		do {  			for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  				sselem = ss.elements [eidx + eoff];  				if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  					break;  				}  				if (!sselem.notininfo) {  					s.Append (sselem.name).Append (": ");  				}  				switch (sselem.type) {  				case ElementValueType.Int:  					{  						string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.UInt:  					{  						string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 4;  					}  					break;  				case ElementValueType.Short:  					{  						string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.UShort:  					{  						string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.Append (" (").Append (sselem.options [k]).Append (")");  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset += 2;  					}  					break;  				case ElementValueType.Byte:  					{  						string tmps = recdata [offset].ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.SByte:  					{  						string tmps = ((sbyte)recdata [offset]).ToString ();  						if (!sselem.notininfo) {  							if (sselem.hexview) {  								s.Append (recdata [offset].ToString ("X2"));  							} else {  								s.Append (tmps);  							}  							if (sselem.options != null && sselem.options.Length > 0) {  								for (int k = 0; k < sselem.options.Length; k += 2) {  									if (tmps == sselem.options [k + 1]) {  										s.AppendFormat (" ({0})"' sselem.options [k]);  									}  								}  							} else if (sselem.flags != null && sselem.flags.Length > 0) {  								int val = recdata [offset];  								var tmp2 = new StringBuilder ();  								for (int k = 0; k < sselem.flags.Length; k++) {  									if ((val & (1 << k)) != 0) {  										if (tmp2.Length > 0) {  											tmp2.Append ("' ");  										}  										tmp2.Append (sselem.flags [k]);  									}  								}  								if (tmp2.Length > 0) {  									s.AppendFormat (" ({0})"' tmp2);  								}  							}  						}  						offset++;  					}  					break;  				case ElementValueType.FormID:  					{  						uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (id != 0 && formIDLookup != null) {  							s.Append (": ").Append (formIDLookup (id));  						}  						offset += 4;  					}  					break;  				case ElementValueType.Float:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  					}  					offset += 4;  					break;  				case ElementValueType.String:  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  					break;  				case ElementValueType.Blob:  					if (!sselem.notininfo) {  						s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  					}  					offset += recdata.Length - offset;  					break;  				case ElementValueType.BString:  					{  						int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  						}  						offset += 2 + len;  					}  					break;  				case ElementValueType.IString:  					{  						int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  						}  						offset += 4 + len;  					}  					break;  				case ElementValueType.LString:  					{  						// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  						int left = recdata.Length - offset;  						var data = new ArraySegment<byte> (recdata' offset' left);  						bool isString = TypeConverter.IsLikelyString (data);  						uint id = TypeConverter.h2i (data);  						string lvalue = strLookup (id);  						if (!string.IsNullOrEmpty (lvalue) || !isString) {  							if (!sselem.notininfo) {  								s.Append (id.ToString ("X8"));  							}  							if (strLookup != null) {  								s.Append (": ").Append (lvalue);  							}  							offset += 4;  						} else {  							if (!sselem.notininfo) {  								while (recdata [offset] != 0) {  									s.Append ((char)recdata [offset++]);  								}  							} else {  								while (recdata [offset] != 0) {  									offset++;  								}  							}  							offset++;  						}  					}  					break;  				case ElementValueType.Str4:  					{  						if (!sselem.notininfo) {  							s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  						}  						offset += 4;  					}  					break;  				default:  					throw new ApplicationException ();  				}  				if (!sselem.notininfo) {  					s.AppendLine ();  				}  			}  		} while (repeat && offset < recdata.Length);  	}  	if (offset < recdata.Length) {  		s.AppendLine ();  		s.AppendLine ("Remaining Data: ");  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  } catch {  	s.AppendLine ("Warning: Subrecord doesn't seem to match the expected structure");  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eidx = 0' elen = 1; eidx < ss.elements.Length; eidx += elen) {  	var sselem = ss.elements [eidx];  	bool repeat = sselem.repeat > 0;  	elen = sselem.repeat > 1 ? sselem.repeat : 1;  	do {  		for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  			sselem = ss.elements [eidx + eoff];  			if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  				break;  			}  			if (!sselem.notininfo) {  				s.Append (sselem.name).Append (": ");  			}  			switch (sselem.type) {  			case ElementValueType.Int:  				{  					string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.UInt:  				{  					string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 4;  				}  				break;  			case ElementValueType.Short:  				{  					string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.UShort:  				{  					string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.Append (" (").Append (sselem.options [k]).Append (")");  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset += 2;  				}  				break;  			case ElementValueType.Byte:  				{  					string tmps = recdata [offset].ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.SByte:  				{  					string tmps = ((sbyte)recdata [offset]).ToString ();  					if (!sselem.notininfo) {  						if (sselem.hexview) {  							s.Append (recdata [offset].ToString ("X2"));  						} else {  							s.Append (tmps);  						}  						if (sselem.options != null && sselem.options.Length > 0) {  							for (int k = 0; k < sselem.options.Length; k += 2) {  								if (tmps == sselem.options [k + 1]) {  									s.AppendFormat (" ({0})"' sselem.options [k]);  								}  							}  						} else if (sselem.flags != null && sselem.flags.Length > 0) {  							int val = recdata [offset];  							var tmp2 = new StringBuilder ();  							for (int k = 0; k < sselem.flags.Length; k++) {  								if ((val & (1 << k)) != 0) {  									if (tmp2.Length > 0) {  										tmp2.Append ("' ");  									}  									tmp2.Append (sselem.flags [k]);  								}  							}  							if (tmp2.Length > 0) {  								s.AppendFormat (" ({0})"' tmp2);  							}  						}  					}  					offset++;  				}  				break;  			case ElementValueType.FormID:  				{  					uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (id != 0 && formIDLookup != null) {  						s.Append (": ").Append (formIDLookup (id));  					}  					offset += 4;  				}  				break;  			case ElementValueType.Float:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  				}  				offset += 4;  				break;  			case ElementValueType.String:  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  				break;  			case ElementValueType.Blob:  				if (!sselem.notininfo) {  					s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  				}  				offset += recdata.Length - offset;  				break;  			case ElementValueType.BString:  				{  					int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  					}  					offset += 2 + len;  				}  				break;  			case ElementValueType.IString:  				{  					int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  					}  					offset += 4 + len;  				}  				break;  			case ElementValueType.LString:  				{  					// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  					int left = recdata.Length - offset;  					var data = new ArraySegment<byte> (recdata' offset' left);  					bool isString = TypeConverter.IsLikelyString (data);  					uint id = TypeConverter.h2i (data);  					string lvalue = strLookup (id);  					if (!string.IsNullOrEmpty (lvalue) || !isString) {  						if (!sselem.notininfo) {  							s.Append (id.ToString ("X8"));  						}  						if (strLookup != null) {  							s.Append (": ").Append (lvalue);  						}  						offset += 4;  					} else {  						if (!sselem.notininfo) {  							while (recdata [offset] != 0) {  								s.Append ((char)recdata [offset++]);  							}  						} else {  							while (recdata [offset] != 0) {  								offset++;  							}  						}  						offset++;  					}  				}  				break;  			case ElementValueType.Str4:  				{  					if (!sselem.notininfo) {  						s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  					}  					offset += 4;  				}  				break;  			default:  				throw new ApplicationException ();  			}  			if (!sselem.notininfo) {  				s.AppendLine ();  			}  		}  	} while (repeat && offset < recdata.Length);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: do {  	for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  		sselem = ss.elements [eidx + eoff];  		if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  			break;  		}  		if (!sselem.notininfo) {  			s.Append (sselem.name).Append (": ");  		}  		switch (sselem.type) {  		case ElementValueType.Int:  			{  				string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.UInt:  			{  				string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 4;  			}  			break;  		case ElementValueType.Short:  			{  				string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.UShort:  			{  				string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.Append (" (").Append (sselem.options [k]).Append (")");  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset += 2;  			}  			break;  		case ElementValueType.Byte:  			{  				string tmps = recdata [offset].ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.SByte:  			{  				string tmps = ((sbyte)recdata [offset]).ToString ();  				if (!sselem.notininfo) {  					if (sselem.hexview) {  						s.Append (recdata [offset].ToString ("X2"));  					} else {  						s.Append (tmps);  					}  					if (sselem.options != null && sselem.options.Length > 0) {  						for (int k = 0; k < sselem.options.Length; k += 2) {  							if (tmps == sselem.options [k + 1]) {  								s.AppendFormat (" ({0})"' sselem.options [k]);  							}  						}  					} else if (sselem.flags != null && sselem.flags.Length > 0) {  						int val = recdata [offset];  						var tmp2 = new StringBuilder ();  						for (int k = 0; k < sselem.flags.Length; k++) {  							if ((val & (1 << k)) != 0) {  								if (tmp2.Length > 0) {  									tmp2.Append ("' ");  								}  								tmp2.Append (sselem.flags [k]);  							}  						}  						if (tmp2.Length > 0) {  							s.AppendFormat (" ({0})"' tmp2);  						}  					}  				}  				offset++;  			}  			break;  		case ElementValueType.FormID:  			{  				uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (id != 0 && formIDLookup != null) {  					s.Append (": ").Append (formIDLookup (id));  				}  				offset += 4;  			}  			break;  		case ElementValueType.Float:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  			}  			offset += 4;  			break;  		case ElementValueType.String:  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  			break;  		case ElementValueType.Blob:  			if (!sselem.notininfo) {  				s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  			}  			offset += recdata.Length - offset;  			break;  		case ElementValueType.BString:  			{  				int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  				}  				offset += 2 + len;  			}  			break;  		case ElementValueType.IString:  			{  				int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  				}  				offset += 4 + len;  			}  			break;  		case ElementValueType.LString:  			{  				// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  				int left = recdata.Length - offset;  				var data = new ArraySegment<byte> (recdata' offset' left);  				bool isString = TypeConverter.IsLikelyString (data);  				uint id = TypeConverter.h2i (data);  				string lvalue = strLookup (id);  				if (!string.IsNullOrEmpty (lvalue) || !isString) {  					if (!sselem.notininfo) {  						s.Append (id.ToString ("X8"));  					}  					if (strLookup != null) {  						s.Append (": ").Append (lvalue);  					}  					offset += 4;  				} else {  					if (!sselem.notininfo) {  						while (recdata [offset] != 0) {  							s.Append ((char)recdata [offset++]);  						}  					} else {  						while (recdata [offset] != 0) {  							offset++;  						}  					}  					offset++;  				}  			}  			break;  		case ElementValueType.Str4:  			{  				if (!sselem.notininfo) {  					s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  				}  				offset += 4;  			}  			break;  		default:  			throw new ApplicationException ();  		}  		if (!sselem.notininfo) {  			s.AppendLine ();  		}  	}  } while (repeat && offset < recdata.Length);  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int eoff = 0; eoff < elen && offset < recdata.Length; ++eoff) {  	sselem = ss.elements [eidx + eoff];  	if (offset == recdata.Length && eidx == ss.elements.Length - 1 && sselem.optional > 0) {  		break;  	}  	if (!sselem.notininfo) {  		s.Append (sselem.name).Append (": ");  	}  	switch (sselem.type) {  	case ElementValueType.Int:  		{  			string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.UInt:  		{  			string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 4;  		}  		break;  	case ElementValueType.Short:  		{  			string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.UShort:  		{  			string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.Append (" (").Append (sselem.options [k]).Append (")");  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset += 2;  		}  		break;  	case ElementValueType.Byte:  		{  			string tmps = recdata [offset].ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.SByte:  		{  			string tmps = ((sbyte)recdata [offset]).ToString ();  			if (!sselem.notininfo) {  				if (sselem.hexview) {  					s.Append (recdata [offset].ToString ("X2"));  				} else {  					s.Append (tmps);  				}  				if (sselem.options != null && sselem.options.Length > 0) {  					for (int k = 0; k < sselem.options.Length; k += 2) {  						if (tmps == sselem.options [k + 1]) {  							s.AppendFormat (" ({0})"' sselem.options [k]);  						}  					}  				} else if (sselem.flags != null && sselem.flags.Length > 0) {  					int val = recdata [offset];  					var tmp2 = new StringBuilder ();  					for (int k = 0; k < sselem.flags.Length; k++) {  						if ((val & (1 << k)) != 0) {  							if (tmp2.Length > 0) {  								tmp2.Append ("' ");  							}  							tmp2.Append (sselem.flags [k]);  						}  					}  					if (tmp2.Length > 0) {  						s.AppendFormat (" ({0})"' tmp2);  					}  				}  			}  			offset++;  		}  		break;  	case ElementValueType.FormID:  		{  			uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (id != 0 && formIDLookup != null) {  				s.Append (": ").Append (formIDLookup (id));  			}  			offset += 4;  		}  		break;  	case ElementValueType.Float:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  		}  		offset += 4;  		break;  	case ElementValueType.String:  		if (!sselem.notininfo) {  			while (recdata [offset] != 0) {  				s.Append ((char)recdata [offset++]);  			}  		} else {  			while (recdata [offset] != 0) {  				offset++;  			}  		}  		offset++;  		break;  	case ElementValueType.Blob:  		if (!sselem.notininfo) {  			s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  		}  		offset += recdata.Length - offset;  		break;  	case ElementValueType.BString:  		{  			int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  			}  			offset += 2 + len;  		}  		break;  	case ElementValueType.IString:  		{  			int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  			}  			offset += 4 + len;  		}  		break;  	case ElementValueType.LString:  		{  			// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  			int left = recdata.Length - offset;  			var data = new ArraySegment<byte> (recdata' offset' left);  			bool isString = TypeConverter.IsLikelyString (data);  			uint id = TypeConverter.h2i (data);  			string lvalue = strLookup (id);  			if (!string.IsNullOrEmpty (lvalue) || !isString) {  				if (!sselem.notininfo) {  					s.Append (id.ToString ("X8"));  				}  				if (strLookup != null) {  					s.Append (": ").Append (lvalue);  				}  				offset += 4;  			} else {  				if (!sselem.notininfo) {  					while (recdata [offset] != 0) {  						s.Append ((char)recdata [offset++]);  					}  				} else {  					while (recdata [offset] != 0) {  						offset++;  					}  				}  				offset++;  			}  		}  		break;  	case ElementValueType.Str4:  		{  			if (!sselem.notininfo) {  				s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  			}  			offset += 4;  		}  		break;  	default:  		throw new ApplicationException ();  	}  	if (!sselem.notininfo) {  		s.AppendLine ();  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: switch (sselem.type) {  case ElementValueType.Int:  	{  		string tmps = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.UInt:  	{  		string tmps = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 4;  	}  	break;  case ElementValueType.Short:  	{  		string tmps = TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.UShort:  	{  		string tmps = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.Append (" (").Append (sselem.options [k]).Append (")");  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset += 2;  	}  	break;  case ElementValueType.Byte:  	{  		string tmps = recdata [offset].ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.SByte:  	{  		string tmps = ((sbyte)recdata [offset]).ToString ();  		if (!sselem.notininfo) {  			if (sselem.hexview) {  				s.Append (recdata [offset].ToString ("X2"));  			} else {  				s.Append (tmps);  			}  			if (sselem.options != null && sselem.options.Length > 0) {  				for (int k = 0; k < sselem.options.Length; k += 2) {  					if (tmps == sselem.options [k + 1]) {  						s.AppendFormat (" ({0})"' sselem.options [k]);  					}  				}  			} else if (sselem.flags != null && sselem.flags.Length > 0) {  				int val = recdata [offset];  				var tmp2 = new StringBuilder ();  				for (int k = 0; k < sselem.flags.Length; k++) {  					if ((val & (1 << k)) != 0) {  						if (tmp2.Length > 0) {  							tmp2.Append ("' ");  						}  						tmp2.Append (sselem.flags [k]);  					}  				}  				if (tmp2.Length > 0) {  					s.AppendFormat (" ({0})"' tmp2);  				}  			}  		}  		offset++;  	}  	break;  case ElementValueType.FormID:  	{  		uint id = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (id.ToString ("X8"));  		}  		if (id != 0 && formIDLookup != null) {  			s.Append (": ").Append (formIDLookup (id));  		}  		offset += 4;  	}  	break;  case ElementValueType.Float:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  	}  	offset += 4;  	break;  case ElementValueType.String:  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  	break;  case ElementValueType.Blob:  	if (!sselem.notininfo) {  		s.Append (TypeConverter.GetHexData (recdata' offset' recdata.Length - offset));  	}  	offset += recdata.Length - offset;  	break;  case ElementValueType.BString:  	{  		int len = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  		}  		offset += 2 + len;  	}  	break;  case ElementValueType.IString:  	{  		int len = TypeConverter.h2si (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  		}  		offset += 4 + len;  	}  	break;  case ElementValueType.LString:  	{  		// Try to guess if string or string index.  Do not know if the external string checkbox is set or not in this code  		int left = recdata.Length - offset;  		var data = new ArraySegment<byte> (recdata' offset' left);  		bool isString = TypeConverter.IsLikelyString (data);  		uint id = TypeConverter.h2i (data);  		string lvalue = strLookup (id);  		if (!string.IsNullOrEmpty (lvalue) || !isString) {  			if (!sselem.notininfo) {  				s.Append (id.ToString ("X8"));  			}  			if (strLookup != null) {  				s.Append (": ").Append (lvalue);  			}  			offset += 4;  		} else {  			if (!sselem.notininfo) {  				while (recdata [offset] != 0) {  					s.Append ((char)recdata [offset++]);  				}  			} else {  				while (recdata [offset] != 0) {  					offset++;  				}  			}  			offset++;  		}  	}  	break;  case ElementValueType.Str4:  	{  		if (!sselem.notininfo) {  			s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  		}  		offset += 4;  	}  	break;  default:  	throw new ApplicationException ();  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.hexview) {  	s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  } else {  	s.Append (tmps);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.hexview) {  	s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  } else {  	s.Append (tmps);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int k = 0; k < sselem.options.Length; k += 2) {  	if (tmps == sselem.options [k + 1]) {  		s.AppendFormat (" ({0})"' sselem.options [k]);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: k += 2
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.hexview) {  	s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  } else {  	s.Append (tmps);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.hexview) {  	s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  } else {  	s.Append (tmps);  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]).ToString ("X8"));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int k = 0; k < sselem.options.Length; k += 2) {  	if (tmps == sselem.options [k + 1]) {  		s.AppendFormat (" ({0})"' sselem.options [k]);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: k += 2
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2i (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2ss (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int k = 0; k < sselem.options.Length; k += 2) {  	if (tmps == sselem.options [k + 1]) {  		s.AppendFormat (" ({0})"' sselem.options [k]);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: k += 2
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 2;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (TypeConverter.h2s (recdata [offset]' recdata [offset + 1]).ToString ("X4"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.Append (" (").Append (sselem.options [k]).Append (")");  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.Append (" (").Append (sselem.options [k]).Append (")");  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	uint val = TypeConverter.h2s (recdata [offset]' recdata [offset + 1]);  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int k = 0; k < sselem.options.Length; k += 2) {  	if (tmps == sselem.options [k + 1]) {  		s.Append (" (").Append (sselem.options [k]).Append (")");  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: k += 2
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 2;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (recdata [offset].ToString ("X2"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		int val = recdata [offset];  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	int val = recdata [offset];  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int k = 0; k < sselem.options.Length; k += 2) {  	if (tmps == sselem.options [k + 1]) {  		s.AppendFormat (" ({0})"' sselem.options [k]);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: k += 2
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	if (sselem.hexview) {  		s.Append (recdata [offset].ToString ("X2"));  	} else {  		s.Append (tmps);  	}  	if (sselem.options != null && sselem.options.Length > 0) {  		for (int k = 0; k < sselem.options.Length; k += 2) {  			if (tmps == sselem.options [k + 1]) {  				s.AppendFormat (" ({0})"' sselem.options [k]);  			}  		}  	} else if (sselem.flags != null && sselem.flags.Length > 0) {  		int val = recdata [offset];  		var tmp2 = new StringBuilder ();  		for (int k = 0; k < sselem.flags.Length; k++) {  			if ((val & (1 << k)) != 0) {  				if (tmp2.Length > 0) {  					tmp2.Append ("' ");  				}  				tmp2.Append (sselem.flags [k]);  			}  		}  		if (tmp2.Length > 0) {  			s.AppendFormat (" ({0})"' tmp2);  		}  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (sselem.options != null && sselem.options.Length > 0) {  	for (int k = 0; k < sselem.options.Length; k += 2) {  		if (tmps == sselem.options [k + 1]) {  			s.AppendFormat (" ({0})"' sselem.options [k]);  		}  	}  } else if (sselem.flags != null && sselem.flags.Length > 0) {  	int val = recdata [offset];  	var tmp2 = new StringBuilder ();  	for (int k = 0; k < sselem.flags.Length; k++) {  		if ((val & (1 << k)) != 0) {  			if (tmp2.Length > 0) {  				tmp2.Append ("' ");  			}  			tmp2.Append (sselem.flags [k]);  		}  	}  	if (tmp2.Length > 0) {  		s.AppendFormat (" ({0})"' tmp2);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: for (int k = 0; k < sselem.options.Length; k += 2) {  	if (tmps == sselem.options [k + 1]) {  		s.AppendFormat (" ({0})"' sselem.options [k]);  	}  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: k += 2
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TypeConverter.h2f (recdata [offset]' recdata [offset + 1]' recdata [offset + 2]' recdata [offset + 3]));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 2' len));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 2 + len;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset + 4' len));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4 + len;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!string.IsNullOrEmpty (lvalue) || !isString) {  	if (!sselem.notininfo) {  		s.Append (id.ToString ("X8"));  	}  	if (strLookup != null) {  		s.Append (": ").Append (lvalue);  	}  	offset += 4;  } else {  	if (!sselem.notininfo) {  		while (recdata [offset] != 0) {  			s.Append ((char)recdata [offset++]);  		}  	} else {  		while (recdata [offset] != 0) {  			offset++;  		}  	}  	offset++;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: if (!sselem.notininfo) {  	s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: s.Append (TESVSnip.Framework.Services.Encoding.Instance.GetString (recdata' offset' 4));  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The following statement contains a magic number: offset += 4;  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following statement contains a magic number: return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetDesc,The following statement contains a magic number: switch (rec.groupType) {  case 0:  	desc += "Top " + rec.GetSubDesc ();  	break;  case 1:  	desc += "World children " + rec.GetSubDesc ();  	break;  case 2:  	desc += "Interior Cell Block " + rec.GetSubDesc ();  	break;  case 3:  	desc += "Interior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 4:  	desc += "Exterior Cell Block " + rec.GetSubDesc ();  	break;  case 5:  	desc += "Exterior Cell Sub-Block " + rec.GetSubDesc ();  	break;  case 6:  	desc += "Cell Children " + rec.GetSubDesc ();  	break;  case 7:  	desc += "Topic Children " + rec.GetSubDesc ();  	break;  case 8:  	desc += "Cell Persistent Children " + rec.GetSubDesc ();  	break;  case 9:  	desc += "Cell Temporary Children " + rec.GetSubDesc ();  	break;  case 10:  	desc += "Cell Visible Distant Children " + rec.GetSubDesc ();  	break;  default:  	desc += "Unknown";  	break;  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupEntryname,The following statement contains a magic number: if (number < 9)  	return "&" + (number + 1) + "  " + entryname;  else if (number == 9)  	return "1&0" + "  " + entryname;  else  	return (number + 1) + "  " + entryname;  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupEntryname,The following statement contains a magic number: if (number < 9)  	return "&" + (number + 1) + "  " + entryname;  else if (number == 9)  	return "1&0" + "  " + entryname;  else  	return (number + 1) + "  " + entryname;  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupEntryname,The following statement contains a magic number: if (number == 9)  	return "1&0" + "  " + entryname;  else  	return (number + 1) + "  " + entryname;  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: if (startNumber < maxEntries) {  	for (int i = StartIndex + startNumber; i < EndIndex; i++' startNumber++) {  		int offset = MenuItems [i].Text.Substring (0' 3) == "1&0" ? 5 : 4;  		MenuItems [i].Text = FixupEntryname (startNumber' MenuItems [i].Text.Substring (offset));  		//					MenuItems[i].Text = FixupEntryname(startNumber' MenuItems[i].Text.Substring(startNumber == 10 ? 5 : 4));  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: if (startNumber < maxEntries) {  	for (int i = StartIndex + startNumber; i < EndIndex; i++' startNumber++) {  		int offset = MenuItems [i].Text.Substring (0' 3) == "1&0" ? 5 : 4;  		MenuItems [i].Text = FixupEntryname (startNumber' MenuItems [i].Text.Substring (offset));  		//					MenuItems[i].Text = FixupEntryname(startNumber' MenuItems[i].Text.Substring(startNumber == 10 ? 5 : 4));  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: if (startNumber < maxEntries) {  	for (int i = StartIndex + startNumber; i < EndIndex; i++' startNumber++) {  		int offset = MenuItems [i].Text.Substring (0' 3) == "1&0" ? 5 : 4;  		MenuItems [i].Text = FixupEntryname (startNumber' MenuItems [i].Text.Substring (offset));  		//					MenuItems[i].Text = FixupEntryname(startNumber' MenuItems[i].Text.Substring(startNumber == 10 ? 5 : 4));  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: for (int i = StartIndex + startNumber; i < EndIndex; i++' startNumber++) {  	int offset = MenuItems [i].Text.Substring (0' 3) == "1&0" ? 5 : 4;  	MenuItems [i].Text = FixupEntryname (startNumber' MenuItems [i].Text.Substring (offset));  	//					MenuItems[i].Text = FixupEntryname(startNumber' MenuItems[i].Text.Substring(startNumber == 10 ? 5 : 4));  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: for (int i = StartIndex + startNumber; i < EndIndex; i++' startNumber++) {  	int offset = MenuItems [i].Text.Substring (0' 3) == "1&0" ? 5 : 4;  	MenuItems [i].Text = FixupEntryname (startNumber' MenuItems [i].Text.Substring (offset));  	//					MenuItems[i].Text = FixupEntryname(startNumber' MenuItems[i].Text.Substring(startNumber == 10 ? 5 : 4));  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,FixupPrefixes,The following statement contains a magic number: for (int i = StartIndex + startNumber; i < EndIndex; i++' startNumber++) {  	int offset = MenuItems [i].Text.Substring (0' 3) == "1&0" ? 5 : 4;  	MenuItems [i].Text = FixupEntryname (startNumber' MenuItems [i].Text.Substring (offset));  	//					MenuItems[i].Text = FixupEntryname(startNumber' MenuItems[i].Text.Substring(startNumber == 10 ? 5 : 4));  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (root.Length > 3)  	root += Path.DirectorySeparatorChar;  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 1)// pathname is just a root and filename   {  	if (elements [0].Length > 5)// long enough to shorten  	 {  		// if path is a UNC path' root may be rather long  		if (root.Length + 6 >= maxLength) {  			return root + elements [0].Substring (0' 3) + "...";  		} else {  			return pathname.Substring (0' maxLength - 3) + "...";  		}  	}  } else if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements [0].Length > 5)// long enough to shorten   {  	// if path is a UNC path' root may be rather long  	if (root.Length + 6 >= maxLength) {  		return root + elements [0].Substring (0' 3) + "...";  	} else {  		return pathname.Substring (0' maxLength - 3) + "...";  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements [0].Length > 5)// long enough to shorten   {  	// if path is a UNC path' root may be rather long  	if (root.Length + 6 >= maxLength) {  		return root + elements [0].Substring (0' 3) + "...";  	} else {  		return pathname.Substring (0' maxLength - 3) + "...";  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements [0].Length > 5)// long enough to shorten   {  	// if path is a UNC path' root may be rather long  	if (root.Length + 6 >= maxLength) {  		return root + elements [0].Substring (0' 3) + "...";  	} else {  		return pathname.Substring (0' maxLength - 3) + "...";  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements [0].Length > 5)// long enough to shorten   {  	// if path is a UNC path' root may be rather long  	if (root.Length + 6 >= maxLength) {  		return root + elements [0].Substring (0' 3) + "...";  	} else {  		return pathname.Substring (0' maxLength - 3) + "...";  	}  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (root.Length + 6 >= maxLength) {  	return root + elements [0].Substring (0' 3) + "...";  } else {  	return pathname.Substring (0' maxLength - 3) + "...";  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (root.Length + 6 >= maxLength) {  	return root + elements [0].Substring (0' 3) + "...";  } else {  	return pathname.Substring (0' maxLength - 3) + "...";  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (root.Length + 6 >= maxLength) {  	return root + elements [0].Substring (0' 3) + "...";  } else {  	return pathname.Substring (0' maxLength - 3) + "...";  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: return root + elements [0].Substring (0' 3) + "...";  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: return pathname.Substring (0' maxLength - 3) + "...";  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 4 + elements [filenameIndex].Length) > maxLength)// pathname is just a root and filename   {  	root += "...\\";  	int len = elements [filenameIndex].Length;  	if (len < 6)  		return root + elements [filenameIndex];  	if ((root.Length + 6) >= maxLength) {  		len = 3;  	} else {  		len = maxLength - root.Length - 3;  	}  	return root + elements [filenameIndex].Substring (0' len) + "...";  } else if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (len < 6)  	return root + elements [filenameIndex];  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 6) >= maxLength) {  	len = 3;  } else {  	len = maxLength - root.Length - 3;  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 6) >= maxLength) {  	len = 3;  } else {  	len = maxLength - root.Length - 3;  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if ((root.Length + 6) >= maxLength) {  	len = 3;  } else {  	len = maxLength - root.Length - 3;  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: len = 3;  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: len = maxLength - root.Length - 3;  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,ShortenPathname,The following statement contains a magic number: if (elements.GetLength (0) == 2) {  	return root + "...\\" + elements [1];  } else {  	int len = 0;  	int begin = 0;  	for (int i = 0; i < filenameIndex; i++) {  		if (elements [i].Length > len) {  			begin = i;  			len = elements [i].Length;  		}  	}  	int totalLength = pathname.Length - len + 3;  	int end = begin + 1;  	while (totalLength > maxLength) {  		if (begin > 0)  			totalLength -= elements [--begin].Length - 1;  		if (totalLength <= maxLength)  			break;  		if (end < filenameIndex)  			totalLength -= elements [++end].Length - 1;  		if (begin == 0 && end == filenameIndex)  			break;  	}  	// assemble final string  	for (int i = 0; i < begin; i++) {  		root += elements [i] + '\\';  	}  	root += "...\\";  	for (int i = end; i < filenameIndex; i++) {  		root += elements [i] + '\\';  	}  	return root + elements [filenameIndex];  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,SaveToRegistry,The following statement contains a magic number: if (registryKeyName != null) {  	mruStripMutex.WaitOne ();  	RegistryKey regKey = Registry.CurrentUser.CreateSubKey (registryKeyName);  	if (regKey != null) {  		regKey.SetValue ("max"' maxEntries);  		int number = 1;  		int i = StartIndex;  		for (; i < EndIndex; i++' number++) {  			regKey.SetValue ("File" + number.ToString ()' ((MruMenuItem)MenuItems [i]).Filename);  		}  		for (; number <= 16; number++) {  			regKey.DeleteValue ("File" + number.ToString ()' false);  		}  		regKey.Close ();  	}  	mruStripMutex.ReleaseMutex ();  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,SaveToRegistry,The following statement contains a magic number: if (regKey != null) {  	regKey.SetValue ("max"' maxEntries);  	int number = 1;  	int i = StartIndex;  	for (; i < EndIndex; i++' number++) {  		regKey.SetValue ("File" + number.ToString ()' ((MruMenuItem)MenuItems [i]).Filename);  	}  	for (; number <= 16; number++) {  		regKey.DeleteValue ("File" + number.ToString ()' false);  	}  	regKey.Close ();  }  
Magic Number,JWC,MruStripMenu,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,SaveToRegistry,The following statement contains a magic number: for (; number <= 16; number++) {  	regKey.DeleteValue ("File" + number.ToString ()' false);  }  
Magic Number,JWC,MruStripMenuInline,F:\newReposMay17\figment_tesvsnip\Application\UI\MruStripMenu.cs,MruStripMenuInline,The following statement contains a magic number: maxShortenPathLength = 48;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,GetUInt32,The following statement contains a magic number: if (offset < 0 || offset + 4 > data.Length) {  	return 0;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,GetUInt32,The following statement contains a magic number: return TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,GetUInt32,The following statement contains a magic number: return TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	if (ss.Size == 0) {  		continue;  	}  	var data = ss.GetReadonlyData ();  	if (IsLikelyString (new ArraySegment<byte> (data' 0' (int)ss.Size))) {  		if (++szCount > 10) {  			var elem = CreateType (null' "string");  			sr.Items.Add (elem);  			break;  		}  	} else {  		break;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (IsLikelyString (new ArraySegment<byte> (data' 0' (int)ss.Size))) {  	if (++szCount > 10) {  		var elem = CreateType (null' "string");  		sr.Items.Add (elem);  		break;  	}  } else {  	break;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (++szCount > 10) {  	var elem = CreateType (null' "string");  	sr.Items.Add (elem);  	break;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (minSize == maxSize && maxSize < 256) {  	sr.size = (int)maxSize;  	int index = 0;  	// Walk through each element guessing the data type  	for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  		int numZero = 0;  		int numFloat = 0;  		int num2Short = 0;  		int isFormID = 0;  		int numTotal = 0;  		int isLString = 0;  		string reftype = null;  		if (maxSize - offset < 4) {  			if (maxSize >= 2) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				elemSize = 2;  				continue;  			} else {  				var elem = CreateType (index++' "byte");  				elem.size = 1;  				sr.Items.Add (elem);  				elemSize = 1;  				continue;  			}  		}  		foreach (var ss in srs) {  			// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  			++numTotal;  			var data = ss.GetReadonlyData ();  			uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (ui4 == 0) {  				++numZero;  				continue;  			}  			ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  			ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  			float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  			if (IsLikelyFloat (flt)) {  				++numFloat;  			}  			if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  				++num2Short;  			}  			if (ui4 > 100) {  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  						isFormID++;  					} else if (reftype == r.Name) {  						isFormID++;  					}  				}  				if (!string.IsNullOrEmpty (StringLookup (ui4))) {  					++isLString;  				}  			}  		}  		if (numTotal > 0) {  			float floatPct = (numFloat + numZero) / (float)numTotal;  			float shortPct = (num2Short + numZero) / (float)numTotal;  			float formPct = (isFormID + numZero) / (float)numTotal;  			float lstrPct = (isLString + numZero) / (float)numTotal;  			if (numFloat > 0 && floatPct > 0.5f) {  				var elem = CreateType (index++' "float");  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (num2Short > 0 && shortPct > 0.5f) {  				var elem = CreateType (index++' "short");  				elem.size = 2;  				sr.Items.Add (elem);  				sr.Items.Add (elem);  				UpdateSize (sr);  			} else if (isFormID > 0 && formPct > 0.5f) {  				var elem = CreateType (index++' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				sr.Items.Add (elem);  			} else if (isLString > 0 && lstrPct > 0.5f) {  				var elem = CreateType (index++' "lstring");  				elem.size = 4;  				sr.Items.Add (elem);  			} else {  				var elem = CreateType (index++' "int");  				elem.size = 4;  				sr.Items.Add (elem);  			}  		}  	}  } else {  	// guess dynamically sized object... default to blob  	if (!sr.Elements.Any ()) {  		long modSum = srs.Sum (a => a.Size % 4);  		// useful if we suspect this is an array of integers  		if (modSum == 0) {  			int count = 0;  			string reftype = null;  			foreach (var ss in srs) {  				var data = ss.GetReadonlyData ();  				int offset = 0;  				uint ui4 = GetUInt32 (data' offset);  				if (ui4 < 100) {  					continue;  				}  				var r = FormLookup (ui4);  				if (r != null) {  					if (string.IsNullOrEmpty (reftype)) {  						reftype = r.Name;  					} else if (reftype == r.Name) {  						if (++count > 10) {  							break;  						}  					}  				} else {  					break;  				}  			}  			if (count > 0) {  				var elem = CreateType ("ID"' "formid");  				elem.reftype = reftype;  				elem.size = 4;  				elem.repeat = 1;  				elem.optional = 1;  				sr.Items.Add (elem);  			}  		}  	}  	// check if it is a string else make it a blob  	sr.size = 0;  	if (!sr.Elements.Any ()) {  		sr.Items.Add (CreateBlob ());  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: for (int offset = 0' elemSize = 4; offset < maxSize; offset += elemSize) {  	int numZero = 0;  	int numFloat = 0;  	int num2Short = 0;  	int isFormID = 0;  	int numTotal = 0;  	int isLString = 0;  	string reftype = null;  	if (maxSize - offset < 4) {  		if (maxSize >= 2) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			elemSize = 2;  			continue;  		} else {  			var elem = CreateType (index++' "byte");  			elem.size = 1;  			sr.Items.Add (elem);  			elemSize = 1;  			continue;  		}  	}  	foreach (var ss in srs) {  		// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  		++numTotal;  		var data = ss.GetReadonlyData ();  		uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (ui4 == 0) {  			++numZero;  			continue;  		}  		ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  		ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  		float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  		if (IsLikelyFloat (flt)) {  			++numFloat;  		}  		if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  			++num2Short;  		}  		if (ui4 > 100) {  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  					isFormID++;  				} else if (reftype == r.Name) {  					isFormID++;  				}  			}  			if (!string.IsNullOrEmpty (StringLookup (ui4))) {  				++isLString;  			}  		}  	}  	if (numTotal > 0) {  		float floatPct = (numFloat + numZero) / (float)numTotal;  		float shortPct = (num2Short + numZero) / (float)numTotal;  		float formPct = (isFormID + numZero) / (float)numTotal;  		float lstrPct = (isLString + numZero) / (float)numTotal;  		if (numFloat > 0 && floatPct > 0.5f) {  			var elem = CreateType (index++' "float");  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (num2Short > 0 && shortPct > 0.5f) {  			var elem = CreateType (index++' "short");  			elem.size = 2;  			sr.Items.Add (elem);  			sr.Items.Add (elem);  			UpdateSize (sr);  		} else if (isFormID > 0 && formPct > 0.5f) {  			var elem = CreateType (index++' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			sr.Items.Add (elem);  		} else if (isLString > 0 && lstrPct > 0.5f) {  			var elem = CreateType (index++' "lstring");  			elem.size = 4;  			sr.Items.Add (elem);  		} else {  			var elem = CreateType (index++' "int");  			elem.size = 4;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize - offset < 4) {  	if (maxSize >= 2) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		elemSize = 2;  		continue;  	} else {  		var elem = CreateType (index++' "byte");  		elem.size = 1;  		sr.Items.Add (elem);  		elemSize = 1;  		continue;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize - offset < 4) {  	if (maxSize >= 2) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		elemSize = 2;  		continue;  	} else {  		var elem = CreateType (index++' "byte");  		elem.size = 1;  		sr.Items.Add (elem);  		elemSize = 1;  		continue;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize - offset < 4) {  	if (maxSize >= 2) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		elemSize = 2;  		continue;  	} else {  		var elem = CreateType (index++' "byte");  		elem.size = 1;  		sr.Items.Add (elem);  		elemSize = 1;  		continue;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize - offset < 4) {  	if (maxSize >= 2) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		elemSize = 2;  		continue;  	} else {  		var elem = CreateType (index++' "byte");  		elem.size = 1;  		sr.Items.Add (elem);  		elemSize = 1;  		continue;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize >= 2) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	elemSize = 2;  	continue;  } else {  	var elem = CreateType (index++' "byte");  	elem.size = 1;  	sr.Items.Add (elem);  	elemSize = 1;  	continue;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize >= 2) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	elemSize = 2;  	continue;  } else {  	var elem = CreateType (index++' "byte");  	elem.size = 1;  	sr.Items.Add (elem);  	elemSize = 1;  	continue;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (maxSize >= 2) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	elemSize = 2;  	continue;  } else {  	var elem = CreateType (index++' "byte");  	elem.size = 1;  	sr.Items.Add (elem);  	elemSize = 1;  	continue;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 2;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elemSize = 2;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	// .Random(srs.Length < 10 ? 0 : srs.Length / 10)  	++numTotal;  	var data = ss.GetReadonlyData ();  	uint ui4 = TypeConverter.h2i (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (ui4 == 0) {  		++numZero;  		continue;  	}  	ushort lhs = TypeConverter.h2s (data [offset]' data [offset + 1]);  	ushort uhs = TypeConverter.h2s (data [offset + 2]' data [offset + 3]);  	float flt = TypeConverter.h2f (data [offset]' data [offset + 1]' data [offset + 2]' data [offset + 3]);  	if (IsLikelyFloat (flt)) {  		++numFloat;  	}  	if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  		++num2Short;  	}  	if (ui4 > 100) {  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  				isFormID++;  			} else if (reftype == r.Name) {  				isFormID++;  			}  		}  		if (!string.IsNullOrEmpty (StringLookup (ui4))) {  			++isLString;  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  	++num2Short;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (lhs > 0 && lhs < 255 && uhs > 0 && uhs < 255) {  	++num2Short;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (ui4 > 100) {  	var r = FormLookup (ui4);  	if (r != null) {  		if (string.IsNullOrEmpty (reftype)) {  			reftype = r.Name;  			isFormID++;  		} else if (reftype == r.Name) {  			isFormID++;  		}  	}  	if (!string.IsNullOrEmpty (StringLookup (ui4))) {  		++isLString;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numTotal > 0) {  	float floatPct = (numFloat + numZero) / (float)numTotal;  	float shortPct = (num2Short + numZero) / (float)numTotal;  	float formPct = (isFormID + numZero) / (float)numTotal;  	float lstrPct = (isLString + numZero) / (float)numTotal;  	if (numFloat > 0 && floatPct > 0.5f) {  		var elem = CreateType (index++' "float");  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (num2Short > 0 && shortPct > 0.5f) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		sr.Items.Add (elem);  		UpdateSize (sr);  	} else if (isFormID > 0 && formPct > 0.5f) {  		var elem = CreateType (index++' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (isLString > 0 && lstrPct > 0.5f) {  		var elem = CreateType (index++' "lstring");  		elem.size = 4;  		sr.Items.Add (elem);  	} else {  		var elem = CreateType (index++' "int");  		elem.size = 4;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numTotal > 0) {  	float floatPct = (numFloat + numZero) / (float)numTotal;  	float shortPct = (num2Short + numZero) / (float)numTotal;  	float formPct = (isFormID + numZero) / (float)numTotal;  	float lstrPct = (isLString + numZero) / (float)numTotal;  	if (numFloat > 0 && floatPct > 0.5f) {  		var elem = CreateType (index++' "float");  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (num2Short > 0 && shortPct > 0.5f) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		sr.Items.Add (elem);  		UpdateSize (sr);  	} else if (isFormID > 0 && formPct > 0.5f) {  		var elem = CreateType (index++' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (isLString > 0 && lstrPct > 0.5f) {  		var elem = CreateType (index++' "lstring");  		elem.size = 4;  		sr.Items.Add (elem);  	} else {  		var elem = CreateType (index++' "int");  		elem.size = 4;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numTotal > 0) {  	float floatPct = (numFloat + numZero) / (float)numTotal;  	float shortPct = (num2Short + numZero) / (float)numTotal;  	float formPct = (isFormID + numZero) / (float)numTotal;  	float lstrPct = (isLString + numZero) / (float)numTotal;  	if (numFloat > 0 && floatPct > 0.5f) {  		var elem = CreateType (index++' "float");  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (num2Short > 0 && shortPct > 0.5f) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		sr.Items.Add (elem);  		UpdateSize (sr);  	} else if (isFormID > 0 && formPct > 0.5f) {  		var elem = CreateType (index++' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (isLString > 0 && lstrPct > 0.5f) {  		var elem = CreateType (index++' "lstring");  		elem.size = 4;  		sr.Items.Add (elem);  	} else {  		var elem = CreateType (index++' "int");  		elem.size = 4;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numTotal > 0) {  	float floatPct = (numFloat + numZero) / (float)numTotal;  	float shortPct = (num2Short + numZero) / (float)numTotal;  	float formPct = (isFormID + numZero) / (float)numTotal;  	float lstrPct = (isLString + numZero) / (float)numTotal;  	if (numFloat > 0 && floatPct > 0.5f) {  		var elem = CreateType (index++' "float");  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (num2Short > 0 && shortPct > 0.5f) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		sr.Items.Add (elem);  		UpdateSize (sr);  	} else if (isFormID > 0 && formPct > 0.5f) {  		var elem = CreateType (index++' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (isLString > 0 && lstrPct > 0.5f) {  		var elem = CreateType (index++' "lstring");  		elem.size = 4;  		sr.Items.Add (elem);  	} else {  		var elem = CreateType (index++' "int");  		elem.size = 4;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numTotal > 0) {  	float floatPct = (numFloat + numZero) / (float)numTotal;  	float shortPct = (num2Short + numZero) / (float)numTotal;  	float formPct = (isFormID + numZero) / (float)numTotal;  	float lstrPct = (isLString + numZero) / (float)numTotal;  	if (numFloat > 0 && floatPct > 0.5f) {  		var elem = CreateType (index++' "float");  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (num2Short > 0 && shortPct > 0.5f) {  		var elem = CreateType (index++' "short");  		elem.size = 2;  		sr.Items.Add (elem);  		sr.Items.Add (elem);  		UpdateSize (sr);  	} else if (isFormID > 0 && formPct > 0.5f) {  		var elem = CreateType (index++' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		sr.Items.Add (elem);  	} else if (isLString > 0 && lstrPct > 0.5f) {  		var elem = CreateType (index++' "lstring");  		elem.size = 4;  		sr.Items.Add (elem);  	} else {  		var elem = CreateType (index++' "int");  		elem.size = 4;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numFloat > 0 && floatPct > 0.5f) {  	var elem = CreateType (index++' "float");  	elem.size = 4;  	sr.Items.Add (elem);  } else if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numFloat > 0 && floatPct > 0.5f) {  	var elem = CreateType (index++' "float");  	elem.size = 4;  	sr.Items.Add (elem);  } else if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numFloat > 0 && floatPct > 0.5f) {  	var elem = CreateType (index++' "float");  	elem.size = 4;  	sr.Items.Add (elem);  } else if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numFloat > 0 && floatPct > 0.5f) {  	var elem = CreateType (index++' "float");  	elem.size = 4;  	sr.Items.Add (elem);  } else if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (numFloat > 0 && floatPct > 0.5f) {  	var elem = CreateType (index++' "float");  	elem.size = 4;  	sr.Items.Add (elem);  } else if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 4;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (num2Short > 0 && shortPct > 0.5f) {  	var elem = CreateType (index++' "short");  	elem.size = 2;  	sr.Items.Add (elem);  	sr.Items.Add (elem);  	UpdateSize (sr);  } else if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 2;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (isFormID > 0 && formPct > 0.5f) {  	var elem = CreateType (index++' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	sr.Items.Add (elem);  } else if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 4;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (isLString > 0 && lstrPct > 0.5f) {  	var elem = CreateType (index++' "lstring");  	elem.size = 4;  	sr.Items.Add (elem);  } else {  	var elem = CreateType (index++' "int");  	elem.size = 4;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 4;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 4;  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (!sr.Elements.Any ()) {  	long modSum = srs.Sum (a => a.Size % 4);  	// useful if we suspect this is an array of integers  	if (modSum == 0) {  		int count = 0;  		string reftype = null;  		foreach (var ss in srs) {  			var data = ss.GetReadonlyData ();  			int offset = 0;  			uint ui4 = GetUInt32 (data' offset);  			if (ui4 < 100) {  				continue;  			}  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  				} else if (reftype == r.Name) {  					if (++count > 10) {  						break;  					}  				}  			} else {  				break;  			}  		}  		if (count > 0) {  			var elem = CreateType ("ID"' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			elem.repeat = 1;  			elem.optional = 1;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (!sr.Elements.Any ()) {  	long modSum = srs.Sum (a => a.Size % 4);  	// useful if we suspect this is an array of integers  	if (modSum == 0) {  		int count = 0;  		string reftype = null;  		foreach (var ss in srs) {  			var data = ss.GetReadonlyData ();  			int offset = 0;  			uint ui4 = GetUInt32 (data' offset);  			if (ui4 < 100) {  				continue;  			}  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  				} else if (reftype == r.Name) {  					if (++count > 10) {  						break;  					}  				}  			} else {  				break;  			}  		}  		if (count > 0) {  			var elem = CreateType ("ID"' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			elem.repeat = 1;  			elem.optional = 1;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (!sr.Elements.Any ()) {  	long modSum = srs.Sum (a => a.Size % 4);  	// useful if we suspect this is an array of integers  	if (modSum == 0) {  		int count = 0;  		string reftype = null;  		foreach (var ss in srs) {  			var data = ss.GetReadonlyData ();  			int offset = 0;  			uint ui4 = GetUInt32 (data' offset);  			if (ui4 < 100) {  				continue;  			}  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  				} else if (reftype == r.Name) {  					if (++count > 10) {  						break;  					}  				}  			} else {  				break;  			}  		}  		if (count > 0) {  			var elem = CreateType ("ID"' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			elem.repeat = 1;  			elem.optional = 1;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (!sr.Elements.Any ()) {  	long modSum = srs.Sum (a => a.Size % 4);  	// useful if we suspect this is an array of integers  	if (modSum == 0) {  		int count = 0;  		string reftype = null;  		foreach (var ss in srs) {  			var data = ss.GetReadonlyData ();  			int offset = 0;  			uint ui4 = GetUInt32 (data' offset);  			if (ui4 < 100) {  				continue;  			}  			var r = FormLookup (ui4);  			if (r != null) {  				if (string.IsNullOrEmpty (reftype)) {  					reftype = r.Name;  				} else if (reftype == r.Name) {  					if (++count > 10) {  						break;  					}  				}  			} else {  				break;  			}  		}  		if (count > 0) {  			var elem = CreateType ("ID"' "formid");  			elem.reftype = reftype;  			elem.size = 4;  			elem.repeat = 1;  			elem.optional = 1;  			sr.Items.Add (elem);  		}  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (modSum == 0) {  	int count = 0;  	string reftype = null;  	foreach (var ss in srs) {  		var data = ss.GetReadonlyData ();  		int offset = 0;  		uint ui4 = GetUInt32 (data' offset);  		if (ui4 < 100) {  			continue;  		}  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  			} else if (reftype == r.Name) {  				if (++count > 10) {  					break;  				}  			}  		} else {  			break;  		}  	}  	if (count > 0) {  		var elem = CreateType ("ID"' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		elem.repeat = 1;  		elem.optional = 1;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (modSum == 0) {  	int count = 0;  	string reftype = null;  	foreach (var ss in srs) {  		var data = ss.GetReadonlyData ();  		int offset = 0;  		uint ui4 = GetUInt32 (data' offset);  		if (ui4 < 100) {  			continue;  		}  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  			} else if (reftype == r.Name) {  				if (++count > 10) {  					break;  				}  			}  		} else {  			break;  		}  	}  	if (count > 0) {  		var elem = CreateType ("ID"' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		elem.repeat = 1;  		elem.optional = 1;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (modSum == 0) {  	int count = 0;  	string reftype = null;  	foreach (var ss in srs) {  		var data = ss.GetReadonlyData ();  		int offset = 0;  		uint ui4 = GetUInt32 (data' offset);  		if (ui4 < 100) {  			continue;  		}  		var r = FormLookup (ui4);  		if (r != null) {  			if (string.IsNullOrEmpty (reftype)) {  				reftype = r.Name;  			} else if (reftype == r.Name) {  				if (++count > 10) {  					break;  				}  			}  		} else {  			break;  		}  	}  	if (count > 0) {  		var elem = CreateType ("ID"' "formid");  		elem.reftype = reftype;  		elem.size = 4;  		elem.repeat = 1;  		elem.optional = 1;  		sr.Items.Add (elem);  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	var data = ss.GetReadonlyData ();  	int offset = 0;  	uint ui4 = GetUInt32 (data' offset);  	if (ui4 < 100) {  		continue;  	}  	var r = FormLookup (ui4);  	if (r != null) {  		if (string.IsNullOrEmpty (reftype)) {  			reftype = r.Name;  		} else if (reftype == r.Name) {  			if (++count > 10) {  				break;  			}  		}  	} else {  		break;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: foreach (var ss in srs) {  	var data = ss.GetReadonlyData ();  	int offset = 0;  	uint ui4 = GetUInt32 (data' offset);  	if (ui4 < 100) {  		continue;  	}  	var r = FormLookup (ui4);  	if (r != null) {  		if (string.IsNullOrEmpty (reftype)) {  			reftype = r.Name;  		} else if (reftype == r.Name) {  			if (++count > 10) {  				break;  			}  		}  	} else {  		break;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (ui4 < 100) {  	continue;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (r != null) {  	if (string.IsNullOrEmpty (reftype)) {  		reftype = r.Name;  	} else if (reftype == r.Name) {  		if (++count > 10) {  			break;  		}  	}  } else {  	break;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (string.IsNullOrEmpty (reftype)) {  	reftype = r.Name;  } else if (reftype == r.Name) {  	if (++count > 10) {  		break;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (reftype == r.Name) {  	if (++count > 10) {  		break;  	}  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (++count > 10) {  	break;  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: if (count > 0) {  	var elem = CreateType ("ID"' "formid");  	elem.reftype = reftype;  	elem.size = 4;  	elem.repeat = 1;  	elem.optional = 1;  	sr.Items.Add (elem);  }  
Magic Number,TESVSnip.UI,RecordBuilder,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordBuilder.cs,ProcessSubRecord,The following statement contains a magic number: elem.size = 4;  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFloat_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCFormID_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 2] = b [2];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,bCInt_Click,The following statement contains a magic number: this.bytes [pos + 3] = b [3];  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 4) {  	this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbFloat.Enabled = true;  	this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  	this.tbInt.Enabled = true;  	this.bCFloat.Enabled = true;  	this.bCInt.Enabled = true;  	this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  	this.tbFormID.Enabled = true;  	this.bCFormID.Enabled = true;  	this.bLookup.Enabled = true;  } else {  	this.tbFloat.Enabled = false;  	this.tbInt.Enabled = false;  	this.bCFloat.Enabled = false;  	this.bCInt.Enabled = false;  	this.tbFormID.Enabled = false;  	this.bCFormID.Enabled = false;  	this.bLookup.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFloat.Text = TypeConverter.h2f (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbInt.Text = TypeConverter.h2si (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ();  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: this.tbFormID.Text = TypeConverter.h2i (this.bytes [pos]' this.bytes [pos + 1]' this.bytes [pos + 2]' this.bytes [pos + 3]).ToString ("X8");  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,hexBox1_SelectionStartChanged,The following statement contains a magic number: if (this.bytes.Count >= pos + 2) {  	this.tbWord.Text = TypeConverter.h2ss (this.bytes [pos]' this.bytes [pos + 1]).ToString ();  	this.tbWord.Enabled = true;  	this.bCWord.Enabled = true;  } else {  	this.tbWord.Enabled = false;  	this.bCWord.Enabled = false;  }  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.BytesPerLine = 12;  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.hexBox1.ShadowSelectionColor = System.Drawing.Color.FromArgb (((int)(((byte)(100))))' ((int)(((byte)(60))))' ((int)(((byte)(188))))' ((int)(((byte)(255)))));  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (530' 240);  
Magic Number,TESVSnip.UI.RecordControls,HexElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\HexElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (530' 240);  
Magic Number,TESVSnip.UI.RecordControls,BaseElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\BaseElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (204' 20);  
Magic Number,TESVSnip.UI.RecordControls,BaseElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\BaseElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (204' 20);  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: if (Element != null) {  	var bytes = new byte[0];  	switch (Element.type) {  	case ElementValueType.SByte:  	case ElementValueType.Byte:  	case ElementValueType.String:  	case ElementValueType.LString:  		bytes = new byte[1];  		break;  	case ElementValueType.Float:  	case ElementValueType.Str4:  	case ElementValueType.FormID:  	case ElementValueType.UInt:  	case ElementValueType.Int:  	case ElementValueType.IString:  		bytes = new byte[4];  		break;  	case ElementValueType.Short:  	case ElementValueType.UShort:  	case ElementValueType.BString:  		bytes = new byte[2];  		break;  	}  	this.elements.Add (new ArraySegment<byte> (bytes));  } else {  	this.elements.Add (default(ArraySegment<byte>));  }  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: if (Element != null) {  	var bytes = new byte[0];  	switch (Element.type) {  	case ElementValueType.SByte:  	case ElementValueType.Byte:  	case ElementValueType.String:  	case ElementValueType.LString:  		bytes = new byte[1];  		break;  	case ElementValueType.Float:  	case ElementValueType.Str4:  	case ElementValueType.FormID:  	case ElementValueType.UInt:  	case ElementValueType.Int:  	case ElementValueType.IString:  		bytes = new byte[4];  		break;  	case ElementValueType.Short:  	case ElementValueType.UShort:  	case ElementValueType.BString:  		bytes = new byte[2];  		break;  	}  	this.elements.Add (new ArraySegment<byte> (bytes));  } else {  	this.elements.Add (default(ArraySegment<byte>));  }  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: switch (Element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  case ElementValueType.String:  case ElementValueType.LString:  	bytes = new byte[1];  	break;  case ElementValueType.Float:  case ElementValueType.Str4:  case ElementValueType.FormID:  case ElementValueType.UInt:  case ElementValueType.Int:  case ElementValueType.IString:  	bytes = new byte[4];  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  case ElementValueType.BString:  	bytes = new byte[2];  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: switch (Element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  case ElementValueType.String:  case ElementValueType.LString:  	bytes = new byte[1];  	break;  case ElementValueType.Float:  case ElementValueType.Str4:  case ElementValueType.FormID:  case ElementValueType.UInt:  case ElementValueType.Int:  case ElementValueType.IString:  	bytes = new byte[4];  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  case ElementValueType.BString:  	bytes = new byte[2];  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: bytes = new byte[4];  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following statement contains a magic number: bytes = new byte[2];  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.controlPanel.MinimumSize = new System.Drawing.Size (80' 43);  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.controlPanel.MinimumSize = new System.Drawing.Size (80' 43);  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (250' 80);  
Magic Number,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (250' 80);  
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,UpdateAllControls,The following statement contains a magic number: if (element.options != null) {  	int value;  	switch (element.type) {  	case ElementValueType.SByte:  	case ElementValueType.Byte:  		value = (int)TypeConverter.h2sb (data);  		break;  	case ElementValueType.Short:  	case ElementValueType.UShort:  		value = (int)TypeConverter.h2ss (data);  		break;  	case ElementValueType.Int:  	case ElementValueType.UInt:  		value = TypeConverter.h2si (data);  		break;  	default:  		value = 0;  		break;  	}  	this.cboOptions.Items.Clear ();  	int idx = -1;  	for (int j = 0; j < element.options.Length; j += 2) {  		int cbVal;  		if (int.TryParse (element.options [j + 1]' out cbVal)) {  			this.cboOptions.Items.Add (new comboBoxItem (element.options [j]' cbVal));  			if (cbVal == value) {  				idx = this.cboOptions.Items.Count - 1;  			}  		}  	}  	if (idx < this.cboOptions.Items.Count) {  		this.cboOptions.SelectedIndex = idx;  	} else {  		this.cboOptions.SelectedIndex = -1;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,UpdateAllControls,The following statement contains a magic number: for (int j = 0; j < element.options.Length; j += 2) {  	int cbVal;  	if (int.TryParse (element.options [j + 1]' out cbVal)) {  		this.cboOptions.Items.Add (new comboBoxItem (element.options [j]' cbVal));  		if (cbVal == value) {  			idx = this.cboOptions.Items.Count - 1;  		}  	}  }  
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,UpdateAllControls,The following statement contains a magic number: j += 2
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: if (element.flags != null) {  	uint value;  	byte flagSize = 0;  	switch (element.type) {  	case ElementValueType.SByte:  	case ElementValueType.Byte:  		value = (uint)TypeConverter.h2b (Data);  		flagSize = 4;  		break;  	case ElementValueType.Short:  	case ElementValueType.UShort:  		value = (uint)TypeConverter.h2s (Data);  		flagSize = 2;  		break;  	case ElementValueType.Int:  	case ElementValueType.UInt:  		value = TypeConverter.h2i (Data);  		flagSize = 1;  		break;  	default:  		value = 0;  		break;  	}  	this.cboFlags.SetItems (element.flags' flagSize);  	this.cboFlags.SetState (value);  }  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: if (element.flags != null) {  	uint value;  	byte flagSize = 0;  	switch (element.type) {  	case ElementValueType.SByte:  	case ElementValueType.Byte:  		value = (uint)TypeConverter.h2b (Data);  		flagSize = 4;  		break;  	case ElementValueType.Short:  	case ElementValueType.UShort:  		value = (uint)TypeConverter.h2s (Data);  		flagSize = 2;  		break;  	case ElementValueType.Int:  	case ElementValueType.UInt:  		value = TypeConverter.h2i (Data);  		flagSize = 1;  		break;  	default:  		value = 0;  		break;  	}  	this.cboFlags.SetItems (element.flags' flagSize);  	this.cboFlags.SetState (value);  }  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: switch (element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  	value = (uint)TypeConverter.h2b (Data);  	flagSize = 4;  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  	value = (uint)TypeConverter.h2s (Data);  	flagSize = 2;  	break;  case ElementValueType.Int:  case ElementValueType.UInt:  	value = TypeConverter.h2i (Data);  	flagSize = 1;  	break;  default:  	value = 0;  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: switch (element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  	value = (uint)TypeConverter.h2b (Data);  	flagSize = 4;  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  	value = (uint)TypeConverter.h2s (Data);  	flagSize = 2;  	break;  case ElementValueType.Int:  case ElementValueType.UInt:  	value = TypeConverter.h2i (Data);  	flagSize = 1;  	break;  default:  	value = 0;  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: flagSize = 4;  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,UpdateAllControls,The following statement contains a magic number: flagSize = 2;  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.ControlSize = new System.Drawing.Size (47' 16);  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.ControlSize = new System.Drawing.Size (47' 16);  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.DropSize = new System.Drawing.Size (121' 106);  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.cboFlags.DropSize = new System.Drawing.Size (121' 106);  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: if (element != null && !string.IsNullOrEmpty (element.name)) {  	lblType.Text = element.type.ToString ();  	lblText.Text = element.name + (!string.IsNullOrEmpty (element.desc) ? (" (" + element.desc + ")") : string.Empty);  	if (element.multiline) {  		this.txtString.AcceptsReturn = true;  		this.txtString.Multiline = true;  		this.txtString.Height = 120;  		this.txtString.ScrollBars = ScrollBars.Vertical;  		Height = 148;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: if (element != null && !string.IsNullOrEmpty (element.name)) {  	lblType.Text = element.type.ToString ();  	lblText.Text = element.name + (!string.IsNullOrEmpty (element.desc) ? (" (" + element.desc + ")") : string.Empty);  	if (element.multiline) {  		this.txtString.AcceptsReturn = true;  		this.txtString.Multiline = true;  		this.txtString.Height = 120;  		this.txtString.ScrollBars = ScrollBars.Vertical;  		Height = 148;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: if (element.multiline) {  	this.txtString.AcceptsReturn = true;  	this.txtString.Multiline = true;  	this.txtString.Height = 120;  	this.txtString.ScrollBars = ScrollBars.Vertical;  	Height = 148;  }  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: if (element.multiline) {  	this.txtString.AcceptsReturn = true;  	this.txtString.Multiline = true;  	this.txtString.Height = 120;  	this.txtString.ScrollBars = ScrollBars.Vertical;  	Height = 148;  }  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: this.txtString.Height = 120;  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateLabel,The following statement contains a magic number: Height = 148;  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,FormIDElement_SizeChanged,The following statement contains a magic number: this.cboFormID.Width = Width - this.cboFormID.Left - 8;  
Magic Number,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,FormIDElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FormIDElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (200' 48);  
Magic Number,TESVSnip.UI.RecordControls,OptionalElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (250' 46);  
Magic Number,TESVSnip.UI.RecordControls,OptionalElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionalElement.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (250' 46);  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following statement contains a magic number: if (tbText.StartsWith ("0x")) {  	numStyle = NumberStyles.HexNumber;  	tbText = tbText.Substring (2);  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following statement contains a magic number: tbText = tbText.Substring (2);  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following statement contains a magic number: switch (element.type) {  case ElementValueType.UInt:  case ElementValueType.FormID:  	{  		uint i;  		if (element.type == ElementValueType.FormID) {  			numStyle = NumberStyles.HexNumber;  		}  		if (!uint.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.i2h (i)));  		}  	}  	break;  case ElementValueType.Int:  	{  		int i;  		if (!int.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.si2h (i)));  		}  	}  	break;  case ElementValueType.Float:  	{  		float i;  		if (!float.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.f2h (i)));  		}  	}  	break;  case ElementValueType.UShort:  	{  		ushort i;  		if (!ushort.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.s2h (i)));  		}  	}  	break;  case ElementValueType.Short:  	{  		short i;  		if (!short.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.ss2h (i)));  		}  	}  	break;  case ElementValueType.Byte:  	{  		byte i;  		if (!byte.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.b2h (i)));  		}  	}  	break;  case ElementValueType.SByte:  	{  		sbyte i;  		if (!sbyte.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.sb2h (i)));  		}  	}  	break;  case ElementValueType.String:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.str2h (this.textBox.Text)));  	break;  case ElementValueType.BString:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.bstr2h (this.textBox.Text)));  	break;  case ElementValueType.IString:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.istr2h (this.textBox.Text)));  	break;  case ElementValueType.LString:  	{  		// not handled  	}  	break;  case ElementValueType.Str4:  	{  		var txtbytes = new byte[] {  			0x32'  			0x32'  			0x32'  			0x32  		};  		System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  		SetCurrentData (new ArraySegment<byte> (txtbytes));  	}  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following statement contains a magic number: System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: if (element != null && !string.IsNullOrEmpty (element.name)) {  	this.lblType.Text = element.type.ToString ();  	this.lblText.Text = element.name + (!string.IsNullOrEmpty (element.desc) ? (" (" + element.desc + ")") : string.Empty);  	if (element.multiline) {  		this.textBox.AcceptsReturn = true;  		this.textBox.Multiline = true;  		this.textBox.Height = 120;  		this.textBox.ScrollBars = ScrollBars.Vertical;  		Height = 120;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: if (element != null && !string.IsNullOrEmpty (element.name)) {  	this.lblType.Text = element.type.ToString ();  	this.lblText.Text = element.name + (!string.IsNullOrEmpty (element.desc) ? (" (" + element.desc + ")") : string.Empty);  	if (element.multiline) {  		this.textBox.AcceptsReturn = true;  		this.textBox.Multiline = true;  		this.textBox.Height = 120;  		this.textBox.ScrollBars = ScrollBars.Vertical;  		Height = 120;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: if (element.multiline) {  	this.textBox.AcceptsReturn = true;  	this.textBox.Multiline = true;  	this.textBox.Height = 120;  	this.textBox.ScrollBars = ScrollBars.Vertical;  	Height = 120;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: if (element.multiline) {  	this.textBox.AcceptsReturn = true;  	this.textBox.Multiline = true;  	this.textBox.Height = 120;  	this.textBox.ScrollBars = ScrollBars.Vertical;  	Height = 120;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: this.textBox.Height = 120;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateLabel,The following statement contains a magic number: Height = 120;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (element == null || data == null || data.Array == null) {  	this.textBox.Text = "<error>";  } else {  	bool fitTextBoxToWidth = false;  	var es = element;  	var tb = this.textBox;  	bool hasFlags = es.options.Length == 0 && es.flags.Length > 1;  	switch (element.type) {  	case ElementValueType.UInt:  		{  			var value = TypeConverter.h2i (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2i(data);  			//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.Int:  		{  			var value = TypeConverter.h2si (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2si(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  		}  		break;  	case ElementValueType.FormID:  		this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  		break;  	case ElementValueType.Float:  		{  			var value = TypeConverter.h2f (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  			//this.textBox.Text = TypeConverter.h2f(data).ToString();  		}  		break;  	case ElementValueType.UShort:  		{  			var value = TypeConverter.h2s (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2s(data);  			//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Short:  		{  			var value = TypeConverter.h2ss (data);  			if (_pyInterpreterCalc)  				value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  			_pyInterpreterCalc = false;  			this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  			//var v = TypeConverter.h2ss(data);  			//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  		}  		break;  	case ElementValueType.Byte:  		{  			var v = TypeConverter.h2b (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.SByte:  		{  			var v = TypeConverter.h2sb (data);  			tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  		}  		break;  	case ElementValueType.String:  		tb.Text = TypeConverter.GetZString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.BString:  		tb.Text = TypeConverter.GetBString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.IString:  		tb.Text = TypeConverter.GetIString (data);  		fitTextBoxToWidth = true;  		break;  	case ElementValueType.LString:  		{  			uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  			tb.Text = id.ToString ("X8");  		}  		break;  	case ElementValueType.Str4:  		{  			tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  			tb.MaxLength = 4;  		}  		break;  	default:  		{  			tb.Text = "<Error>";  			tb.Enabled = false;  		}  		break;  	}  	if (fitTextBoxToWidth) {  		this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  		this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  		this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  		this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  	}  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: switch (element.type) {  case ElementValueType.UInt:  	{  		var value = TypeConverter.h2i (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2i(data);  		//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  	}  	break;  case ElementValueType.Int:  	{  		var value = TypeConverter.h2si (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2si(data);  		//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  	}  	break;  case ElementValueType.FormID:  	this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  	break;  case ElementValueType.Float:  	{  		var value = TypeConverter.h2f (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  		//this.textBox.Text = TypeConverter.h2f(data).ToString();  	}  	break;  case ElementValueType.UShort:  	{  		var value = TypeConverter.h2s (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2s(data);  		//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  	}  	break;  case ElementValueType.Short:  	{  		var value = TypeConverter.h2ss (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2ss(data);  		//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  	}  	break;  case ElementValueType.Byte:  	{  		var v = TypeConverter.h2b (data);  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  	}  	break;  case ElementValueType.SByte:  	{  		var v = TypeConverter.h2sb (data);  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  	}  	break;  case ElementValueType.String:  	tb.Text = TypeConverter.GetZString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.BString:  	tb.Text = TypeConverter.GetBString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.IString:  	tb.Text = TypeConverter.GetIString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.LString:  	{  		uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  		tb.Text = id.ToString ("X8");  	}  	break;  case ElementValueType.Str4:  	{  		tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  		tb.MaxLength = 4;  	}  	break;  default:  	{  		tb.Text = "<Error>";  		tb.Enabled = false;  	}  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: switch (element.type) {  case ElementValueType.UInt:  	{  		var value = TypeConverter.h2i (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2i(data);  		//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  	}  	break;  case ElementValueType.Int:  	{  		var value = TypeConverter.h2si (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2si(data);  		//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  	}  	break;  case ElementValueType.FormID:  	this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  	break;  case ElementValueType.Float:  	{  		var value = TypeConverter.h2f (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  		//this.textBox.Text = TypeConverter.h2f(data).ToString();  	}  	break;  case ElementValueType.UShort:  	{  		var value = TypeConverter.h2s (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2s(data);  		//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  	}  	break;  case ElementValueType.Short:  	{  		var value = TypeConverter.h2ss (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2ss(data);  		//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  	}  	break;  case ElementValueType.Byte:  	{  		var v = TypeConverter.h2b (data);  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  	}  	break;  case ElementValueType.SByte:  	{  		var v = TypeConverter.h2sb (data);  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  	}  	break;  case ElementValueType.String:  	tb.Text = TypeConverter.GetZString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.BString:  	tb.Text = TypeConverter.GetBString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.IString:  	tb.Text = TypeConverter.GetIString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.LString:  	{  		uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  		tb.Text = id.ToString ("X8");  	}  	break;  case ElementValueType.Str4:  	{  		tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  		tb.MaxLength = 4;  	}  	break;  default:  	{  		tb.Text = "<Error>";  		tb.Enabled = false;  	}  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: switch (element.type) {  case ElementValueType.UInt:  	{  		var value = TypeConverter.h2i (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<uint> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2i(data);  		//this.textBox.Text = element.hexview ? "0x" + v.ToString("X8") : v.ToString();  	}  	break;  case ElementValueType.Int:  	{  		var value = TypeConverter.h2si (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<int> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X8") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2si(data);  		//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X8") : v.ToString();  	}  	break;  case ElementValueType.FormID:  	this.textBox.Text = TypeConverter.h2i (data).ToString ("X8");  	break;  case ElementValueType.Float:  	{  		var value = TypeConverter.h2f (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<float> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = value.ToString (CultureInfo.InvariantCulture);  		//this.textBox.Text = TypeConverter.h2f(data).ToString();  	}  	break;  case ElementValueType.UShort:  	{  		var value = TypeConverter.h2s (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<ushort> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2s(data);  		//this.textBox.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  	}  	break;  case ElementValueType.Short:  	{  		var value = TypeConverter.h2ss (data);  		if (_pyInterpreterCalc)  			value = PyInterpreter.ExecuteFunction<short> (element' value' FunctionOperation.ForReading);  		_pyInterpreterCalc = false;  		this.textBox.Text = hasFlags || es.hexview ? "0x" + value.ToString ("X4") : value.ToString (CultureInfo.InvariantCulture);  		//var v = TypeConverter.h2ss(data);  		//tb.Text = hasFlags || es.hexview ? "0x" + v.ToString("X4") : v.ToString();  	}  	break;  case ElementValueType.Byte:  	{  		var v = TypeConverter.h2b (data);  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  	}  	break;  case ElementValueType.SByte:  	{  		var v = TypeConverter.h2sb (data);  		tb.Text = hasFlags || es.hexview ? "0x" + v.ToString ("X2") : v.ToString ();  	}  	break;  case ElementValueType.String:  	tb.Text = TypeConverter.GetZString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.BString:  	tb.Text = TypeConverter.GetBString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.IString:  	tb.Text = TypeConverter.GetIString (data);  	fitTextBoxToWidth = true;  	break;  case ElementValueType.LString:  	{  		uint id = TypeConverter.IsLikelyString (data) ? 0 : TypeConverter.h2i (data);  		tb.Text = id.ToString ("X8");  	}  	break;  case ElementValueType.Str4:  	{  		tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  		tb.MaxLength = 4;  	}  	break;  default:  	{  		tb.Text = "<Error>";  		tb.Enabled = false;  	}  	break;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: tb.Text = (data.Count >= 4) ? Encoding.Instance.GetString (data.Array' data.Offset' 4) : string.Empty;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: tb.MaxLength = 4;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (fitTextBoxToWidth) {  	this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  	this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  	this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  	this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (fitTextBoxToWidth) {  	this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  	this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  	this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  	this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (fitTextBoxToWidth) {  	this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  	this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  	this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  	this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: if (fitTextBoxToWidth) {  	this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  	this.lblText.Anchor = AnchorStyles.Right | AnchorStyles.Top;  	this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  	this.textBox.Anchor = AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Top;  }  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: this.lblText.Left = ((Width - this.lblText.Width - 50) / 50) * 50;  
Magic Number,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,UpdateText,The following statement contains a magic number: this.textBox.Width = this.lblText.Left - 20 - this.textBox.Left;  
Magic Number,TESVSnip.Windows.Controls,BallonToolTip,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,CreateHandle,The following statement contains a magic number: if (!IsHandleCreated) {  	var initcommoncontrolsex1 = new NativeMethods.INITCOMMONCONTROLSEX ();  	initcommoncontrolsex1.dwICC = 8;  	// ICC_TAB_CLASSES : Load tab and ToolTip control classes.   	NativeMethods.InitCommonControlsEx (initcommoncontrolsex1);  	m_window.CreateHandle (CreateParams);  	NativeMethods.SetWindowPos (new HandleRef (this' Handle)' NativeMethods.HWND_TOPMOST' 0' 0' 0' 0' NativeMethods.SWP_NOACTIVATE | NativeMethods.SWP_NOMOVE | NativeMethods.SWP_NOSIZE);  	NativeMethods.SendMessage (new HandleRef (this' Handle)' NativeMethods.TTM_SETMAXTIPWIDTH' 0' SystemInformation.MaxWindowTrackSize.Width);  	NativeMethods.SendMessage (new HandleRef (this' Handle)' NativeMethods.TTM_ACTIVATE' 1' 0);  }  
Magic Number,TESVSnip.Windows.Controls,BallonToolTip,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,CreateHandle,The following statement contains a magic number: initcommoncontrolsex1.dwICC = 8;  
Magic Number,TESVSnip.Windows.Controls,GWinfoMultilineEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,EditValue,The following statement contains a magic number: textBox.Size = new Size (150' 80);  
Magic Number,TESVSnip.Windows.Controls,GWinfoMultilineEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\ballontooltip.cs,EditValue,The following statement contains a magic number: textBox.Size = new Size (150' 80);  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: if (DataSource != null && iColumn >= 0 && iColumn < Columns.Count) {  	var header = Columns [iColumn] as ColumnBinding;  	if (header != null) {  		var view = DataSource as IBindingListView;  		if (view != null) {  			string fieldName = header.Property != null ? header.Property.Name : header.FieldName;  			if (!string.IsNullOrEmpty (fieldName)) {  				// handle existing sorts  				if (view.IsSorted) {  					var arr = new ListSortDescription[view.SortDescriptions.Count];  					view.SortDescriptions.CopyTo (arr' 0);  					bool found = false;  					for (int idx = 0; idx < arr.Length; ++idx) {  						ListSortDescription desc = arr [idx];  						if (desc.PropertyDescriptor.Name == fieldName) {  							found = true;  							if (idx == 0) {  								if (desc.SortDirection == ListSortDirection.Descending) {  									desc.SortDirection = ListSortDirection.Ascending;  								} else {  									var list = new List<ListSortDescription> (arr);  									list.Remove (desc);  									arr = list.ToArray ();  								}  							} else {  								var list = new List<ListSortDescription> (arr);  								list.Remove (desc);  								list.Insert (0' desc);  								desc.SortDirection = ListSortDirection.Ascending;  								arr = list.ToArray ();  							}  							break;  						}  					}  					if (!found) {  						var list = new List<ListSortDescription> (arr);  						list.Insert (0' new ListSortDescription (header.Property' ListSortDirection.Descending));  						while (list.Count > 3)  							list.RemoveAt (list.Count - 1);  						arr = list.ToArray ();  					}  					view.ApplySort (new ListSortDescriptionCollection (arr));  				} else {  					view.ApplySort (header.Property' ListSortDirection.Ascending);  				}  			}  		}  	}  }  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: if (header != null) {  	var view = DataSource as IBindingListView;  	if (view != null) {  		string fieldName = header.Property != null ? header.Property.Name : header.FieldName;  		if (!string.IsNullOrEmpty (fieldName)) {  			// handle existing sorts  			if (view.IsSorted) {  				var arr = new ListSortDescription[view.SortDescriptions.Count];  				view.SortDescriptions.CopyTo (arr' 0);  				bool found = false;  				for (int idx = 0; idx < arr.Length; ++idx) {  					ListSortDescription desc = arr [idx];  					if (desc.PropertyDescriptor.Name == fieldName) {  						found = true;  						if (idx == 0) {  							if (desc.SortDirection == ListSortDirection.Descending) {  								desc.SortDirection = ListSortDirection.Ascending;  							} else {  								var list = new List<ListSortDescription> (arr);  								list.Remove (desc);  								arr = list.ToArray ();  							}  						} else {  							var list = new List<ListSortDescription> (arr);  							list.Remove (desc);  							list.Insert (0' desc);  							desc.SortDirection = ListSortDirection.Ascending;  							arr = list.ToArray ();  						}  						break;  					}  				}  				if (!found) {  					var list = new List<ListSortDescription> (arr);  					list.Insert (0' new ListSortDescription (header.Property' ListSortDirection.Descending));  					while (list.Count > 3)  						list.RemoveAt (list.Count - 1);  					arr = list.ToArray ();  				}  				view.ApplySort (new ListSortDescriptionCollection (arr));  			} else {  				view.ApplySort (header.Property' ListSortDirection.Ascending);  			}  		}  	}  }  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: if (view != null) {  	string fieldName = header.Property != null ? header.Property.Name : header.FieldName;  	if (!string.IsNullOrEmpty (fieldName)) {  		// handle existing sorts  		if (view.IsSorted) {  			var arr = new ListSortDescription[view.SortDescriptions.Count];  			view.SortDescriptions.CopyTo (arr' 0);  			bool found = false;  			for (int idx = 0; idx < arr.Length; ++idx) {  				ListSortDescription desc = arr [idx];  				if (desc.PropertyDescriptor.Name == fieldName) {  					found = true;  					if (idx == 0) {  						if (desc.SortDirection == ListSortDirection.Descending) {  							desc.SortDirection = ListSortDirection.Ascending;  						} else {  							var list = new List<ListSortDescription> (arr);  							list.Remove (desc);  							arr = list.ToArray ();  						}  					} else {  						var list = new List<ListSortDescription> (arr);  						list.Remove (desc);  						list.Insert (0' desc);  						desc.SortDirection = ListSortDirection.Ascending;  						arr = list.ToArray ();  					}  					break;  				}  			}  			if (!found) {  				var list = new List<ListSortDescription> (arr);  				list.Insert (0' new ListSortDescription (header.Property' ListSortDirection.Descending));  				while (list.Count > 3)  					list.RemoveAt (list.Count - 1);  				arr = list.ToArray ();  			}  			view.ApplySort (new ListSortDescriptionCollection (arr));  		} else {  			view.ApplySort (header.Property' ListSortDirection.Ascending);  		}  	}  }  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: if (!string.IsNullOrEmpty (fieldName)) {  	// handle existing sorts  	if (view.IsSorted) {  		var arr = new ListSortDescription[view.SortDescriptions.Count];  		view.SortDescriptions.CopyTo (arr' 0);  		bool found = false;  		for (int idx = 0; idx < arr.Length; ++idx) {  			ListSortDescription desc = arr [idx];  			if (desc.PropertyDescriptor.Name == fieldName) {  				found = true;  				if (idx == 0) {  					if (desc.SortDirection == ListSortDirection.Descending) {  						desc.SortDirection = ListSortDirection.Ascending;  					} else {  						var list = new List<ListSortDescription> (arr);  						list.Remove (desc);  						arr = list.ToArray ();  					}  				} else {  					var list = new List<ListSortDescription> (arr);  					list.Remove (desc);  					list.Insert (0' desc);  					desc.SortDirection = ListSortDirection.Ascending;  					arr = list.ToArray ();  				}  				break;  			}  		}  		if (!found) {  			var list = new List<ListSortDescription> (arr);  			list.Insert (0' new ListSortDescription (header.Property' ListSortDirection.Descending));  			while (list.Count > 3)  				list.RemoveAt (list.Count - 1);  			arr = list.ToArray ();  		}  		view.ApplySort (new ListSortDescriptionCollection (arr));  	} else {  		view.ApplySort (header.Property' ListSortDirection.Ascending);  	}  }  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: if (view.IsSorted) {  	var arr = new ListSortDescription[view.SortDescriptions.Count];  	view.SortDescriptions.CopyTo (arr' 0);  	bool found = false;  	for (int idx = 0; idx < arr.Length; ++idx) {  		ListSortDescription desc = arr [idx];  		if (desc.PropertyDescriptor.Name == fieldName) {  			found = true;  			if (idx == 0) {  				if (desc.SortDirection == ListSortDirection.Descending) {  					desc.SortDirection = ListSortDirection.Ascending;  				} else {  					var list = new List<ListSortDescription> (arr);  					list.Remove (desc);  					arr = list.ToArray ();  				}  			} else {  				var list = new List<ListSortDescription> (arr);  				list.Remove (desc);  				list.Insert (0' desc);  				desc.SortDirection = ListSortDirection.Ascending;  				arr = list.ToArray ();  			}  			break;  		}  	}  	if (!found) {  		var list = new List<ListSortDescription> (arr);  		list.Insert (0' new ListSortDescription (header.Property' ListSortDirection.Descending));  		while (list.Count > 3)  			list.RemoveAt (list.Count - 1);  		arr = list.ToArray ();  	}  	view.ApplySort (new ListSortDescriptionCollection (arr));  } else {  	view.ApplySort (header.Property' ListSortDirection.Ascending);  }  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: if (!found) {  	var list = new List<ListSortDescription> (arr);  	list.Insert (0' new ListSortDescription (header.Property' ListSortDirection.Descending));  	while (list.Count > 3)  		list.RemoveAt (list.Count - 1);  	arr = list.ToArray ();  }  
Magic Number,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,BindingListView_CustomSort,The following statement contains a magic number: while (list.Count > 3)  	list.RemoveAt (list.Count - 1);  
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,ShowDropDown,The following statement contains a magic number: if (m_popupCtrl != null && !IsDroppedDown) {  	// Raise drop-down event.  	RaiseDropDownEvent ();  	// Restore original control size.  	AutoSizeDropDown ();  	Point location = PointToScreen (new Point (0' Height));  	// Actually show popup.  	PopupResizeMode resizeMode = (m_bIsResizable ? PopupResizeMode.BottomRight : PopupResizeMode.None);  	m_popupCtrl.Show (DropDownControl' location.X' location.Y' Width' Height' resizeMode);  	m_bDroppedDown = true;  	m_popupCtrl.PopupControlHost = this;  	// Initialize automatic focus timer?  	if (m_timerAutoFocus == null) {  		m_timerAutoFocus = new Timer ();  		m_timerAutoFocus.Interval = 10;  		m_timerAutoFocus.Tick += timerAutoFocus_Tick;  	}  	// Enable the timer!  	m_timerAutoFocus.Enabled = true;  	m_sShowTime = DateTime.Now;  }  
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,ShowDropDown,The following statement contains a magic number: if (m_timerAutoFocus == null) {  	m_timerAutoFocus = new Timer ();  	m_timerAutoFocus.Interval = 10;  	m_timerAutoFocus.Tick += timerAutoFocus_Tick;  }  
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,ShowDropDown,The following statement contains a magic number: m_timerAutoFocus.Interval = 10;  
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,HIWORD,The following statement contains a magic number: return (uint)(n >> 16) & 0xffff;  
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,AutoDropDown,The following statement contains a magic number: if (m_popupCtrl != null && m_popupCtrl.Visible)  	HideDropDown ();  else if ((DateTime.Now - m_lastHideTime).Milliseconds > 50)  	ShowDropDown ();  
Magic Number,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,AutoDropDown,The following statement contains a magic number: if ((DateTime.Now - m_lastHideTime).Milliseconds > 50)  	ShowDropDown ();  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItemsFromType,The following statement contains a magic number: SetItems (names' 4' (uint[])values);  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: switch (flagSize) {  case 1:  	format = "X2";  	numBits = 8;  	break;  case 2:  	format = "X4";  	numBits = 16;  	break;  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: switch (flagSize) {  case 1:  	format = "X2";  	numBits = 8;  	break;  case 2:  	format = "X4";  	numBits = 16;  	break;  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: switch (flagSize) {  case 1:  	format = "X2";  	numBits = 8;  	break;  case 2:  	format = "X4";  	numBits = 16;  	break;  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: numBits = 8;  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: numBits = 16;  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following statement contains a magic number: MaxDropDownItems = Math.Min (values.Length' 16);  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: if (raw != 0) {  	int bits = (int)Math.Ceiling (Math.Log (raw) / Math.Log (2.0f));  	int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);  	bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  	string format = "X" + bytes.ToString ();  	if (sb.Length > 0)  		sb.Append (this.ValueSeparator);  	sb.Append (raw.ToString (format));  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: if (raw != 0) {  	int bits = (int)Math.Ceiling (Math.Log (raw) / Math.Log (2.0f));  	int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);  	bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  	string format = "X" + bytes.ToString ();  	if (sb.Length > 0)  		sb.Append (this.ValueSeparator);  	sb.Append (raw.ToString (format));  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: if (raw != 0) {  	int bits = (int)Math.Ceiling (Math.Log (raw) / Math.Log (2.0f));  	int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);  	bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  	string format = "X" + bytes.ToString ();  	if (sb.Length > 0)  		sb.Append (this.ValueSeparator);  	sb.Append (raw.ToString (format));  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: if (raw != 0) {  	int bits = (int)Math.Ceiling (Math.Log (raw) / Math.Log (2.0f));  	int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);  	bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  	string format = "X" + bytes.ToString ();  	if (sb.Length > 0)  		sb.Append (this.ValueSeparator);  	sb.Append (raw.ToString (format));  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: if (raw != 0) {  	int bits = (int)Math.Ceiling (Math.Log (raw) / Math.Log (2.0f));  	int bytes = (bits / 4) + (((bits % 4) != 0) ? 1 : 0);  	bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  	string format = "X" + bytes.ToString ();  	if (sb.Length > 0)  		sb.Append (this.ValueSeparator);  	sb.Append (raw.ToString (format));  }  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  
Magic Number,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,GetCheckedItemsStringValue,The following statement contains a magic number: bytes = ((bytes / 2) + ((bytes % 2 != 0) ? 1 : 0)) * 2;  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: try {  	int procid = 0;  	GetWindowThreadProcessId (hwnd' out procid);  	if (procid == lParam) {  		var sb = new StringBuilder (64);  		GetClassName (hwnd' sb' 64);  		string sClass = sb.ToString ();  		if (string.Compare (sClass' wrkspc_classid' true) == 0) {  			Marshal.StructureToPtr (hwnd' wrkspc_hwnd' false);  			return false;  			// stop enumerating  		}  	}  } catch {  }  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: try {  	int procid = 0;  	GetWindowThreadProcessId (hwnd' out procid);  	if (procid == lParam) {  		var sb = new StringBuilder (64);  		GetClassName (hwnd' sb' 64);  		string sClass = sb.ToString ();  		if (string.Compare (sClass' wrkspc_classid' true) == 0) {  			Marshal.StructureToPtr (hwnd' wrkspc_hwnd' false);  			return false;  			// stop enumerating  		}  	}  } catch {  }  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: if (procid == lParam) {  	var sb = new StringBuilder (64);  	GetClassName (hwnd' sb' 64);  	string sClass = sb.ToString ();  	if (string.Compare (sClass' wrkspc_classid' true) == 0) {  		Marshal.StructureToPtr (hwnd' wrkspc_hwnd' false);  		return false;  		// stop enumerating  	}  }  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: if (procid == lParam) {  	var sb = new StringBuilder (64);  	GetClassName (hwnd' sb' 64);  	string sClass = sb.ToString ();  	if (string.Compare (sClass' wrkspc_classid' true) == 0) {  		Marshal.StructureToPtr (hwnd' wrkspc_hwnd' false);  		return false;  		// stop enumerating  	}  }  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FindTopWindowByProcessId,The following statement contains a magic number: GetClassName (hwnd' sb' 64);  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,ToRGB,The following statement contains a magic number: return ((((color.R) | ((uint)(color.G) << 8)) | (((uint)(color.B)) << 16)));  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,ToRGB,The following statement contains a magic number: return ((((color.R) | ((uint)(color.G) << 8)) | (((uint)(color.B)) << 16)));  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FromRGB,The following statement contains a magic number: return Color.FromArgb (color & 0xFF' (color & 0xFF00) >> 8' (color & 0xFF0000) >> 16);  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,FromRGB,The following statement contains a magic number: return Color.FromArgb (color & 0xFF' (color & 0xFF00) >> 8' (color & 0xFF0000) >> 16);  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,HRESULT_FACILITY,The following statement contains a magic number: return (((hr) >> 16) & 0x1fff);  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,HRESULT_SEVERITY,The following statement contains a magic number: return (((hr) >> 31) & 0x1);  
Magic Number,TESVSnip.Windows.Controls,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\nativemethods.cs,HRESULT_CUSTOMER,The following statement contains a magic number: return (((hr) >> 30) & 0x1);  
Magic Number,TESVSnip.Windows.Controls,GripRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,The following statement contains a magic number: Render (g' location' new Size (16' 16)' mode);  
Magic Number,TESVSnip.Windows.Controls,GripRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,The following statement contains a magic number: Render (g' location' new Size (16' 16)' mode);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  	// Draw grip area at bottom-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (1' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomLeft);  } else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (1' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (1' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (1' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.BottomRight)) {  	// Draw grip area at bottom-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.BottomRight);  } else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' Height - 16' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' Height - 16' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft)) {  	// Draw grip area at top-left of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (1' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopLeft);  } else if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (1' 0' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (1' 0' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopRight)) {  	// Draw grip area at top-right of popup.  	e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  	GripBounds = new Rectangle (Width - 17' 0' 16' 16);  	GripRenderer.Render (e.Graphics' GripBounds.Location' GripAlignMode.TopRight);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.ButtonFace' 1' 1' Width - 2' 14);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' 0' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' 0' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnPaint,The following statement contains a magic number: GripBounds = new Rectangle (Width - 17' 0' 16' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: if (!CompareResizeMode (PopupResizeMode.None)) {  	if (width > 0 && bounds.Width - 2 > width)  		if (!CompareResizeMode (PopupResizeMode.Right))  			bounds.X -= bounds.Width - 2 - width;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: if (!CompareResizeMode (PopupResizeMode.None)) {  	if (width > 0 && bounds.Width - 2 > width)  		if (!CompareResizeMode (PopupResizeMode.Right))  			bounds.X -= bounds.Width - 2 - width;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: if (width > 0 && bounds.Width - 2 > width)  	if (!CompareResizeMode (PopupResizeMode.Right))  		bounds.X -= bounds.Width - 2 - width;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: if (width > 0 && bounds.Width - 2 > width)  	if (!CompareResizeMode (PopupResizeMode.Right))  		bounds.X -= bounds.Width - 2 - width;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: if (!CompareResizeMode (PopupResizeMode.Right))  	bounds.X -= bounds.Width - 2 - width;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ResizeFromContent,The following statement contains a magic number: bounds.X -= bounds.Width - 2 - width;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: if (hostedControl != null) {  	// Fetch control bounds and adjust as necessary.  	Rectangle bounds = hostedControl.Bounds;  	if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  		bounds.Location = new Point (1' 16);  	else  		bounds.Location = new Point (1' 1);  	bounds.Width = ClientRectangle.Width - 2;  	bounds.Height = ClientRectangle.Height - 2;  	if (IsGripShown)  		bounds.Height -= 16;  	if (bounds.Size != hostedControl.Size)  		hostedControl.Size = bounds.Size;  	if (bounds.Location != hostedControl.Location)  		hostedControl.Location = bounds.Location;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: if (hostedControl != null) {  	// Fetch control bounds and adjust as necessary.  	Rectangle bounds = hostedControl.Bounds;  	if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  		bounds.Location = new Point (1' 16);  	else  		bounds.Location = new Point (1' 1);  	bounds.Width = ClientRectangle.Width - 2;  	bounds.Height = ClientRectangle.Height - 2;  	if (IsGripShown)  		bounds.Height -= 16;  	if (bounds.Size != hostedControl.Size)  		hostedControl.Size = bounds.Size;  	if (bounds.Location != hostedControl.Location)  		hostedControl.Location = bounds.Location;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: if (hostedControl != null) {  	// Fetch control bounds and adjust as necessary.  	Rectangle bounds = hostedControl.Bounds;  	if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  		bounds.Location = new Point (1' 16);  	else  		bounds.Location = new Point (1' 1);  	bounds.Width = ClientRectangle.Width - 2;  	bounds.Height = ClientRectangle.Height - 2;  	if (IsGripShown)  		bounds.Height -= 16;  	if (bounds.Size != hostedControl.Size)  		hostedControl.Size = bounds.Size;  	if (bounds.Location != hostedControl.Location)  		hostedControl.Location = bounds.Location;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: if (hostedControl != null) {  	// Fetch control bounds and adjust as necessary.  	Rectangle bounds = hostedControl.Bounds;  	if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  		bounds.Location = new Point (1' 16);  	else  		bounds.Location = new Point (1' 1);  	bounds.Width = ClientRectangle.Width - 2;  	bounds.Height = ClientRectangle.Height - 2;  	if (IsGripShown)  		bounds.Height -= 16;  	if (bounds.Size != hostedControl.Size)  		hostedControl.Size = bounds.Size;  	if (bounds.Location != hostedControl.Location)  		hostedControl.Location = bounds.Location;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  	bounds.Location = new Point (1' 16);  else  	bounds.Location = new Point (1' 1);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Location = new Point (1' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Width = ClientRectangle.Width - 2;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Height = ClientRectangle.Height - 2;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: if (IsGripShown)  	bounds.Height -= 16;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,RecalculateHostedControlLayout,The following statement contains a magic number: bounds.Height -= 16;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: if (hostedControl != null) {  	if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  		hostedControl.Location = new Point (1' 16);  	else  		hostedControl.Location = new Point (1' 1);  	contentSize = SizeFromClientSize (hostedControl.Size);  	// Use minimum width (if specified).  	if (width > 0 && contentSize.Width < width) {  		contentSize.Width = width;  		m_refreshSize = true;  	}  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: if (CompareResizeMode (PopupResizeMode.TopLeft) || CompareResizeMode (PopupResizeMode.TopRight))  	hostedControl.Location = new Point (1' 16);  else  	hostedControl.Location = new Point (1' 1);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: hostedControl.Location = new Point (1' 16);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: if (IsGripShown)  	contentSize.Height += 16;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: contentSize.Height += 16;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: contentSize.Width += 2;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,SizeFromContent,The following statement contains a magic number: contentSize.Height += 2;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,HIWORD,The following statement contains a magic number: return (n >> 16) & 0xffff;  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnGetMinMaxInfo,The following statement contains a magic number: if (hostedControl != null) {  	var minmax = (MINMAXINFO)Marshal.PtrToStructure (m.LParam' typeof(MINMAXINFO));  	// Maximum size.  	if (hostedControl.MaximumSize.Width != 0)  		minmax.maxTrackSize.Width = hostedControl.MaximumSize.Width;  	if (hostedControl.MaximumSize.Height != 0)  		minmax.maxTrackSize.Height = hostedControl.MaximumSize.Height;  	// Minimum size.  	minmax.minTrackSize = new Size (32' 32);  	if (hostedControl.MinimumSize.Width > minmax.minTrackSize.Width)  		minmax.minTrackSize.Width = hostedControl.MinimumSize.Width;  	if (hostedControl.MinimumSize.Height > minmax.minTrackSize.Height)  		minmax.minTrackSize.Height = hostedControl.MinimumSize.Height;  	Marshal.StructureToPtr (minmax' m.LParam' false);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnGetMinMaxInfo,The following statement contains a magic number: if (hostedControl != null) {  	var minmax = (MINMAXINFO)Marshal.PtrToStructure (m.LParam' typeof(MINMAXINFO));  	// Maximum size.  	if (hostedControl.MaximumSize.Width != 0)  		minmax.maxTrackSize.Width = hostedControl.MaximumSize.Width;  	if (hostedControl.MaximumSize.Height != 0)  		minmax.maxTrackSize.Height = hostedControl.MaximumSize.Height;  	// Minimum size.  	minmax.minTrackSize = new Size (32' 32);  	if (hostedControl.MinimumSize.Width > minmax.minTrackSize.Width)  		minmax.minTrackSize.Width = hostedControl.MinimumSize.Width;  	if (hostedControl.MinimumSize.Height > minmax.minTrackSize.Height)  		minmax.minTrackSize.Height = hostedControl.MinimumSize.Height;  	Marshal.StructureToPtr (minmax' m.LParam' false);  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnGetMinMaxInfo,The following statement contains a magic number: minmax.minTrackSize = new Size (32' 32);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnGetMinMaxInfo,The following statement contains a magic number: minmax.minTrackSize = new Size (32' 32);  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (GripBounds.Contains (location)) {  	if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMRIGHT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPRIGHT;  		return true;  	}  } else// Check for edge based dragging.   {  	Rectangle rectClient = ClientRectangle;  	if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  		m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  		return true;  	} else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  		return true;  	} else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  		m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  		return true;  	} else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOP;  		return true;  	}  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (GripBounds.Contains (location)) {  	if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMRIGHT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPRIGHT;  		return true;  	}  } else// Check for edge based dragging.   {  	Rectangle rectClient = ClientRectangle;  	if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  		m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  		return true;  	} else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  		return true;  	} else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  		m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  		return true;  	} else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOP;  		return true;  	}  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (GripBounds.Contains (location)) {  	if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMRIGHT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPRIGHT;  		return true;  	}  } else// Check for edge based dragging.   {  	Rectangle rectClient = ClientRectangle;  	if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  		m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  		return true;  	} else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  		return true;  	} else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  		m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  		return true;  	} else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOP;  		return true;  	}  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (GripBounds.Contains (location)) {  	if (CompareResizeMode (PopupResizeMode.BottomLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.BottomRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOMRIGHT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopLeft)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPLEFT;  		return true;  	} else if (CompareResizeMode (PopupResizeMode.TopRight)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOPRIGHT;  		return true;  	}  } else// Check for edge based dragging.   {  	Rectangle rectClient = ClientRectangle;  	if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  		m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  		return true;  	} else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  		m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  		return true;  	} else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  		m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  		return true;  	} else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  		m.Result = contentControl ? transparent : (IntPtr)HTTOP;  		return true;  	}  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  	m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  	return true;  } else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  	m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  	return true;  } else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  	m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  	return true;  } else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.X > rectClient.Right - 3 && location.X <= rectClient.Right && CompareResizeMode (PopupResizeMode.Right)) {  	m.Result = contentControl ? transparent : (IntPtr)HTRIGHT;  	return true;  } else if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.Y > rectClient.Bottom - 3 && location.Y <= rectClient.Bottom && CompareResizeMode (PopupResizeMode.Bottom)) {  	m.Result = contentControl ? transparent : (IntPtr)HTBOTTOM;  	return true;  } else if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.X > -1 && location.X < 3 && CompareResizeMode (PopupResizeMode.Left)) {  	m.Result = contentControl ? transparent : (IntPtr)HTLEFT;  	return true;  } else if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,OnNcHitTest,The following statement contains a magic number: if (location.Y > -1 && location.Y < 3 && CompareResizeMode (PopupResizeMode.Top)) {  	m.Result = contentControl ? transparent : (IntPtr)HTTOP;  	return true;  }  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case 7:  	// WM_SETFOCUS  	//try { base.WndProc(ref m); } // skip immediate parent to avoid focus problems  	//catch{}  	m.Result = IntPtr.Zero;  	messageProcessed = true;  	break;  // case (int)WindowsMessage.WM_REFLECT + (int)WindowsMessage.WM_NOTIFY:  case (0x0400 + 0x1c00 + WM_NOTIFY):  	m.Result = IntPtr.Zero;  	nm1 = (NMHDR)m.GetLParam (typeof(NMHDR));  	switch (nm1.code) {  	case (int)ListViewNotificationCodes.LVN_ITEMCHANGED:  		messageProcessed = true;  		break;  	case (int)ListViewNotificationCodes.LVN_GETDISPINFOW:  		OnDispInfoNotice (ref m' false);  		messageProcessed = true;  		break;  	// ignore dragging as we are virtual and ListView doesnt like it.  	case (int)ListViewNotificationCodes.LVN_BEGINDRAG:  		OnBeginDrag (ref m);  		messageProcessed = true;  		break;  	case (int)ListViewNotificationCodes.LVN_BEGINRDRAG:  		OnBeginDrag (ref m);  		messageProcessed = true;  		break;  	case (int)NotificationCodes.NM_CUSTOMDRAW:  		m.Result = new IntPtr ((int)OnCustomDraw (ref m));  		messageProcessed = true;  		break;  	case (int)ListViewNotificationCodes.LVN_ODSTATECHANGED: {  		messageProcessed = true;  		var lvod = (NMLVODSTATECHANGE)m.GetLParam (typeof(NMLVODSTATECHANGE));  		int num1 = lvod.uOldState & (int)ListViewItemStates.LVIS_SELECTED;  		int num2 = lvod.uNewState & (int)ListViewItemStates.LVIS_SELECTED;  		if (num2 == num1)  			return;  		OnSelectedIndexChanged (EventArgs.Empty);  		break;  	}  	default:  		break;  	}  	break;  case WM_NOTIFY:  	nm1 = (NMHDR)m.GetLParam (typeof(NMHDR));  	if (nm1.code == (int)NotificationCodes.NM_RCLICK) {  		IntPtr header = SendMessage (Handle' (int)ListViewMessages.LVM_GETHEADER' IntPtr.Zero' IntPtr.Zero);  		uint curpos = GetMessagePos ();  		Point ptheader = PointToClient (new Point ((short)curpos' (int)curpos >> 16));  		var hdhti = new HDHITTESTINFO ();  		hdhti.pt = ptheader;  		SendMessage (header' HeaderMessageCodes.HDM_HITTEST' IntPtr.Zero' ref hdhti);  		OnColumnRightClick (new ColumnClickEventArgs (hdhti.iItem));  	} else if (nm1.code == (int)HeaderNotificationCodes.HDN_ITEMCLICKW) {  		if (OnCustomSort (ref m)) {  			m.Result = IntPtr.Zero;  			messageProcessed = true;  		}  	}  	break;  case WM_ERASEBKGND:  	//removes flicker  	return;  case WM_MOUSEHOVER:  	messageProcessed = true;  	break;  case WM_PAINT:  	// The designer host does not call OnResize()                      	if (internalGraphics == null)  		OnResize (EventArgs.Empty);  	//Set up   	var updateRect = new RECT ();  	if (GetUpdateRect (m.HWnd' ref updateRect' false) == 0)  		break;  	var paintStruct = new PAINTSTRUCT ();  	IntPtr screenHdc = BeginPaint (m.HWnd' ref paintStruct);  	using (Graphics screenGraphics = Graphics.FromHdc (screenHdc)) {  		//Draw Internal Graphics  		internalGraphics.Clear (BackColor);  		IntPtr hdc = internalGraphics.GetHdc ();  		Message printClientMessage = Message.Create (Handle' WM_PRINTCLIENT' hdc' IntPtr.Zero);  		DefWndProc (ref printClientMessage);  		internalGraphics.ReleaseHdc (hdc);  		//Add the missing OnPaint() call  		OnPaint (new PaintEventArgs (internalGraphics' Rectangle.FromLTRB (updateRect.left' updateRect.top' updateRect.right' updateRect.bottom)));  		//Draw Screen Graphics  		screenGraphics.DrawImage (internalBitmap' 0' 0);  	}  	//Tear down  	EndPaint (m.HWnd' ref paintStruct);  	return;  default:  	break;  }  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case 7:  	// WM_SETFOCUS  	//try { base.WndProc(ref m); } // skip immediate parent to avoid focus problems  	//catch{}  	m.Result = IntPtr.Zero;  	messageProcessed = true;  	break;  // case (int)WindowsMessage.WM_REFLECT + (int)WindowsMessage.WM_NOTIFY:  case (0x0400 + 0x1c00 + WM_NOTIFY):  	m.Result = IntPtr.Zero;  	nm1 = (NMHDR)m.GetLParam (typeof(NMHDR));  	switch (nm1.code) {  	case (int)ListViewNotificationCodes.LVN_ITEMCHANGED:  		messageProcessed = true;  		break;  	case (int)ListViewNotificationCodes.LVN_GETDISPINFOW:  		OnDispInfoNotice (ref m' false);  		messageProcessed = true;  		break;  	// ignore dragging as we are virtual and ListView doesnt like it.  	case (int)ListViewNotificationCodes.LVN_BEGINDRAG:  		OnBeginDrag (ref m);  		messageProcessed = true;  		break;  	case (int)ListViewNotificationCodes.LVN_BEGINRDRAG:  		OnBeginDrag (ref m);  		messageProcessed = true;  		break;  	case (int)NotificationCodes.NM_CUSTOMDRAW:  		m.Result = new IntPtr ((int)OnCustomDraw (ref m));  		messageProcessed = true;  		break;  	case (int)ListViewNotificationCodes.LVN_ODSTATECHANGED: {  		messageProcessed = true;  		var lvod = (NMLVODSTATECHANGE)m.GetLParam (typeof(NMLVODSTATECHANGE));  		int num1 = lvod.uOldState & (int)ListViewItemStates.LVIS_SELECTED;  		int num2 = lvod.uNewState & (int)ListViewItemStates.LVIS_SELECTED;  		if (num2 == num1)  			return;  		OnSelectedIndexChanged (EventArgs.Empty);  		break;  	}  	default:  		break;  	}  	break;  case WM_NOTIFY:  	nm1 = (NMHDR)m.GetLParam (typeof(NMHDR));  	if (nm1.code == (int)NotificationCodes.NM_RCLICK) {  		IntPtr header = SendMessage (Handle' (int)ListViewMessages.LVM_GETHEADER' IntPtr.Zero' IntPtr.Zero);  		uint curpos = GetMessagePos ();  		Point ptheader = PointToClient (new Point ((short)curpos' (int)curpos >> 16));  		var hdhti = new HDHITTESTINFO ();  		hdhti.pt = ptheader;  		SendMessage (header' HeaderMessageCodes.HDM_HITTEST' IntPtr.Zero' ref hdhti);  		OnColumnRightClick (new ColumnClickEventArgs (hdhti.iItem));  	} else if (nm1.code == (int)HeaderNotificationCodes.HDN_ITEMCLICKW) {  		if (OnCustomSort (ref m)) {  			m.Result = IntPtr.Zero;  			messageProcessed = true;  		}  	}  	break;  case WM_ERASEBKGND:  	//removes flicker  	return;  case WM_MOUSEHOVER:  	messageProcessed = true;  	break;  case WM_PAINT:  	// The designer host does not call OnResize()                      	if (internalGraphics == null)  		OnResize (EventArgs.Empty);  	//Set up   	var updateRect = new RECT ();  	if (GetUpdateRect (m.HWnd' ref updateRect' false) == 0)  		break;  	var paintStruct = new PAINTSTRUCT ();  	IntPtr screenHdc = BeginPaint (m.HWnd' ref paintStruct);  	using (Graphics screenGraphics = Graphics.FromHdc (screenHdc)) {  		//Draw Internal Graphics  		internalGraphics.Clear (BackColor);  		IntPtr hdc = internalGraphics.GetHdc ();  		Message printClientMessage = Message.Create (Handle' WM_PRINTCLIENT' hdc' IntPtr.Zero);  		DefWndProc (ref printClientMessage);  		internalGraphics.ReleaseHdc (hdc);  		//Add the missing OnPaint() call  		OnPaint (new PaintEventArgs (internalGraphics' Rectangle.FromLTRB (updateRect.left' updateRect.top' updateRect.right' updateRect.bottom)));  		//Draw Screen Graphics  		screenGraphics.DrawImage (internalBitmap' 0' 0);  	}  	//Tear down  	EndPaint (m.HWnd' ref paintStruct);  	return;  default:  	break;  }  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,WndProc,The following statement contains a magic number: if (nm1.code == (int)NotificationCodes.NM_RCLICK) {  	IntPtr header = SendMessage (Handle' (int)ListViewMessages.LVM_GETHEADER' IntPtr.Zero' IntPtr.Zero);  	uint curpos = GetMessagePos ();  	Point ptheader = PointToClient (new Point ((short)curpos' (int)curpos >> 16));  	var hdhti = new HDHITTESTINFO ();  	hdhti.pt = ptheader;  	SendMessage (header' HeaderMessageCodes.HDM_HITTEST' IntPtr.Zero' ref hdhti);  	OnColumnRightClick (new ColumnClickEventArgs (hdhti.iItem));  } else if (nm1.code == (int)HeaderNotificationCodes.HDN_ITEMCLICKW) {  	if (OnCustomSort (ref m)) {  		m.Result = IntPtr.Zero;  		messageProcessed = true;  	}  }  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,GetItemText,The following statement contains a magic number: _ms_lvi.cchTextMax = 512;  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,GetItemText,The following statement contains a magic number: _ms_lvi.pszText = Marshal.AllocCoTaskMem ((_ms_lvi.cchTextMax) * 2/*Marshal.SizeOf(typeof(char))*/);  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,AutoFitColumnHeaders,The following statement contains a magic number: foreach (ColumnHeader heading in Columns)  	heading.Width = -2;  
Magic Number,TESVSnip.Windows.Controls,VirtualListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\virtuallistview.cs,AutoFitColumnHeaders,The following statement contains a magic number: heading.Width = -2;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,HexBox,The following statement contains a magic number: _thumbTrackTimer.Interval = 50;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: if (_scrollVmax < max)  	return (int)value;  else {  	double valperc = value / (double)_scrollVmax * 100;  	var res = (int)Math.Floor (max / (double)100 * valperc);  	res = (int)Math.Max (_scrollVmin' res);  	res = (int)Math.Min (_scrollVmax' res);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,ToScrollPos,The following statement contains a magic number: if (_scrollVmax < max)  	return (int)value;  else {  	double valperc = value / (double)_scrollVmax * 100;  	var res = (int)Math.Floor (max / (double)100 * valperc);  	res = (int)Math.Max (_scrollVmin' res);  	res = (int)Math.Min (_scrollVmax' res);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: if (_scrollVmax < max) {  	return value;  } else {  	double valperc = value / (double)max * 100;  	long res = (int)Math.Floor (_scrollVmax / (double)100 * valperc);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,FromScrollPos,The following statement contains a magic number: if (_scrollVmax < max) {  	return value;  } else {  	double valperc = value / (double)max * 100;  	long res = (int)Math.Floor (_scrollVmax / (double)100 * valperc);  	return res;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,GetHexBytePositionInfo,The following statement contains a magic number: byteCharaterPos = (iX % 3);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: for (long pos = startIndex; pos < _byteProvider.Length; pos++) {  	if (_abortFind)  		return -2;  	if (pos % 1000 == 0)  		// for performance reasons: DoEvents only 1 times per 1000 loops  		Application.DoEvents ();  	if (_byteProvider.ReadByte (pos) != bytes [match]) {  		pos -= match;  		match = 0;  		_findingPos = pos;  		continue;  	}  	match++;  	if (match == bytesLength) {  		long bytePos = pos - bytesLength + 1;  		Select (bytePos' bytesLength);  		ScrollByteIntoView (_bytePos + _selectionLength);  		ScrollByteIntoView (_bytePos);  		return bytePos;  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: for (long pos = startIndex; pos < _byteProvider.Length; pos++) {  	if (_abortFind)  		return -2;  	if (pos % 1000 == 0)  		// for performance reasons: DoEvents only 1 times per 1000 loops  		Application.DoEvents ();  	if (_byteProvider.ReadByte (pos) != bytes [match]) {  		pos -= match;  		match = 0;  		_findingPos = pos;  		continue;  	}  	match++;  	if (match == bytesLength) {  		long bytePos = pos - bytesLength + 1;  		Select (bytePos' bytesLength);  		ScrollByteIntoView (_bytePos + _selectionLength);  		ScrollByteIntoView (_bytePos);  		return bytePos;  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: if (_abortFind)  	return -2;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: return -2;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,Find,The following statement contains a magic number: if (pos % 1000 == 0)  	// for performance reasons: DoEvents only 1 times per 1000 loops  	Application.DoEvents ();  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < maxLine; i++) {  	long firstLineByte = startByte + (_iHexMaxHBytes) * i;  	PointF bytePointF = GetBytePointF (new Point (0' 0 + i));  	string info = firstLineByte.ToString (_hexStringFormat' Thread.CurrentThread.CurrentCulture);  	int nulls = 8 - info.Length;  	string formattedInfo;  	if (nulls > -1) {  		formattedInfo = new string ('0'' 8 - info.Length) + info;  	} else {  		formattedInfo = new string ('~'' 8);  	}  	g.DrawString (formattedInfo' Font' brush' new PointF (_recLineInfo.X' bytePointF.Y)' _stringFormat);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < maxLine; i++) {  	long firstLineByte = startByte + (_iHexMaxHBytes) * i;  	PointF bytePointF = GetBytePointF (new Point (0' 0 + i));  	string info = firstLineByte.ToString (_hexStringFormat' Thread.CurrentThread.CurrentCulture);  	int nulls = 8 - info.Length;  	string formattedInfo;  	if (nulls > -1) {  		formattedInfo = new string ('0'' 8 - info.Length) + info;  	} else {  		formattedInfo = new string ('~'' 8);  	}  	g.DrawString (formattedInfo' Font' brush' new PointF (_recLineInfo.X' bytePointF.Y)' _stringFormat);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: for (int i = 0; i < maxLine; i++) {  	long firstLineByte = startByte + (_iHexMaxHBytes) * i;  	PointF bytePointF = GetBytePointF (new Point (0' 0 + i));  	string info = firstLineByte.ToString (_hexStringFormat' Thread.CurrentThread.CurrentCulture);  	int nulls = 8 - info.Length;  	string formattedInfo;  	if (nulls > -1) {  		formattedInfo = new string ('0'' 8 - info.Length) + info;  	} else {  		formattedInfo = new string ('~'' 8);  	}  	g.DrawString (formattedInfo' Font' brush' new PointF (_recLineInfo.X' bytePointF.Y)' _stringFormat);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: if (nulls > -1) {  	formattedInfo = new string ('0'' 8 - info.Length) + info;  } else {  	formattedInfo = new string ('~'' 8);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: if (nulls > -1) {  	formattedInfo = new string ('0'' 8 - info.Length) + info;  } else {  	formattedInfo = new string ('~'' 8);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: formattedInfo = new string ('0'' 8 - info.Length) + info;  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintLineInfo,The following statement contains a magic number: formattedInfo = new string ('~'' 8);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			var lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			var lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			var lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			var lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			var lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter != null && Focused && _bytePos != -1 && Enabled) {  	if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetByteStringPointF (gp);  			var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			if (r.IntersectsWith (_recStringView)) {  				r.Intersect (_recStringView);  				PaintCurrentByteSign (g' r);  			}  		} else {  			var lineWidth = (int)(_recStringView.Width - _charSize.Width);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recStringView)) {  					singleLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recStringView)) {  					firstLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recStringView)) {  						betweenLines.Intersect (_recStringView);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recStringView)) {  					lastLine.Intersect (_recStringView);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	} else {  		if (_selectionLength == 0) {  			Point gp = GetGridBytePoint (_bytePos - _startByte);  			PointF pf = GetBytePointF (gp);  			var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  			var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  			PaintCurrentByteSign (g' r);  		} else {  			var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  			Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  			PointF startSelPointF = GetBytePointF (startSelGridPoint);  			Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  			PointF endSelPointF = GetBytePointF (endSelGridPoint);  			int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  			if (multiLine == 0) {  				var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (singleLine.IntersectsWith (_recHex)) {  					singleLine.Intersect (_recHex);  					PaintCurrentByteSign (g' singleLine);  				}  			} else {  				var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (firstLine.IntersectsWith (_recHex)) {  					firstLine.Intersect (_recHex);  					PaintCurrentByteSign (g' firstLine);  				}  				if (multiLine > 1) {  					var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  					if (betweenLines.IntersectsWith (_recHex)) {  						betweenLines.Intersect (_recHex);  						PaintCurrentByteSign (g' betweenLines);  					}  				}  				var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  				if (lastLine.IntersectsWith (_recHex)) {  					lastLine.Intersect (_recHex);  					PaintCurrentByteSign (g' lastLine);  				}  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		var lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		var lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		var lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		var lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		var lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_keyInterpreter.GetType () == typeof(KeyInterpreter)) {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetByteStringPointF (gp);  		var s = new Size ((int)_charSize.Width' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		if (r.IntersectsWith (_recStringView)) {  			r.Intersect (_recStringView);  			PaintCurrentByteSign (g' r);  		}  	} else {  		var lineWidth = (int)(_recStringView.Width - _charSize.Width);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetByteStringPointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetByteStringPointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recStringView)) {  				singleLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recStringView.X + lineWidth - startSelPointF.X + _charSize.Width)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recStringView)) {  				firstLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recStringView.X' (int)(startSelPointF.Y + _charSize.Height)' (_recStringView.Width)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recStringView)) {  					betweenLines.Intersect (_recStringView);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recStringView.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recStringView.X + _charSize.Width)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recStringView)) {  				lastLine.Intersect (_recStringView);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  } else {  	if (_selectionLength == 0) {  		Point gp = GetGridBytePoint (_bytePos - _startByte);  		PointF pf = GetBytePointF (gp);  		var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  		var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  		PaintCurrentByteSign (g' r);  	} else {  		var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  		Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  		PointF startSelPointF = GetBytePointF (startSelGridPoint);  		Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  		PointF endSelPointF = GetBytePointF (endSelGridPoint);  		int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  		if (multiLine == 0) {  			var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (singleLine.IntersectsWith (_recHex)) {  				singleLine.Intersect (_recHex);  				PaintCurrentByteSign (g' singleLine);  			}  		} else {  			var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (firstLine.IntersectsWith (_recHex)) {  				firstLine.Intersect (_recHex);  				PaintCurrentByteSign (g' firstLine);  			}  			if (multiLine > 1) {  				var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  				if (betweenLines.IntersectsWith (_recHex)) {  					betweenLines.Intersect (_recHex);  					PaintCurrentByteSign (g' betweenLines);  				}  			}  			var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  			if (lastLine.IntersectsWith (_recHex)) {  				lastLine.Intersect (_recHex);  				PaintCurrentByteSign (g' lastLine);  			}  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (_selectionLength == 0) {  	Point gp = GetGridBytePoint (_bytePos - _startByte);  	PointF pf = GetBytePointF (gp);  	var s = new Size ((int)_charSize.Width * 2' (int)_charSize.Height);  	var r = new Rectangle ((int)pf.X' (int)pf.Y' s.Width' s.Height);  	PaintCurrentByteSign (g' r);  } else {  	var lineWidth = (int)(_recHex.Width - _charSize.Width * 5);  	Point startSelGridPoint = GetGridBytePoint (_bytePos - _startByte);  	PointF startSelPointF = GetBytePointF (startSelGridPoint);  	Point endSelGridPoint = GetGridBytePoint (_bytePos - _startByte + _selectionLength - 1);  	PointF endSelPointF = GetBytePointF (endSelGridPoint);  	int multiLine = endSelGridPoint.Y - startSelGridPoint.Y;  	if (multiLine == 0) {  		var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (singleLine.IntersectsWith (_recHex)) {  			singleLine.Intersect (_recHex);  			PaintCurrentByteSign (g' singleLine);  		}  	} else {  		var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (firstLine.IntersectsWith (_recHex)) {  			firstLine.Intersect (_recHex);  			PaintCurrentByteSign (g' firstLine);  		}  		if (multiLine > 1) {  			var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  			if (betweenLines.IntersectsWith (_recHex)) {  				betweenLines.Intersect (_recHex);  				PaintCurrentByteSign (g' betweenLines);  			}  		}  		var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  		if (lastLine.IntersectsWith (_recHex)) {  			lastLine.Intersect (_recHex);  			PaintCurrentByteSign (g' lastLine);  		}  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine == 0) {  	var singleLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(endSelPointF.X - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (singleLine.IntersectsWith (_recHex)) {  		singleLine.Intersect (_recHex);  		PaintCurrentByteSign (g' singleLine);  	}  } else {  	var firstLine = new Rectangle ((int)startSelPointF.X' (int)startSelPointF.Y' (int)(_recHex.X + lineWidth - startSelPointF.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (firstLine.IntersectsWith (_recHex)) {  		firstLine.Intersect (_recHex);  		PaintCurrentByteSign (g' firstLine);  	}  	if (multiLine > 1) {  		var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  		if (betweenLines.IntersectsWith (_recHex)) {  			betweenLines.Intersect (_recHex);  			PaintCurrentByteSign (g' betweenLines);  		}  	}  	var lastLine = new Rectangle (_recHex.X' (int)endSelPointF.Y' (int)(endSelPointF.X - _recHex.X + _charSize.Width * 2)' (int)_charSize.Height);  	if (lastLine.IntersectsWith (_recHex)) {  		lastLine.Intersect (_recHex);  		PaintCurrentByteSign (g' lastLine);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,PaintCurrentBytesSign,The following statement contains a magic number: if (multiLine > 1) {  	var betweenLines = new Rectangle (_recHex.X' (int)(startSelPointF.Y + _charSize.Height)' (int)(lineWidth + _charSize.Width * 2)' (int)(_charSize.Height * (multiLine - 1)));  	if (betweenLines.IntersectsWith (_recHex)) {  		betweenLines.Intersect (_recHex);  		PaintCurrentByteSign (g' betweenLines);  	}  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (_lineInfoVisible) {  	_recLineInfo = new Rectangle (_recContent.X + marginLeft' _recContent.Y' (int)(_charSize.Width * 10)' _recContent.Height);  } else {  	_recLineInfo = Rectangle.Empty;  	_recLineInfo.X = marginLeft;  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recLineInfo = new Rectangle (_recContent.X + marginLeft' _recContent.Y' (int)(_charSize.Width * 10)' _recContent.Height);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine) {  	SetHorizontalByteCount (_bytesPerLine);  	_recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  } else {  	var hmax = (int)Math.Floor (_recHex.Width / (double)_charSize.Width);  	if (hmax > 1)  		SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  	else  		SetHorizontalByteCount (hmax);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine) {  	SetHorizontalByteCount (_bytesPerLine);  	_recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  } else {  	var hmax = (int)Math.Floor (_recHex.Width / (double)_charSize.Width);  	if (hmax > 1)  		SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  	else  		SetHorizontalByteCount (hmax);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (UseFixedBytesPerLine) {  	SetHorizontalByteCount (_bytesPerLine);  	_recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  } else {  	var hmax = (int)Math.Floor (_recHex.Width / (double)_charSize.Width);  	if (hmax > 1)  		SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  	else  		SetHorizontalByteCount (hmax);  }  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: _recHex.Width = (int)Math.Floor (((double)_iHexMaxHBytes) * _charSize.Width * 3 + (2 * _charSize.Width));  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: if (hmax > 1)  	SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  else  	SetHorizontalByteCount (hmax);  
Magic Number,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,UpdateRectanglePositioning,The following statement contains a magic number: SetHorizontalByteCount ((int)Math.Floor ((double)hmax / 3));  
Magic Number,BrightIdeasSoftware,AutoCompleteCellEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,AutoCompleteCellEditor,The following statement contains a magic number: for (int i = 0; i < Math.Min (lv.GetItemCount ()' 1000); i++) {  	String str = column.GetStringValue (lv.GetModelObject (i));  	if (!alreadySeen.ContainsKey (str)) {  		Items.Add (str);  		alreadySeen [str] = true;  	}  }  
Magic Number,BrightIdeasSoftware,IntUpDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,IntUpDown,The following statement contains a magic number: Minimum = -9999999;  
Magic Number,BrightIdeasSoftware,IntUpDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,IntUpDown,The following statement contains a magic number: Maximum = 9999999;  
Magic Number,BrightIdeasSoftware,UintUpDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,UintUpDown,The following statement contains a magic number: Maximum = 9999999;  
Magic Number,BrightIdeasSoftware,FloatCellEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: DecimalPlaces = 2;  
Magic Number,BrightIdeasSoftware,FloatCellEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: Minimum = -9999999;  
Magic Number,BrightIdeasSoftware,FloatCellEditor,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditors.cs,FloatCellEditor,The following statement contains a magic number: Maximum = 9999999;  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,SimpleDropSink,The following statement contains a magic number: timer.Interval = 250;  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,SimpleDropSink,The following statement contains a magic number: FeedbackColor = Color.FromArgb (180' Color.MediumBlue);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (ListView.View == View.Tile)  	close /= 2;  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: close /= 2;  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close)) {  	// Scroll faster if the mouse is closer to the top  	timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = -rowHeight;  } else {  	if (pt.Y >= (r.Bottom - close)) {  		timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  		timer.Start ();  		scrollAmount = rowHeight;  	} else {  		timer.Stop ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close)) {  	// Scroll faster if the mouse is closer to the top  	timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = -rowHeight;  } else {  	if (pt.Y >= (r.Bottom - close)) {  		timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  		timer.Start ();  		scrollAmount = rowHeight;  	} else {  		timer.Stop ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close)) {  	// Scroll faster if the mouse is closer to the top  	timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = -rowHeight;  } else {  	if (pt.Y >= (r.Bottom - close)) {  		timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  		timer.Start ();  		scrollAmount = rowHeight;  	} else {  		timer.Stop ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close)) {  	// Scroll faster if the mouse is closer to the top  	timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = -rowHeight;  } else {  	if (pt.Y >= (r.Bottom - close)) {  		timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  		timer.Start ();  		scrollAmount = rowHeight;  	} else {  		timer.Stop ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close)) {  	// Scroll faster if the mouse is closer to the top  	timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = -rowHeight;  } else {  	if (pt.Y >= (r.Bottom - close)) {  		timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  		timer.Start ();  		scrollAmount = rowHeight;  	} else {  		timer.Stop ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y <= (r.Top + close)) {  	// Scroll faster if the mouse is closer to the top  	timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = -rowHeight;  } else {  	if (pt.Y >= (r.Bottom - close)) {  		timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  		timer.Start ();  		scrollAmount = rowHeight;  	} else {  		timer.Stop ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y <= (r.Top + close / 2)) ? 100 : 350);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y >= (r.Bottom - close)) {  	timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = rowHeight;  } else {  	timer.Stop ();  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y >= (r.Bottom - close)) {  	timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = rowHeight;  } else {  	timer.Stop ();  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: if (pt.Y >= (r.Bottom - close)) {  	timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  	timer.Start ();  	scrollAmount = rowHeight;  } else {  	timer.Stop ();  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,CheckScrolling,The following statement contains a magic number: timer.Interval = ((pt.Y >= (r.Bottom - close / 2)) ? 100 : 350);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: if (Billboard != null) {  	Point pt = args.MouseLocation;  	pt.Offset (5' 5);  	if (Billboard.Text != dropEventArgs.InfoMessage || Billboard.Location != pt) {  		Billboard.Text = dropEventArgs.InfoMessage;  		Billboard.Location = pt;  		ListView.Invalidate ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: if (Billboard != null) {  	Point pt = args.MouseLocation;  	pt.Offset (5' 5);  	if (Billboard.Text != dropEventArgs.InfoMessage || Billboard.Location != pt) {  		Billboard.Text = dropEventArgs.InfoMessage;  		Billboard.Location = pt;  		ListView.Invalidate ();  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: pt.Offset (5' 5);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,UpdateAfterCanDropEvent,The following statement contains a magic number: pt.Offset (5' 5);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: r.Inflate ((int)-penWidth / 2' (int)-penWidth / 2);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: r.Inflate ((int)-penWidth / 2' (int)-penWidth / 2);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackBackgroundTarget,The following statement contains a magic number: using (var p = new Pen (Color.FromArgb (128' FeedbackColor)' penWidth)) {  	using (GraphicsPath path = GetRoundedRect (r' 30.0f)) {  		g.DrawPath (p' path);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackItemTarget,The following statement contains a magic number: using (GraphicsPath path = GetRoundedRect (r' diameter)) {  	using (var b = new SolidBrush (Color.FromArgb (48' FeedbackColor))) {  		g.FillPath (b' path);  	}  	using (var p = new Pen (FeedbackColor' 3.0f)) {  		g.DrawPath (p' path);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedbackItemTarget,The following statement contains a magic number: using (var b = new SolidBrush (Color.FromArgb (48' FeedbackColor))) {  	g.FillPath (b' path);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 0' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (Brush b = new SolidBrush (FeedbackColor)) {  	int x = x1;  	int y = y1;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 5' x' y - 5);  		gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  		gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  	x = x2;  	y = y2;  	using (var gp = new GraphicsPath ()) {  		gp.AddLine (x' y + 6' x' y - 6);  		gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  		gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  		gp.CloseFigure ();  		g.FillPath (b' gp);  	}  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 5' x' y - 5);  	gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  	gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine (x' y + 5' x' y - 5);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine (x' y + 5' x' y - 5);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 6' x + 3' y - 2' x + 6' y - 1' x + 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x + 11' y' x + 6' y + 1' x + 3' y + 2' x' y + 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: using (var gp = new GraphicsPath ()) {  	gp.AddLine (x' y + 6' x' y - 6);  	gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  	gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  	gp.CloseFigure ();  	g.FillPath (b' gp);  }  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine (x' y + 6' x' y - 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddLine (x' y + 6' x' y - 6);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x' y - 7' x - 3' y - 2' x - 6' y - 1' x - 11' y);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  
Magic Number,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawBetweenLine,The following statement contains a magic number: gp.AddBezier (x - 11' y' x - 6' y + 1' x - 3' y + 2' x' y + 7);  
Magic Number,BrightIdeasSoftware,DataSourceAdapter,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,ConfigureColumn,The following statement contains a magic number: if (property.PropertyType == typeof(bool) || property.PropertyType == typeof(CheckState)) {  	column.TextAlign = HorizontalAlignment.Center;  	column.Width = 32;  	column.CheckBoxes = true;  	if (property.PropertyType == typeof(CheckState))  		column.TriStateCheckBoxes = true;  }  
Magic Number,BrightIdeasSoftware,DataSourceAdapter,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,ConfigureColumn,The following statement contains a magic number: column.Width = 32;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OnCellEditorValidating,The following statement contains a magic number: if ((Environment.TickCount - lastValidatingEvent) < 100) {  	e.Cancel = true;  } else {  	lastValidatingEvent = Environment.TickCount;  	if (CellEditValidating != null)  		CellEditValidating (this' e);  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AutoResizeColumns,The following statement contains a magic number: foreach (OLVColumn c in Columns) {  	c.Width = -2;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,AutoResizeColumns,The following statement contains a magic number: c.Width = -2;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null && !FullRowSelect && View == View.Details) {  	// Is the point within the column 0? If it is' maybe it should have been a hit.  	// Let's test slightly to the right and then to left of column 0. Hopefully one  	// of those will hit a subitem  	Point sides = NativeMethods.GetScrolledColumnSides (this' 0);  	if (x >= sides.X && x <= sides.Y) {  		// We look for:  		// - any subitem to the right of cell 0?  		// - any subitem to the left of cell 0?  		// - cell 0 at the left edge of the screen  		hitTestInfo = HitTest (sides.Y + 4' y);  		if (hitTestInfo.Item == null)  			hitTestInfo = HitTest (sides.X - 4' y);  		if (hitTestInfo.Item == null)  			hitTestInfo = HitTest (4' y);  		if (hitTestInfo.Item != null) {  			// We hit something! So' the original point must have been in cell 0  			hti.Item = (OLVListItem)hitTestInfo.Item;  			hti.SubItem = hti.Item.GetSubItem (0);  			hti.Location = ListViewHitTestLocations.None;  			hti.HitTestLocation = HitTestLocation.InCell;  		}  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null && !FullRowSelect && View == View.Details) {  	// Is the point within the column 0? If it is' maybe it should have been a hit.  	// Let's test slightly to the right and then to left of column 0. Hopefully one  	// of those will hit a subitem  	Point sides = NativeMethods.GetScrolledColumnSides (this' 0);  	if (x >= sides.X && x <= sides.Y) {  		// We look for:  		// - any subitem to the right of cell 0?  		// - any subitem to the left of cell 0?  		// - cell 0 at the left edge of the screen  		hitTestInfo = HitTest (sides.Y + 4' y);  		if (hitTestInfo.Item == null)  			hitTestInfo = HitTest (sides.X - 4' y);  		if (hitTestInfo.Item == null)  			hitTestInfo = HitTest (4' y);  		if (hitTestInfo.Item != null) {  			// We hit something! So' the original point must have been in cell 0  			hti.Item = (OLVListItem)hitTestInfo.Item;  			hti.SubItem = hti.Item.GetSubItem (0);  			hti.Location = ListViewHitTestLocations.None;  			hti.HitTestLocation = HitTestLocation.InCell;  		}  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null && !FullRowSelect && View == View.Details) {  	// Is the point within the column 0? If it is' maybe it should have been a hit.  	// Let's test slightly to the right and then to left of column 0. Hopefully one  	// of those will hit a subitem  	Point sides = NativeMethods.GetScrolledColumnSides (this' 0);  	if (x >= sides.X && x <= sides.Y) {  		// We look for:  		// - any subitem to the right of cell 0?  		// - any subitem to the left of cell 0?  		// - cell 0 at the left edge of the screen  		hitTestInfo = HitTest (sides.Y + 4' y);  		if (hitTestInfo.Item == null)  			hitTestInfo = HitTest (sides.X - 4' y);  		if (hitTestInfo.Item == null)  			hitTestInfo = HitTest (4' y);  		if (hitTestInfo.Item != null) {  			// We hit something! So' the original point must have been in cell 0  			hti.Item = (OLVListItem)hitTestInfo.Item;  			hti.SubItem = hti.Item.GetSubItem (0);  			hti.Location = ListViewHitTestLocations.None;  			hti.HitTestLocation = HitTestLocation.InCell;  		}  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (x >= sides.X && x <= sides.Y) {  	// We look for:  	// - any subitem to the right of cell 0?  	// - any subitem to the left of cell 0?  	// - cell 0 at the left edge of the screen  	hitTestInfo = HitTest (sides.Y + 4' y);  	if (hitTestInfo.Item == null)  		hitTestInfo = HitTest (sides.X - 4' y);  	if (hitTestInfo.Item == null)  		hitTestInfo = HitTest (4' y);  	if (hitTestInfo.Item != null) {  		// We hit something! So' the original point must have been in cell 0  		hti.Item = (OLVListItem)hitTestInfo.Item;  		hti.SubItem = hti.Item.GetSubItem (0);  		hti.Location = ListViewHitTestLocations.None;  		hti.HitTestLocation = HitTestLocation.InCell;  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (x >= sides.X && x <= sides.Y) {  	// We look for:  	// - any subitem to the right of cell 0?  	// - any subitem to the left of cell 0?  	// - cell 0 at the left edge of the screen  	hitTestInfo = HitTest (sides.Y + 4' y);  	if (hitTestInfo.Item == null)  		hitTestInfo = HitTest (sides.X - 4' y);  	if (hitTestInfo.Item == null)  		hitTestInfo = HitTest (4' y);  	if (hitTestInfo.Item != null) {  		// We hit something! So' the original point must have been in cell 0  		hti.Item = (OLVListItem)hitTestInfo.Item;  		hti.SubItem = hti.Item.GetSubItem (0);  		hti.Location = ListViewHitTestLocations.None;  		hti.HitTestLocation = HitTestLocation.InCell;  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (x >= sides.X && x <= sides.Y) {  	// We look for:  	// - any subitem to the right of cell 0?  	// - any subitem to the left of cell 0?  	// - cell 0 at the left edge of the screen  	hitTestInfo = HitTest (sides.Y + 4' y);  	if (hitTestInfo.Item == null)  		hitTestInfo = HitTest (sides.X - 4' y);  	if (hitTestInfo.Item == null)  		hitTestInfo = HitTest (4' y);  	if (hitTestInfo.Item != null) {  		// We hit something! So' the original point must have been in cell 0  		hti.Item = (OLVListItem)hitTestInfo.Item;  		hti.SubItem = hti.Item.GetSubItem (0);  		hti.Location = ListViewHitTestLocations.None;  		hti.HitTestLocation = HitTestLocation.InCell;  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: hitTestInfo = HitTest (sides.Y + 4' y);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null)  	hitTestInfo = HitTest (sides.X - 4' y);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: hitTestInfo = HitTest (sides.X - 4' y);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: if (hitTestInfo.Item == null)  	hitTestInfo = HitTest (4' y);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,OlvHitTest,The following statement contains a magic number: hitTestInfo = HitTest (4' y);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: textBounds.X += 4;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: switch (hti.Column.TextAlign) {  case HorizontalAlignment.Center:  	textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width) / 2;  	break;  case HorizontalAlignment.Right:  	textBounds.X = cellBounds.Right - textSize.Width;  	break;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following statement contains a magic number: textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width) / 2;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,WndProc,The following statement contains a magic number: switch (m.Msg) {  case 2:  	// WM_DESTROY  	if (!HandleDestroy (ref m))  		base.WndProc (ref m);  	break;  //case 0x14: // WM_ERASEBKGND  //    Can't do anything here since' when the control is double buffered' anything  //    done here is immediately over-drawn  //    break;  case 0x0F:  	// WM_PAINT  	if (!HandlePaint (ref m))  		base.WndProc (ref m);  	break;  case 0x46:  	// WM_WINDOWPOSCHANGING  	if (!HandleWindowPosChanging (ref m))  		base.WndProc (ref m);  	break;  case 0x4E:  	// WM_NOTIFY  	if (!HandleNotify (ref m))  		base.WndProc (ref m);  	break;  case 0x0100:  	// WM_KEY_DOWN  	if (!HandleKeyDown (ref m))  		base.WndProc (ref m);  	break;  case 0x0102:  	// WM_CHAR  	if (!HandleChar (ref m))  		base.WndProc (ref m);  	break;  case 0x0201:  	// WM_LBUTTONDOWN  	if (PossibleFinishCellEditing () && !HandleLButtonDown (ref m))  		base.WndProc (ref m);  	break;  case 0x202:  	// WM_LBUTTONUP  	if (IsVistaOrLater && HasCollapsibleGroups)  		base.DefWndProc (ref m);  	base.WndProc (ref m);  	break;  case 0x0203:  	// WM_LBUTTONDBLCLK  	if (PossibleFinishCellEditing () && !HandleLButtonDoubleClick (ref m))  		base.WndProc (ref m);  	break;  case 0x0204:  	// WM_RBUTTONDOWN  	if (PossibleFinishCellEditing () && !HandleRButtonDown (ref m))  		base.WndProc (ref m);  	break;  case 0x0206:  	// WM_RBUTTONDBLCLK  	if (PossibleFinishCellEditing () && !HandleRButtonDoubleClick (ref m))  		base.WndProc (ref m);  	break;  case 0x204E:  	// WM_REFLECT_NOTIFY  	if (!HandleReflectNotify (ref m))  		base.WndProc (ref m);  	break;  case 0x114:  // WM_HSCROLL:  case 0x115:  	// WM_VSCROLL:  	if (PossibleFinishCellEditing ())  		base.WndProc (ref m);  	break;  case 0x20A:  // WM_MOUSEWHEEL:  case 0x20E:  	// WM_MOUSEHWHEEL:  	if (PossibleFinishCellEditing ())  		base.WndProc (ref m);  	break;  case 0x7B:  	// WM_CONTEXTMENU  	if (!HandleContextMenu (ref m))  		base.WndProc (ref m);  	break;  default:  	base.WndProc (ref m);  	break;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleChar,The following statement contains a magic number: try {  	const int MILLISECONDS_BETWEEN_KEYPRESSES = 1000;  	// What character did the user type and was it part of a longer string?  	var character = (char)m.WParam.ToInt32 ();  	//TODO: Will this work on 64 bit or MBCS?  	if (character == (char)Keys.Back) {  		// Backspace forces the next key to be considered the start of a new search  		timeLastCharEvent = 0;  		return true;  	}  	if (Char.IsControl (character)) {  		timeLastCharEvent = Environment.TickCount;  		return false;  	}  	if (Environment.TickCount < (timeLastCharEvent + MILLISECONDS_BETWEEN_KEYPRESSES))  		lastSearchString += character;  	else  		lastSearchString = character.ToString ();  	// If this control is showing checkboxes' we want to ignore single space presses'  	// since they are used to toggle the selected checkboxes.  	if (CheckBoxes && lastSearchString == " ") {  		timeLastCharEvent = 0;  		return true;  	}  	// Where should the search start?  	int start = 0;  	ListViewItem focused = FocusedItem;  	if (focused != null) {  		start = GetItemIndexInDisplayOrder (focused);  		// If the user presses a single key' we search from after the focused item'  		// being careful not to march past the end of the list  		if (lastSearchString.Length == 1) {  			start += 1;  			if (start == GetItemCount ())  				start = 0;  		}  	}  	// Give the world a chance to fiddle with or completely avoid the searching process  	var args = new BeforeSearchingEventArgs (lastSearchString' start);  	OnBeforeSearching (args);  	if (args.Canceled)  		return true;  	// The parameters of the search may have been changed  	string searchString = args.StringToFind;  	start = args.StartSearchFrom;  	// Do the actual search  	int found = FindMatchingRow (searchString' start' SearchDirectionHint.Down);  	if (found >= 0) {  		// Select and focus on the found item  		BeginUpdate ();  		try {  			SelectedIndices.Clear ();  			ListViewItem lvi = GetNthItemInDisplayOrder (found);  			lvi.Selected = true;  			lvi.Focused = true;  			EnsureVisible (lvi.Index);  		} finally {  			EndUpdate ();  		}  	}  	// Tell the world that a search has occurred  	var args2 = new AfterSearchingEventArgs (searchString' found);  	OnAfterSearching (args2);  	if (!args2.Handled) {  		if (found < 0)  			SystemSounds.Beep.Play ();  	}  } catch {  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: switch (nmcustomdraw.nmcd.dwDrawStage) {  case CDDS_PREPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_PREPAINT");  	// Remember which items were drawn during this paint cycle  	if (prePaintLevel == 0)  		drawnItems = new List<OLVListItem> ();  	// If there are any items' we have to wait until at least one has been painted  	// before we draw the overlays. If there aren't any items' there will never be any  	// item paint events' so we can draw the overlays whenever  	isAfterItemPaint = (GetItemCount () == 0);  	prePaintLevel++;  	base.WndProc (ref m);  	// Make sure that we get postpaint notifications  	m.Result = (IntPtr)((int)m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);  	return true;  case CDDS_POSTPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_POSTPAINT");  	prePaintLevel--;  	// When in group view' we have two problems. On XP' the control sends  	// a whole heap of PREPAINT/POSTPAINT messages before drawing any items.  	// We have to wait until after the first item paint before we draw overlays.  	// On Vista' we have a different problem. On Vista' the control nests calls  	// to PREPAINT and POSTPAINT. We only want to draw overlays on the outermost  	// POSTPAINT.  	if (prePaintLevel == 0 && (isMarqueSelecting || isAfterItemPaint)) {  		shouldDoCustomDrawing = false;  		// Draw our overlays after everything has been drawn  		using (Graphics g = Graphics.FromHdc (nmcustomdraw.nmcd.hdc)) {  			DrawAllDecorations (g' drawnItems);  		}  	}  	break;  case CDDS_ITEMPREPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREPAINT");  	// When in group view on XP' the control send a whole heap of PREPAINT/POSTPAINT  	// messages before drawing any items.  	// We have to wait until after the first item paint before we draw overlays  	isAfterItemPaint = true;  	// This scheme of catching custom draw msgs works fine' except  	// for Tile view. Something in .NET's handling of Tile view causes lots  	// of invalidates and erases. So' we just ignore completely  	// .NET's handling of Tile view and let the underlying control  	// do its stuff. Strangely' if the Tile view is  	// completely owner drawn' those erasures don't happen.  	if (View == View.Tile) {  		if (OwnerDraw && ItemRenderer != null)  			base.WndProc (ref m);  	} else {  		base.WndProc (ref m);  	}  	m.Result = (IntPtr)((int)m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);  	return true;  case CDDS_ITEMPOSTPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTPAINT");  	if (Columns.Count > 0) {  		OLVListItem olvi = GetItem ((int)nmcustomdraw.nmcd.dwItemSpec);  		if (olvi != null)  			drawnItems.Add (olvi);  	}  	break;  case CDDS_SUBITEMPREPAINT:  	//System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem));  	// There is a bug in the .NET framework which appears when column 0 of an owner drawn listview  	// is dragged to another column position.  	// The bounds calculation always returns the left edge of column 0 as being 0.  	// The effects of this bug become apparent  	// when the listview is scrolled horizontally: the control can think that column 0  	// is no longer visible (the horizontal scroll position is subtracted from the bounds' giving a  	// rectangle that is offscreen). In those circumstances' column 0 is not redraw because  	// the control thinks it is not visible and so does not trigger a DrawSubItem event.  	// To fix this problem' we have to detected the situation -- owner drawing column 0 in any column except 0 --  	// trigger our own DrawSubItem' and then prevent the default processing from occuring.  	// Are we owner drawing column 0 when it's in any column except 0?  	if (!OwnerDraw)  		return false;  	int columnIndex = nmcustomdraw.iSubItem;  	if (columnIndex != 0)  		return false;  	int displayIndex = Columns [0].DisplayIndex;  	if (displayIndex == 0)  		return false;  	var rowIndex = (int)nmcustomdraw.nmcd.dwItemSpec;  	OLVListItem item = GetItem (rowIndex);  	if (item == null)  		return false;  	// OK. We have the error condition' so lets do what the .NET framework should do.  	// Trigger an event to draw column 0 when it is not at display index 0  	using (Graphics g = Graphics.FromHdc (nmcustomdraw.nmcd.hdc)) {  		// Correctly calculate the bounds of cell 0  		Rectangle r = item.GetSubItemBounds (0);  		// We can hardcode "0" here since we know we are only doing this for column 0  		var args = new DrawListViewSubItemEventArgs (g' r' item' item.SubItems [0]' rowIndex' 0' Columns [0]' (ListViewItemStates)nmcustomdraw.nmcd.uItemState);  		OnDrawSubItem (args);  		// If the event handler wants to do the default processing (i.e. DrawDefault = true)' we are stuck.  		// There is no way we can force the default drawing because of the bug in .NET we are trying to get around.  		Trace.Assert (!args.DrawDefault' "Default drawing is impossible in this situation");  	}  	m.Result = (IntPtr)4;  	return true;  case CDDS_SUBITEMPOSTPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_SUBITEMPOSTPAINT");  	break;  // I have included these stages' but it doesn't seem that they are sent for ListViews.  // http://www.tech-archive.net/Archive/VC/microsoft.public.vc.mfc/2006-08/msg00220.html  case CDDS_PREERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_PREERASE");  	break;  case CDDS_POSTERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_POSTERASE");  	break;  case CDDS_ITEMPREERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREERASE");  	break;  case CDDS_ITEMPOSTERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTERASE");  	break;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following statement contains a magic number: m.Result = (IntPtr)4;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12) {  case 1:  	return CheckState.Unchecked;  case 2:  	return CheckState.Checked;  case 3:  	return CheckState.Indeterminate;  default:  	return CheckState.Checked;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12) {  case 1:  	return CheckState.Unchecked;  case 2:  	return CheckState.Checked;  case 3:  	return CheckState.Indeterminate;  default:  	return CheckState.Checked;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCheckState,The following statement contains a magic number: switch ((state & 0xf000) >> 12) {  case 1:  	return CheckState.Unchecked;  case 2:  	return CheckState.Checked;  case 3:  	return CheckState.Indeterminate;  default:  	return CheckState.Checked;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,EnsureGroupVisible,The following statement contains a magic number: if (groupIndex <= 0) {  	// There is no easy way to scroll back to the beginning of the list  	int delta = 0 - NativeMethods.GetScrollPosition (this' false);  	NativeMethods.Scroll (this' 0' delta);  } else {  	// Find the display rectangle of the last item in the previous group  	ListViewGroup previousGroup = Groups [groupIndex - 1];  	ListViewItem lastItemInGroup = previousGroup.Items [previousGroup.Items.Count - 1];  	Rectangle r = GetItemRect (lastItemInGroup.Index);  	// Scroll so that the last item of the previous group is just out of sight'  	// which will make the desired group header visible.  	int delta = r.Y + r.Height / 2;  	NativeMethods.Scroll (this' 0' delta);  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: if (il == null) {  	il = new ImageList ();  	il.ImageSize = new Size (16' 16);  	il.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: if (il == null) {  	il = new ImageList ();  	il.ImageSize = new Size (16' 16);  	il.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: il.ImageSize = new Size (16' 16);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,MakeSortIndicatorImages,The following statement contains a magic number: il.ImageSize = new Size (16' 16);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,PostProcessOneRow,The following statement contains a magic number: if (UseAlternatingBackColors && View == View.Details) {  	if (displayIndex % 2 == 1) {  		olvi.BackColor = AlternateRowBackColorOrDefault;  	} else {  		olvi.BackColor = BackColor;  	}  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,PostProcessOneRow,The following statement contains a magic number: if (displayIndex % 2 == 1) {  	olvi.BackColor = AlternateRowBackColorOrDefault;  } else {  	olvi.BackColor = BackColor;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,SetupBaseImageList,The following statement contains a magic number: if (rowHeight == -1 || View != View.Details || (shadowedImageList != null && shadowedImageList.ImageSize.Height == rowHeight))  	BaseSmallImageList = shadowedImageList;  else {  	int width = (shadowedImageList == null ? 16 : shadowedImageList.ImageSize.Width);  	BaseSmallImageList = MakeResizedImageList (width' rowHeight' shadowedImageList);  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (StateImageList == null) {  	StateImageList = new ImageList ();  	StateImageList.ImageSize = new Size (16' 16);  	StateImageList.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (StateImageList == null) {  	StateImageList = new ImageList ();  	StateImageList.ImageSize = new Size (16' 16);  	StateImageList.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: StateImageList.ImageSize = new Size (16' 16);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: StateImageList.ImageSize = new Size (16' 16);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (RowHeight != -1 && View == View.Details && StateImageList.ImageSize.Height != RowHeight) {  	StateImageList = new ImageList ();  	StateImageList.ImageSize = new Size (16' RowHeight);  	StateImageList.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: StateImageList.ImageSize = new Size (16' RowHeight);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeStateImageList,The following statement contains a magic number: if (TriStateCheckBoxes && StateImageList.Images.Count <= 2)  	AddCheckStateBitmap (StateImageList' INDETERMINATE_KEY' CheckBoxState.MixedNormal);  else {  	if (StateImageList.Images.ContainsKey (INDETERMINATE_KEY))  		StateImageList.Images.RemoveByKey (INDETERMINATE_KEY);  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: if (il == null) {  	il = new ImageList ();  	il.ImageSize = new Size (16' 16);  	il.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: if (il == null) {  	il = new ImageList ();  	il.ImageSize = new Size (16' 16);  	il.ColorDepth = ColorDepth.Depth32Bit;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: il.ImageSize = new Size (16' 16);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,InitializeCheckBoxImages,The following statement contains a magic number: il.ImageSize = new Size (16' 16);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ShouldStartCellEdit,The following statement contains a magic number: return (lastMouseDownClickCount == 2 && CellEditActivation == CellEditActivateMode.DoubleClick);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,StartCellEdit,The following statement contains a magic number: if (View != View.Tile && cellEditor.Height != r.Height)  	cellEditor.Top += (r.Height - cellEditor.Height) / 2;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,StartCellEdit,The following statement contains a magic number: cellEditor.Top += (r.Height - cellEditor.Height) / 2;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: if (GetActualImageIndex (subItemImageSelector) != -1) {  	offset += SmallImageSize.Width + 2;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: offset += SmallImageSize.Width + 2;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: if (CheckBoxes && StateImageList != null && subItemIndex == 0) {  	offset += StateImageList.ImageSize.Width + 2;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellEditorBoundsStandard,The following statement contains a magic number: offset += StateImageList.ImageSize.Width + 2;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: if (r.Y < -10000000 || r.Y > 10000000) {  	r.Y = item.Bounds.Y;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: if (r.Y < -10000000 || r.Y > 10000000) {  	r.Y = item.Bounds.Y;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.X = sides.X + 4;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateCellBounds,The following statement contains a magic number: r.Width = sides.Y - sides.X - 5;  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,GetFirstNonNullValue,The following statement contains a magic number: for (int i = 0; i < Math.Min (GetItemCount ()' 1000); i++) {  	object value = column.GetValue (GetModelObject (i));  	if (value != null)  		return value;  }  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ConfigureAutoComplete,The following statement contains a magic number: ConfigureAutoComplete (tb' column' 1000);  
Magic Number,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ShouldShowOverlays,The following statement contains a magic number: if (Screen.PrimaryScreen.BitsPerPixel < 32)  	return false;  
Magic Number,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SelectAllItems,The following statement contains a magic number: SetItemState (list' -1' 2' 2);  
Magic Number,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SelectAllItems,The following statement contains a magic number: SetItemState (list' -1' 2' 2);  
Magic Number,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,DeselectAllItems,The following statement contains a magic number: SetItemState (list' -1' 2' 0);  
Magic Number,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,GetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)  	return (int)GetWindowLong32 (hWnd' nIndex);  else  	return (int)(long)GetWindowLongPtr64 (hWnd' nIndex);  
Magic Number,BrightIdeasSoftware,NativeMethods,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\NativeMethods.cs,SetWindowLong,The following statement contains a magic number: if (IntPtr.Size == 4)  	return (int)SetWindowLongPtr32 (hWnd' nIndex' dwNewLong);  else  	return (int)(long)SetWindowLongPtr64 (hWnd' nIndex' dwNewLong);  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: return new Point (pt.X - (size.Width / 2)' pt.Y);  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: return new Point (pt.X' pt.Y - (size.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following statement contains a magic number: return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: return new Point (r.X + (r.Width / 2)' r.Top);  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: return new Point (r.Left' r.Top + (r.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: return new Point (r.Right' r.Top + (r.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following statement contains a magic number: return new Point (r.X + (r.Width / 2)' r.Bottom);  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,ApplyRotation,The following statement contains a magic number: m.RotateAt (Rotation' new Point (r.Left + r.Width / 2' r.Top + r.Height / 2));  
Magic Number,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,ApplyRotation,The following statement contains a magic number: m.RotateAt (Rotation' new Point (r.Left + r.Width / 2' r.Top + r.Height / 2));  
Magic Number,BrightIdeasSoftware,ImageAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawTransparentBitmap,The following statement contains a magic number: if (transparency != 255) {  	imageAttributes = new ImageAttributes ();  	float a = transparency / 255.0f;  	float[][] colorMatrixElements =  {  		new float[] {  			1'  			0'  			0'  			0'  			0  		}'  		new float[] {  			0'  			1'  			0'  			0'  			0  		}'  		new float[] {  			0'  			0'  			1'  			0'  			0  		}'  		new[] {  			0'  			0'  			0'  			a'  			0  		}'  		new float[] {  			0'  			0'  			0'  			0'  			1  		}  	};  	imageAttributes.SetColorMatrix (new ColorMatrix (colorMatrixElements));  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawBorderedText,The following statement contains a magic number: borderRect.Inflate ((int)BorderWidth / 2' (int)BorderWidth / 2);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,DrawBorderedText,The following statement contains a magic number: borderRect.Inflate ((int)BorderWidth / 2' (int)BorderWidth / 2);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 0' 90);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,TextAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,TintedColumnDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,TintedColumnDecoration,The following statement contains a magic number: Tint = Color.FromArgb (15' Color.Blue);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: if (diameter <= 0.0f) {  	path.AddRectangle (rect);  } else {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  }  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 0' 90);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,BorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BorderPen = new Pen (Color.DarkBlue' 2);  
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: CornerRounding = 8;  
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BoundsPadding = new Size (10' 8);  
Magic Number,BrightIdeasSoftware,EditingCellBorderDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,EditingCellBorderDecoration,The following statement contains a magic number: BoundsPadding = new Size (10' 8);  
Magic Number,BrightIdeasSoftware,LightBoxDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: BoundsPadding = new Size (-1' 4);  
Magic Number,BrightIdeasSoftware,LightBoxDecoration,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Decorations.cs,LightBoxDecoration,The following statement contains a magic number: FillBrush = new SolidBrush (Color.FromArgb (72' Color.Black));  
Magic Number,BrightIdeasSoftware,ImageOverlay,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawImage (g' insetRect' Image' 255);  
Magic Number,BrightIdeasSoftware,TextOverlay,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawText (g' insetRect' Text' 255);  
Magic Number,BrightIdeasSoftware,BillboardOverlay,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,BillboardOverlay,The following statement contains a magic number: Transparency = 255;  
Magic Number,BrightIdeasSoftware,BillboardOverlay,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,BillboardOverlay,The following statement contains a magic number: Font = new Font ("Tahoma"' 10);  
Magic Number,BrightIdeasSoftware,BillboardOverlay,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Overlays.cs,Draw,The following statement contains a magic number: DrawBorderedText (g' textRect' Text' 255);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: if (inner.Width < outer.Width) {  	switch (Column.TextAlign) {  	case HorizontalAlignment.Left:  		r.X = outer.Left;  		break;  	case HorizontalAlignment.Center:  		r.X = outer.Left + ((outer.Width - inner.Width) / 2);  		break;  	case HorizontalAlignment.Right:  		r.X = outer.Right - inner.Width - 1;  		break;  	}  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: switch (Column.TextAlign) {  case HorizontalAlignment.Left:  	r.X = outer.Left;  	break;  case HorizontalAlignment.Center:  	r.X = outer.Left + ((outer.Width - inner.Width) / 2);  	break;  case HorizontalAlignment.Right:  	r.X = outer.Right - inner.Width - 1;  	break;  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: r.X = outer.Left + ((outer.Width - inner.Width) / 2);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: if (inner.Height < outer.Height)  	r.Y = outer.Top + ((outer.Height - inner.Height) / 2);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following statement contains a magic number: r.Y = outer.Top + ((outer.Height - inner.Height) / 2);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,CalculateCheckBoxWidth,The following statement contains a magic number: if (ListView.CheckBoxes && Column.Index == 0)  	return CheckBoxRenderer.GetGlyphSize (g' CheckBoxState.UncheckedNormal).Width + 6;  else  	return 0;  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,CalculateCheckBoxWidth,The following statement contains a magic number: return CheckBoxRenderer.GetGlyphSize (g' CheckBoxState.UncheckedNormal).Width + 6;  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardRender,The following statement contains a magic number: if (Column.Index == 0) {  	r.X += 3;  	r.Width -= 1;  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardRender,The following statement contains a magic number: r.X += 3;  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,StandardGetEditRectangle,The following statement contains a magic number: r.Width = Math.Max (r.Width - width' 40);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: using (Brush brush = new SolidBrush (backgroundColor)) {  	g.FillRectangle (brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: using (Brush brush = new SolidBrush (backgroundColor)) {  	g.FillRectangle (brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: g.FillRectangle (brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawBackground,The following statement contains a magic number: g.FillRectangle (brush' r.X - 1' r.Y - 1' r.Width + 2' r.Height + 2);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: if (IsPrinting) {  	if (ListView.StateImageList == null || imageIndex < 0)  		return 0;  	else  		return DrawImage (g' r' ListView.StateImageList.Images [imageIndex]) + 4;  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: if (ListView.StateImageList == null || imageIndex < 0)  	return 0;  else  	return DrawImage (g' r' ListView.StateImageList.Images [imageIndex]) + 4;  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: return DrawImage (g' r' ListView.StateImageList.Images [imageIndex]) + 4;  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox (g' new Point (r.X + 3' r.Y + (r.Height / 2) - 6)' boxState);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox (g' new Point (r.X + 3' r.Y + (r.Height / 2) - 6)' boxState);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: CheckBoxRenderer.DrawCheckBox (g' new Point (r.X + 3' r.Y + (r.Height / 2) - 6)' boxState);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following statement contains a magic number: return CheckBoxRenderer.GetGlyphSize (g' boxState).Width + 6;  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The following statement contains a magic number: if (image != null) {  	int top = r.Y;  	if (image.Size.Height < r.Height)  		top += ((r.Height - image.Size.Height) / 2);  	g.DrawImageUnscaled (image' r.X' top);  	return image.Width;  }  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The following statement contains a magic number: if (image.Size.Height < r.Height)  	top += ((r.Height - image.Size.Height) / 2);  
Magic Number,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawImage,The following statement contains a magic number: top += ((r.Height - image.Size.Height) / 2);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The following statement contains a magic number: foreach (CharacterRange range in Filter.FindAllMatchedRanges (txt)) {  	// Measure the text that comes before our substring  	Size precedingTextSize = Size.Empty;  	if (range.First > 0) {  		string precedingText = txt.Substring (0' range.First);  		precedingTextSize = TextRenderer.MeasureText (g' precedingText' f' r.Size' flags);  		precedingTextSize.Width -= paddingAdjustment;  	}  	// Measure the length of our substring (may be different each time due to case differences)  	string highlightText = txt.Substring (range.First' range.Length);  	Size textToHighlightSize = TextRenderer.MeasureText (g' highlightText' f' r.Size' flags);  	textToHighlightSize.Width -= paddingAdjustment;  	// Draw a filled frame around our substring  	DrawSubstringFrame (g' r.X + precedingTextSize.Width + 1' r.Top' textToHighlightSize.Width' r.Height - 2);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiTextHighlighting,The following statement contains a magic number: DrawSubstringFrame (g' r.X + precedingTextSize.Width + 1' r.Top' textToHighlightSize.Width' r.Height - 2);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiPlusTextHighlighting,The following statement contains a magic number: using (StringFormat fmt = StringFormatForGdiPlus) {  	RectangleF rf = r;  	fmt.SetMeasurableCharacterRanges (ranges.ToArray ());  	Region[] stringRegions = g.MeasureCharacterRanges (txt' Font' rf' fmt);  	foreach (Region region in stringRegions) {  		RectangleF bounds = region.GetBounds (g);  		DrawSubstringFrame (g' bounds.X - 1' bounds.Y - 1' bounds.Width + 2' bounds.Height);  	}  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiPlusTextHighlighting,The following statement contains a magic number: foreach (Region region in stringRegions) {  	RectangleF bounds = region.GetBounds (g);  	DrawSubstringFrame (g' bounds.X - 1' bounds.Y - 1' bounds.Width + 2' bounds.Height);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawGdiPlusTextHighlighting,The following statement contains a magic number: DrawSubstringFrame (g' bounds.X - 1' bounds.Y - 1' bounds.Width + 2' bounds.Height);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: if (diameter > 0) {  	var arc = new RectangleF (rect.X' rect.Y' diameter' diameter);  	path.AddArc (arc' 180' 90);  	arc.X = rect.Right - diameter;  	path.AddArc (arc' 270' 90);  	arc.Y = rect.Bottom - diameter;  	path.AddArc (arc' 0' 90);  	arc.X = rect.Left;  	path.AddArc (arc' 90' 90);  	path.CloseFigure ();  } else {  	path.AddRectangle (rect);  }  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 180' 90);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 270' 90);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 0' 90);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,HighlightTextRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,GetRoundedRect,The following statement contains a magic number: path.AddArc (arc' 90' 90);  
Magic Number,BrightIdeasSoftware,MappedImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,MappedImageRenderer,The following statement contains a magic number: if ((keysAndImages.GetLength (0) % 2) != 0)  	throw new ArgumentException ("Array must have key/image pairs");  
Magic Number,BrightIdeasSoftware,MappedImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,MappedImageRenderer,The following statement contains a magic number: for (int i = 0; i < keysAndImages.GetLength (0); i += 2)  	Add (keysAndImages [i]' keysAndImages [i + 1]);  
Magic Number,BrightIdeasSoftware,MappedImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,MappedImageRenderer,The following statement contains a magic number: i += 2
Magic Number,BrightIdeasSoftware,ImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimer,The following statement contains a magic number: if (ListView == null || Paused)  	tickler.Change (1000' Timeout.Infinite);  else {  	if (ListView.InvokeRequired)  		ListView.Invoke ((MethodInvoker)delegate {  			OnTimer (state);  		});  	else  		OnTimerInThread ();  }  
Magic Number,BrightIdeasSoftware,ImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimer,The following statement contains a magic number: tickler.Change (1000' Timeout.Infinite);  
Magic Number,BrightIdeasSoftware,ImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,The following statement contains a magic number: if (ListView.View != View.Details || Column.Index < 0) {  	tickler.Change (1000' Timeout.Infinite);  	return;  }  
Magic Number,BrightIdeasSoftware,ImageRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,OnTimerInThread,The following statement contains a magic number: tickler.Change (1000' Timeout.Infinite);  
Magic Number,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 254' 254' 254);  
Magic Number,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 254' 254' 254);  
Magic Number,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 254' 254' 254);  
Magic Number,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,GlassPanelForm,The following statement contains a magic number: BackColor = Color.FromArgb (255' 254' 254' 254);  
Magic Number,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,HideGlass,The following statement contains a magic number: Bounds = new Rectangle (-10000' -10000' 1' 1);  
Magic Number,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,HideGlass,The following statement contains a magic number: Bounds = new Rectangle (-10000' -10000' 1' 1);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (column.IsHeaderVertical)  	return TextRenderer.MeasureText (g' column.Text' f' new Size (10000' 10000)' flags).Width;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (column.IsHeaderVertical)  	return TextRenderer.MeasureText (g' column.Text' f' new Size (10000' 10000)' flags).Width;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: return TextRenderer.MeasureText (g' column.Text' f' new Size (10000' 10000)' flags).Width;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: return TextRenderer.MeasureText (g' column.Text' f' new Size (10000' 10000)' flags).Width;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= 6;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (HasNonThemedSortIndicator (column))  	r.Width -= 16;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= 16;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: if (column.HasHeaderImage)  	r.Width -= column.ImageList.ImageSize.Width + 3;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateColumnHeight,The following statement contains a magic number: r.Width -= column.ImageList.ImageSize.Width + 3;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (columnIndex == 0 && VisualStyleRenderer.IsElementDefined (VisualStyleElement.Header.ItemLeft.Normal))  	part = 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: part = 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (columnIndex == ListView.Columns.Count - 1 && VisualStyleRenderer.IsElementDefined (VisualStyleElement.Header.ItemRight.Normal))  	part = 3;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: part = 3;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (isSelected)  	state = 3;  // pressed  else if (columnIndex == ColumnIndexUnderCursor)  	state = 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (isSelected)  	state = 3;  // pressed  else if (columnIndex == ColumnIndexUnderCursor)  	state = 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: state = 3;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: if (columnIndex == ColumnIndexUnderCursor)  	state = 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedBackground,The following statement contains a magic number: state = 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: if (renderer2 != null) {  	Size sz = renderer2.GetPartSize (g' ThemeSizeType.True);  	Point pt = renderer2.GetPoint (PointProperty.Offset);  	// GetPoint() should work' but if it doesn't' put the arrow in the top middle  	if (pt.X == 0 && pt.Y == 0)  		pt = new Point (r.X + (r.Width / 2) - (sz.Width / 2)' r.Y);  	renderer2.DrawBackground (g' new Rectangle (pt' sz));  }  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: if (renderer2 != null) {  	Size sz = renderer2.GetPartSize (g' ThemeSizeType.True);  	Point pt = renderer2.GetPoint (PointProperty.Offset);  	// GetPoint() should work' but if it doesn't' put the arrow in the top middle  	if (pt.X == 0 && pt.Y == 0)  		pt = new Point (r.X + (r.Width / 2) - (sz.Width / 2)' r.Y);  	renderer2.DrawBackground (g' new Rectangle (pt' sz));  }  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: if (pt.X == 0 && pt.Y == 0)  	pt = new Point (r.X + (r.Width / 2) - (sz.Width / 2)' r.Y);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: if (pt.X == 0 && pt.Y == 0)  	pt = new Point (r.X + (r.Width / 2) - (sz.Width / 2)' r.Y);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: pt = new Point (r.X + (r.Width / 2) - (sz.Width / 2)' r.Y);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawThemedSortIndicator,The following statement contains a magic number: pt = new Point (r.X + (r.Width / 2) - (sz.Width / 2)' r.Y);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: if (ListView.LastSortOrder == SortOrder.Ascending) {  	pts [0].Offset (midX - deltaX' midY + deltaY);  	pts [1].Offset (midX' midY - deltaY - 1);  	pts [2].Offset (midX + deltaX' midY + deltaY);  } else {  	pts [0].Offset (midX - deltaX' midY - deltaY);  	pts [1].Offset (midX' midY + deltaY);  	pts [2].Offset (midX + deltaX' midY - deltaY);  }  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: if (ListView.LastSortOrder == SortOrder.Ascending) {  	pts [0].Offset (midX - deltaX' midY + deltaY);  	pts [1].Offset (midX' midY - deltaY - 1);  	pts [2].Offset (midX + deltaX' midY + deltaY);  } else {  	pts [0].Offset (midX - deltaX' midY - deltaY);  	pts [1].Offset (midX' midY + deltaY);  	pts [2].Offset (midX + deltaX' midY - deltaY);  }  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: pts [2].Offset (midX + deltaX' midY + deltaY);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawUnthemedSortIndicator,The following statement contains a magic number: pts [2].Offset (midX + deltaX' midY - deltaY);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,CalculateFilterIndicatorWidth,The following statement contains a magic number: if (Resources.ColumnFilterIndicator == null || r.Width < 48)  	return 0;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: r.Inflate (-3' 0);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: r.Y -= 2;  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: if (column.IsHeaderVertical) {  	DrawVerticalText (g' r' column' f' color);  } else {  	// Does the column have a header image and is there space for it?  	if (column.HasHeaderImage && r.Width > column.ImageList.ImageSize.Width * 2)  		DrawImageAndText (g' r' column' flags' f' color' imageTextGap);  	else  		DrawText (g' r' column' flags' f' color);  }  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawHeaderImageAndText,The following statement contains a magic number: if (column.HasHeaderImage && r.Width > column.ImageList.ImageSize.Width * 2)  	DrawImageAndText (g' r' column' flags' f' color' imageTextGap);  else  	DrawText (g' r' column' flags' f' color);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The following statement contains a magic number: if (column.HeaderTextAlign == HorizontalAlignment.Center)  	imageX = textRect.Left + ((textRect.Width - textSize.Width) / 2);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawImageAndText,The following statement contains a magic number: imageX = textRect.Left + ((textRect.Width - textSize.Width) / 2);  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The following statement contains a magic number: try {  	// Create a matrix transformation that will rotate the text 90 degrees vertically  	// AND place the text in the middle of where it was previously. [Think of tipping  	// a box over by its bottom left edge -- you have to move it back a bit so it's  	// in the same place as it started]  	var m = new Matrix ();  	m.RotateAt (-90' new Point (r.X' r.Bottom));  	m.Translate (0' r.Height);  	g.Transform = m;  	var fmt = new StringFormat (StringFormatFlags.NoWrap);  	fmt.Alignment = StringAlignment.Near;  	fmt.LineAlignment = column.HeaderTextAlignAsStringAlignment;  	//fmt.Trimming = StringTrimming.EllipsisCharacter;  	// The drawing is rotated 90 degrees' so switch our text boundaries  	Rectangle textRect = r;  	textRect.Width = r.Height;  	textRect.Height = r.Width;  	using (Brush b = new SolidBrush (color))  		g.DrawString (column.Text' f' b' textRect' fmt);  } finally {  	g.ResetTransform ();  }  
Magic Number,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,DrawVerticalText,The following statement contains a magic number: m.RotateAt (-90' new Point (r.X' r.Bottom));  
Magic Number,BrightIdeasSoftware,ToolStripCheckedListBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolStripCheckedListBox.cs,ToolStripCheckedListBox,The following statement contains a magic number: CheckedListBoxControl.MaximumSize = new Size (400' 700);  
Magic Number,BrightIdeasSoftware,ToolStripCheckedListBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolStripCheckedListBox.cs,ToolStripCheckedListBox,The following statement contains a magic number: CheckedListBoxControl.MaximumSize = new Size (400' 700);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point (295' 31);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Location = new System.Drawing.Point (295' 31);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveUp.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point (295' 60);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Location = new System.Drawing.Point (295' 60);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonMoveDown.TabIndex = 2;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Location = new System.Drawing.Point (295' 89);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Location = new System.Drawing.Point (295' 89);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonShow.TabIndex = 3;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Location = new System.Drawing.Point (295' 118);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Location = new System.Drawing.Point (295' 118);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonHide.TabIndex = 4;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (13' 9);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (13' 9);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (366' 19);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (366' 19);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 5;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point (198' 304);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point (198' 304);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 6;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point (295' 304);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point (295' 304);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size (87' 23);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 7;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb (((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb (((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.AlternateRowBackColor = System.Drawing.Color.FromArgb (((int)(((byte)(192))))' ((int)(((byte)(255))))' ((int)(((byte)(192)))));  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Location = new System.Drawing.Point (12' 31);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Location = new System.Drawing.Point (12' 31);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Size = new System.Drawing.Size (273' 259);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.objectListView1.Size = new System.Drawing.Size (273' 259);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.olvColumn1.Width = 267;  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (391' 339);  
Magic Number,BrightIdeasSoftware,ColumnSelectionForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\ColumnSelectionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (391' 339);  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,GetSelectionStyle,The following statement contains a magic number: cf.szFaceName = new char[32];  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: lock (this) {  	lastSetHashCode = hashCode;  	try {  		Cursor.Hide ();  		BeginUpdate ();  		ReadOnly = false;  		var sb = new StringBuilder (value);  		var matches = new List<LinkMatch> ();  		int idx = 0;  		while (true) {  			var match = linkRegex.Match (sb.ToString ()' idx);  			if (!match.Success)  				break;  			var link = match.Groups ["link"];  			var name = match.Groups ["name"];  			var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  			sb.Remove (match.Index' match.Length);  			string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  			sb.Insert (match.Index' linkText);  			matches.Add (m2);  			idx = match.Index + linkText.Length;  		}  		base.Rtf = sb.ToString ();  		idx = 0;  		try {  			while (true) {  				int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  				if (start == -1)  					break;  				int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  				if (end == -1)  					break;  				// Error?  				base.Select (start' end - start + 3);  				string text = base.SelectedText;  				int link = int.Parse (text.Substring (3' text.Length - 6));  				var match = matches [link];  				base.SelectedText = "";  				InsertLink (match.name' match.link' start);  			}  		} catch {  		}  		base.SelectionStart = 0;  		//Point factored = new Point(0'0);  		//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  		//base.ScrollToCaret();  	} catch {  		base.Rtf = value;  	} finally {  		try {  			ReadOnly = oldReadOnly;  			EndUpdate ();  			Invalidate ();  			Update ();  			Cursor.Show ();  		} catch {  		}  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: lock (this) {  	lastSetHashCode = hashCode;  	try {  		Cursor.Hide ();  		BeginUpdate ();  		ReadOnly = false;  		var sb = new StringBuilder (value);  		var matches = new List<LinkMatch> ();  		int idx = 0;  		while (true) {  			var match = linkRegex.Match (sb.ToString ()' idx);  			if (!match.Success)  				break;  			var link = match.Groups ["link"];  			var name = match.Groups ["name"];  			var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  			sb.Remove (match.Index' match.Length);  			string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  			sb.Insert (match.Index' linkText);  			matches.Add (m2);  			idx = match.Index + linkText.Length;  		}  		base.Rtf = sb.ToString ();  		idx = 0;  		try {  			while (true) {  				int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  				if (start == -1)  					break;  				int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  				if (end == -1)  					break;  				// Error?  				base.Select (start' end - start + 3);  				string text = base.SelectedText;  				int link = int.Parse (text.Substring (3' text.Length - 6));  				var match = matches [link];  				base.SelectedText = "";  				InsertLink (match.name' match.link' start);  			}  		} catch {  		}  		base.SelectionStart = 0;  		//Point factored = new Point(0'0);  		//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  		//base.ScrollToCaret();  	} catch {  		base.Rtf = value;  	} finally {  		try {  			ReadOnly = oldReadOnly;  			EndUpdate ();  			Invalidate ();  			Update ();  			Cursor.Show ();  		} catch {  		}  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: lock (this) {  	lastSetHashCode = hashCode;  	try {  		Cursor.Hide ();  		BeginUpdate ();  		ReadOnly = false;  		var sb = new StringBuilder (value);  		var matches = new List<LinkMatch> ();  		int idx = 0;  		while (true) {  			var match = linkRegex.Match (sb.ToString ()' idx);  			if (!match.Success)  				break;  			var link = match.Groups ["link"];  			var name = match.Groups ["name"];  			var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  			sb.Remove (match.Index' match.Length);  			string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  			sb.Insert (match.Index' linkText);  			matches.Add (m2);  			idx = match.Index + linkText.Length;  		}  		base.Rtf = sb.ToString ();  		idx = 0;  		try {  			while (true) {  				int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  				if (start == -1)  					break;  				int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  				if (end == -1)  					break;  				// Error?  				base.Select (start' end - start + 3);  				string text = base.SelectedText;  				int link = int.Parse (text.Substring (3' text.Length - 6));  				var match = matches [link];  				base.SelectedText = "";  				InsertLink (match.name' match.link' start);  			}  		} catch {  		}  		base.SelectionStart = 0;  		//Point factored = new Point(0'0);  		//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  		//base.ScrollToCaret();  	} catch {  		base.Rtf = value;  	} finally {  		try {  			ReadOnly = oldReadOnly;  			EndUpdate ();  			Invalidate ();  			Update ();  			Cursor.Show ();  		} catch {  		}  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: lock (this) {  	lastSetHashCode = hashCode;  	try {  		Cursor.Hide ();  		BeginUpdate ();  		ReadOnly = false;  		var sb = new StringBuilder (value);  		var matches = new List<LinkMatch> ();  		int idx = 0;  		while (true) {  			var match = linkRegex.Match (sb.ToString ()' idx);  			if (!match.Success)  				break;  			var link = match.Groups ["link"];  			var name = match.Groups ["name"];  			var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  			sb.Remove (match.Index' match.Length);  			string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  			sb.Insert (match.Index' linkText);  			matches.Add (m2);  			idx = match.Index + linkText.Length;  		}  		base.Rtf = sb.ToString ();  		idx = 0;  		try {  			while (true) {  				int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  				if (start == -1)  					break;  				int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  				if (end == -1)  					break;  				// Error?  				base.Select (start' end - start + 3);  				string text = base.SelectedText;  				int link = int.Parse (text.Substring (3' text.Length - 6));  				var match = matches [link];  				base.SelectedText = "";  				InsertLink (match.name' match.link' start);  			}  		} catch {  		}  		base.SelectionStart = 0;  		//Point factored = new Point(0'0);  		//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  		//base.ScrollToCaret();  	} catch {  		base.Rtf = value;  	} finally {  		try {  			ReadOnly = oldReadOnly;  			EndUpdate ();  			Invalidate ();  			Update ();  			Cursor.Show ();  		} catch {  		}  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	Cursor.Hide ();  	BeginUpdate ();  	ReadOnly = false;  	var sb = new StringBuilder (value);  	var matches = new List<LinkMatch> ();  	int idx = 0;  	while (true) {  		var match = linkRegex.Match (sb.ToString ()' idx);  		if (!match.Success)  			break;  		var link = match.Groups ["link"];  		var name = match.Groups ["name"];  		var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  		sb.Remove (match.Index' match.Length);  		string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  		sb.Insert (match.Index' linkText);  		matches.Add (m2);  		idx = match.Index + linkText.Length;  	}  	base.Rtf = sb.ToString ();  	idx = 0;  	try {  		while (true) {  			int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  			if (start == -1)  				break;  			int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  			if (end == -1)  				break;  			// Error?  			base.Select (start' end - start + 3);  			string text = base.SelectedText;  			int link = int.Parse (text.Substring (3' text.Length - 6));  			var match = matches [link];  			base.SelectedText = "";  			InsertLink (match.name' match.link' start);  		}  	} catch {  	}  	base.SelectionStart = 0;  	//Point factored = new Point(0'0);  	//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  	//base.ScrollToCaret();  } catch {  	base.Rtf = value;  } finally {  	try {  		ReadOnly = oldReadOnly;  		EndUpdate ();  		Invalidate ();  		Update ();  		Cursor.Show ();  	} catch {  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	Cursor.Hide ();  	BeginUpdate ();  	ReadOnly = false;  	var sb = new StringBuilder (value);  	var matches = new List<LinkMatch> ();  	int idx = 0;  	while (true) {  		var match = linkRegex.Match (sb.ToString ()' idx);  		if (!match.Success)  			break;  		var link = match.Groups ["link"];  		var name = match.Groups ["name"];  		var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  		sb.Remove (match.Index' match.Length);  		string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  		sb.Insert (match.Index' linkText);  		matches.Add (m2);  		idx = match.Index + linkText.Length;  	}  	base.Rtf = sb.ToString ();  	idx = 0;  	try {  		while (true) {  			int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  			if (start == -1)  				break;  			int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  			if (end == -1)  				break;  			// Error?  			base.Select (start' end - start + 3);  			string text = base.SelectedText;  			int link = int.Parse (text.Substring (3' text.Length - 6));  			var match = matches [link];  			base.SelectedText = "";  			InsertLink (match.name' match.link' start);  		}  	} catch {  	}  	base.SelectionStart = 0;  	//Point factored = new Point(0'0);  	//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  	//base.ScrollToCaret();  } catch {  	base.Rtf = value;  } finally {  	try {  		ReadOnly = oldReadOnly;  		EndUpdate ();  		Invalidate ();  		Update ();  		Cursor.Show ();  	} catch {  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	Cursor.Hide ();  	BeginUpdate ();  	ReadOnly = false;  	var sb = new StringBuilder (value);  	var matches = new List<LinkMatch> ();  	int idx = 0;  	while (true) {  		var match = linkRegex.Match (sb.ToString ()' idx);  		if (!match.Success)  			break;  		var link = match.Groups ["link"];  		var name = match.Groups ["name"];  		var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  		sb.Remove (match.Index' match.Length);  		string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  		sb.Insert (match.Index' linkText);  		matches.Add (m2);  		idx = match.Index + linkText.Length;  	}  	base.Rtf = sb.ToString ();  	idx = 0;  	try {  		while (true) {  			int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  			if (start == -1)  				break;  			int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  			if (end == -1)  				break;  			// Error?  			base.Select (start' end - start + 3);  			string text = base.SelectedText;  			int link = int.Parse (text.Substring (3' text.Length - 6));  			var match = matches [link];  			base.SelectedText = "";  			InsertLink (match.name' match.link' start);  		}  	} catch {  	}  	base.SelectionStart = 0;  	//Point factored = new Point(0'0);  	//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  	//base.ScrollToCaret();  } catch {  	base.Rtf = value;  } finally {  	try {  		ReadOnly = oldReadOnly;  		EndUpdate ();  		Invalidate ();  		Update ();  		Cursor.Show ();  	} catch {  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	Cursor.Hide ();  	BeginUpdate ();  	ReadOnly = false;  	var sb = new StringBuilder (value);  	var matches = new List<LinkMatch> ();  	int idx = 0;  	while (true) {  		var match = linkRegex.Match (sb.ToString ()' idx);  		if (!match.Success)  			break;  		var link = match.Groups ["link"];  		var name = match.Groups ["name"];  		var m2 = new LinkMatch (link.Value' name.Value' match.Index' name.Length);  		sb.Remove (match.Index' match.Length);  		string linkText = string.Format ("#:@{0}@:#"' matches.Count.ToString ());  		sb.Insert (match.Index' linkText);  		matches.Add (m2);  		idx = match.Index + linkText.Length;  	}  	base.Rtf = sb.ToString ();  	idx = 0;  	try {  		while (true) {  			int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  			if (start == -1)  				break;  			int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  			if (end == -1)  				break;  			// Error?  			base.Select (start' end - start + 3);  			string text = base.SelectedText;  			int link = int.Parse (text.Substring (3' text.Length - 6));  			var match = matches [link];  			base.SelectedText = "";  			InsertLink (match.name' match.link' start);  		}  	} catch {  	}  	base.SelectionStart = 0;  	//Point factored = new Point(0'0);  	//SendMessage(this.Handle' (int)WindowsMessages.EM_SETSCROLLPOS' 0' ref factored);  	//base.ScrollToCaret();  } catch {  	base.Rtf = value;  } finally {  	try {  		ReadOnly = oldReadOnly;  		EndUpdate ();  		Invalidate ();  		Update ();  		Cursor.Show ();  	} catch {  	}  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	while (true) {  		int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  		if (start == -1)  			break;  		int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  		if (end == -1)  			break;  		// Error?  		base.Select (start' end - start + 3);  		string text = base.SelectedText;  		int link = int.Parse (text.Substring (3' text.Length - 6));  		var match = matches [link];  		base.SelectedText = "";  		InsertLink (match.name' match.link' start);  	}  } catch {  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	while (true) {  		int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  		if (start == -1)  			break;  		int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  		if (end == -1)  			break;  		// Error?  		base.Select (start' end - start + 3);  		string text = base.SelectedText;  		int link = int.Parse (text.Substring (3' text.Length - 6));  		var match = matches [link];  		base.SelectedText = "";  		InsertLink (match.name' match.link' start);  	}  } catch {  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	while (true) {  		int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  		if (start == -1)  			break;  		int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  		if (end == -1)  			break;  		// Error?  		base.Select (start' end - start + 3);  		string text = base.SelectedText;  		int link = int.Parse (text.Substring (3' text.Length - 6));  		var match = matches [link];  		base.SelectedText = "";  		InsertLink (match.name' match.link' start);  	}  } catch {  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: try {  	while (true) {  		int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  		if (start == -1)  			break;  		int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  		if (end == -1)  			break;  		// Error?  		base.Select (start' end - start + 3);  		string text = base.SelectedText;  		int link = int.Parse (text.Substring (3' text.Length - 6));  		var match = matches [link];  		base.SelectedText = "";  		InsertLink (match.name' match.link' start);  	}  } catch {  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: while (true) {  	int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  	if (start == -1)  		break;  	int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  	if (end == -1)  		break;  	// Error?  	base.Select (start' end - start + 3);  	string text = base.SelectedText;  	int link = int.Parse (text.Substring (3' text.Length - 6));  	var match = matches [link];  	base.SelectedText = "";  	InsertLink (match.name' match.link' start);  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: while (true) {  	int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  	if (start == -1)  		break;  	int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  	if (end == -1)  		break;  	// Error?  	base.Select (start' end - start + 3);  	string text = base.SelectedText;  	int link = int.Parse (text.Substring (3' text.Length - 6));  	var match = matches [link];  	base.SelectedText = "";  	InsertLink (match.name' match.link' start);  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: while (true) {  	int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  	if (start == -1)  		break;  	int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  	if (end == -1)  		break;  	// Error?  	base.Select (start' end - start + 3);  	string text = base.SelectedText;  	int link = int.Parse (text.Substring (3' text.Length - 6));  	var match = matches [link];  	base.SelectedText = "";  	InsertLink (match.name' match.link' start);  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: while (true) {  	int start = base.Find ("#:@"' idx' RichTextBoxFinds.NoHighlight);  	if (start == -1)  		break;  	int end = base.Find ("@:#"' start + 3' RichTextBoxFinds.NoHighlight);  	if (end == -1)  		break;  	// Error?  	base.Select (start' end - start + 3);  	string text = base.SelectedText;  	int link = int.Parse (text.Substring (3' text.Length - 6));  	var match = matches [link];  	base.SelectedText = "";  	InsertLink (match.name' match.link' start);  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,SetRtfText,The following statement contains a magic number: base.Select (start' end - start + 3);  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,ConvertFromENLINK64,The following statement contains a magic number: fixed (byte* numRef = es64.contents) {  	enlink.nmhdr = new NMHDR ();  	enlink.charrange = new CHARRANGE ();  	enlink.nmhdr.hwndFrom = Marshal.ReadIntPtr ((IntPtr)numRef);  	enlink.nmhdr.idFrom = Marshal.ReadIntPtr ((IntPtr)(numRef + 8));  	enlink.nmhdr.code = Marshal.ReadInt32 ((IntPtr)(numRef + 0x10));  	enlink.msg = Marshal.ReadInt32 ((IntPtr)(numRef + 0x18));  	enlink.wParam = Marshal.ReadIntPtr ((IntPtr)(numRef + 0x1c));  	enlink.lParam = Marshal.ReadIntPtr ((IntPtr)(numRef + 0x24));  	enlink.charrange.cpMin = Marshal.ReadInt32 ((IntPtr)(numRef + 0x2c));  	enlink.charrange.cpMax = Marshal.ReadInt32 ((IntPtr)(numRef + 0x30));  }  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,ConvertFromENLINK64,The following statement contains a magic number: enlink.nmhdr.idFrom = Marshal.ReadIntPtr ((IntPtr)(numRef + 8));  
Magic Number,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,EnLinkMsgHandler,The following statement contains a magic number: if (IntPtr.Size == 8) {  	lParam = ConvertFromENLINK64 ((ENLINK64)m.GetLParam (typeof(ENLINK64)));  } else {  	lParam = (ENLINK)m.GetLParam (typeof(ENLINK));  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,RecordEditor,The following statement contains a magic number: this.comboBox1.SetItems (FlagDefs.RecFlags1' 4);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.ControlSize = new System.Drawing.Size (47' 16);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.ControlSize = new System.Drawing.Size (47' 16);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.DropSize = new System.Drawing.Size (121' 106);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.comboBox1.DropSize = new System.Drawing.Size (121' 106);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.subrecordListEditor.MinimumSize = new System.Drawing.Size (200' 120);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.subrecordListEditor.MinimumSize = new System.Drawing.Size (200' 120);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.elementEditor.MinimumSize = new System.Drawing.Size (300' 200);  
Magic Number,TESVSnip.UI.ObjectControls,RecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.elementEditor.MinimumSize = new System.Drawing.Size (300' 200);  
Magic Number,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_OnContextMenuKey,The following statement contains a magic number: this.contextMenuRecord.Show (this.PluginTree.PointToScreen (new Point (this.PluginTree.Width / 4' this.PluginTree.Height / 4)));  
Magic Number,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_OnContextMenuKey,The following statement contains a magic number: this.contextMenuRecord.Show (this.PluginTree.PointToScreen (new Point (this.PluginTree.Width / 4' this.PluginTree.Height / 4)));  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,ApplyColumnSettings,The following statement contains a magic number: if (columnSettings != null) {  	foreach (var setting in columnSettings.Items.OfType<ColumnElement> ()) {  		string type = setting.Parent.Record.name;  		string name = setting.Name;  		string colName = type + "." + name;  		string dispName = type + ": " + name;  		if (Enumerable.OfType<OLVColumn> (this.baseColumns).Any (x => x.Name == colName)) {  			continue;  		}  		var column = new OLVColumn {  			Text = dispName'  			Name = colName'  			AspectName = setting.Name'  			Width = 80'  			IsVisible = true'  			Groupable = true'  			Tag = setting'  			AspectGetter = x => {  				var rec = x as Record;  				var sr = rec != null ? rec.SubRecords.FirstOrDefault (r => r.Name == type) : null;  				var se = sr != null ? sr.EnumerateElements ().FirstOrDefault (e => e.Structure.name == name) : null;  				return se != null ? sr.GetDisplayValue (se) : null;  			}  		};  		this.listSearchView.AllColumns.Add (column);  		changed = true;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,ApplyColumnSettings,The following statement contains a magic number: foreach (var setting in columnSettings.Items.OfType<ColumnElement> ()) {  	string type = setting.Parent.Record.name;  	string name = setting.Name;  	string colName = type + "." + name;  	string dispName = type + ": " + name;  	if (Enumerable.OfType<OLVColumn> (this.baseColumns).Any (x => x.Name == colName)) {  		continue;  	}  	var column = new OLVColumn {  		Text = dispName'  		Name = colName'  		AspectName = setting.Name'  		Width = 80'  		IsVisible = true'  		Groupable = true'  		Tag = setting'  		AspectGetter = x => {  			var rec = x as Record;  			var sr = rec != null ? rec.SubRecords.FirstOrDefault (r => r.Name == type) : null;  			var se = sr != null ? sr.EnumerateElements ().FirstOrDefault (e => e.Structure.name == name) : null;  			return se != null ? sr.GetDisplayValue (se) : null;  		}  	};  	this.listSearchView.AllColumns.Add (column);  	changed = true;  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,The following statement contains a magic number: if (counter != prevCount) {  	prevCount = counter;  	if (counter % 10 == 0) {  		this.UpdateBackgroundProgress (counter);  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,BackgroundIncrementalSearch,The following statement contains a magic number: if (counter % 10 == 0) {  	this.UpdateBackgroundProgress (counter);  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: switch (ctx.Type) {  case SearchType.FormID:  	{  		if (string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		uint searchID;  		if (!uint.TryParse (ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  			MainView.PostStatusWarning ("Invalid FormID");  			return null;  		}  		searchFunction = node => {  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			return rec.FormID == searchID;  		};  	}  	break;  case SearchType.TypeEditorIdSearch:  case SearchType.EditorID:  	{  		if (ctx.Type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.Rectype)) {  			return null;  		}  		if (ctx.Type == SearchType.EditorID && string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		string searchString = string.IsNullOrEmpty (ctx.Text) ? null : ctx.Text.ToLowerInvariant ();  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			bool typeOk = true;  			if (ctx.Type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.Partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  			return false;  		};  	}  	break;  case SearchType.TypeFullSearch:  case SearchType.FullSearch:  	{  		if (ctx.Type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.Rectype)) {  			return null;  		}  		if (ctx.Type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		string searchString = ctx.Text.ToLowerInvariant ();  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			bool typeOk = true;  			if (ctx.Type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.Partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  			return false;  		};  	}  	break;  case SearchType.FormIDRef:  	{  		if (string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		uint searchID;  		if (!uint.TryParse (ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  			MainView.PostStatusWarning ("Invalid FormID");  			return null;  		}  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (rec != null) {  				rec.MatchRecordStructureToRecord ();  				if ((from sr in rec.SubRecords  				from elem in rec.EnumerateElements (sr)  				let es = elem.Structure  				where es != null && es.type == ElementValueType.FormID  				select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  					return true;  				}  			}  			return false;  		};  	}  	break;  case SearchType.BasicCriteriaRef:  	{  		if (ctx.Criteria == null || !ctx.Criteria.Items.Any ()) {  			MainView.PostStatusWarning ("No search criteria selected!");  			return null;  		}  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (ctx.Criteria.Type != rec.Name) {  				return false;  			}  			rec.MatchRecordStructureToRecord ();  			bool all = false;  			foreach (var m in ctx.Criteria.Items) {  				bool ok = m.Match (rec);  				if (!ok) {  					return false;  				}  				all = true;  			}  			return all;  		};  	}  	break;  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: switch (ctx.Type) {  case SearchType.FormID:  	{  		if (string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		uint searchID;  		if (!uint.TryParse (ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  			MainView.PostStatusWarning ("Invalid FormID");  			return null;  		}  		searchFunction = node => {  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			return rec.FormID == searchID;  		};  	}  	break;  case SearchType.TypeEditorIdSearch:  case SearchType.EditorID:  	{  		if (ctx.Type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.Rectype)) {  			return null;  		}  		if (ctx.Type == SearchType.EditorID && string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		string searchString = string.IsNullOrEmpty (ctx.Text) ? null : ctx.Text.ToLowerInvariant ();  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			bool typeOk = true;  			if (ctx.Type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.Partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  			return false;  		};  	}  	break;  case SearchType.TypeFullSearch:  case SearchType.FullSearch:  	{  		if (ctx.Type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.Rectype)) {  			return null;  		}  		if (ctx.Type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		string searchString = ctx.Text.ToLowerInvariant ();  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			bool typeOk = true;  			if (ctx.Type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.Partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  			return false;  		};  	}  	break;  case SearchType.FormIDRef:  	{  		if (string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		uint searchID;  		if (!uint.TryParse (ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  			MainView.PostStatusWarning ("Invalid FormID");  			return null;  		}  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (rec != null) {  				rec.MatchRecordStructureToRecord ();  				if ((from sr in rec.SubRecords  				from elem in rec.EnumerateElements (sr)  				let es = elem.Structure  				where es != null && es.type == ElementValueType.FormID  				select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  					return true;  				}  			}  			return false;  		};  	}  	break;  case SearchType.BasicCriteriaRef:  	{  		if (ctx.Criteria == null || !ctx.Criteria.Items.Any ()) {  			MainView.PostStatusWarning ("No search criteria selected!");  			return null;  		}  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (ctx.Criteria.Type != rec.Name) {  				return false;  			}  			rec.MatchRecordStructureToRecord ();  			bool all = false;  			foreach (var m in ctx.Criteria.Items) {  				bool ok = m.Match (rec);  				if (!ok) {  					return false;  				}  				all = true;  			}  			return all;  		};  	}  	break;  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: searchFunction = node => {  	if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  		return false;  	}  	var rec = node as Record;  	if (rec == null) {  		return node is IGroupRecord;  	}  	bool typeOk = true;  	if (ctx.Type == SearchType.TypeEditorIdSearch) {  		typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  	}  	if (typeOk) {  		if (string.IsNullOrEmpty (searchString)) {  			return true;  		} else if (ctx.Partial) {  			var val = rec.DescriptiveName.ToLowerInvariant ();  			if (val.Contains (searchString)) {  				return true;  			}  		} else {  			var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  			if (val == searchString) {  				return true;  			}  		}  	}  	return false;  };  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: searchFunction = node => {  	if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  		return false;  	}  	var rec = node as Record;  	if (rec == null) {  		return node is IGroupRecord;  	}  	bool typeOk = true;  	if (ctx.Type == SearchType.TypeEditorIdSearch) {  		typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  	}  	if (typeOk) {  		if (string.IsNullOrEmpty (searchString)) {  			return true;  		} else if (ctx.Partial) {  			var val = rec.DescriptiveName.ToLowerInvariant ();  			if (val.Contains (searchString)) {  				return true;  			}  		} else {  			var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  			if (val == searchString) {  				return true;  			}  		}  	}  	return false;  };  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: if (typeOk) {  	if (string.IsNullOrEmpty (searchString)) {  		return true;  	} else if (ctx.Partial) {  		var val = rec.DescriptiveName.ToLowerInvariant ();  		if (val.Contains (searchString)) {  			return true;  		}  	} else {  		var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  		if (val == searchString) {  			return true;  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: if (typeOk) {  	if (string.IsNullOrEmpty (searchString)) {  		return true;  	} else if (ctx.Partial) {  		var val = rec.DescriptiveName.ToLowerInvariant ();  		if (val.Contains (searchString)) {  			return true;  		}  	} else {  		var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  		if (val == searchString) {  			return true;  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: if (string.IsNullOrEmpty (searchString)) {  	return true;  } else if (ctx.Partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: if (string.IsNullOrEmpty (searchString)) {  	return true;  } else if (ctx.Partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: if (ctx.Partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following statement contains a magic number: if (ctx.Partial) {  	var val = rec.DescriptiveName.ToLowerInvariant ();  	if (val.Contains (searchString)) {  		return true;  	}  } else {  	var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  	if (val == searchString) {  		return true;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: if (results.Type == SearchType.BasicCriteriaRef) {  	if (results.Criteria != null) {  		fixedColumns.AddRange (from item in results.Criteria.Items.OfType<SearchElement> ()  		let type = item.Parent.Record.name  		let name = item.Name  		let colName = type + "." + name  		let dispName = type + ": " + name  		select new OLVColumn {  			Text = dispName'  			Name = colName'  			AspectName = name'  			Width = 80'  			IsVisible = true'  			Groupable = true'  			AspectGetter = x => {  				var rec = x as Record;  				var sr = rec != null ? rec.SubRecords.FirstOrDefault (r => r.Name == type) : null;  				var se = sr != null ? sr.EnumerateElements ().FirstOrDefault (e => e.Structure.name == name) : null;  				return se != null ? sr.GetDisplayValue (se) : null;  			}  		});  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: if (results.Criteria != null) {  	fixedColumns.AddRange (from item in results.Criteria.Items.OfType<SearchElement> ()  	let type = item.Parent.Record.name  	let name = item.Name  	let colName = type + "." + name  	let dispName = type + ": " + name  	select new OLVColumn {  		Text = dispName'  		Name = colName'  		AspectName = name'  		Width = 80'  		IsVisible = true'  		Groupable = true'  		AspectGetter = x => {  			var rec = x as Record;  			var sr = rec != null ? rec.SubRecords.FirstOrDefault (r => r.Name == type) : null;  			var se = sr != null ? sr.EnumerateElements ().FirstOrDefault (e => e.Structure.name == name) : null;  			return se != null ? sr.GetDisplayValue (se) : null;  		}  	});  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,UpdateSearchList,The following statement contains a magic number: fixedColumns.AddRange (from item in results.Criteria.Items.OfType<SearchElement> ()  let type = item.Parent.Record.name  let name = item.Name  let colName = type + "." + name  let dispName = type + ": " + name  select new OLVColumn {  	Text = dispName'  	Name = colName'  	AspectName = name'  	Width = 80'  	IsVisible = true'  	Groupable = true'  	AspectGetter = x => {  		var rec = x as Record;  		var sr = rec != null ? rec.SubRecords.FirstOrDefault (r => r.Name == type) : null;  		var se = sr != null ? sr.EnumerateElements ().FirstOrDefault (e => e.Structure.name == name) : null;  		return se != null ? sr.GetDisplayValue (se) : null;  	}  });  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,copyToToolStripMenuItem_DropDownItemClicked,The following statement contains a magic number: if (array != null && array.Length == 2) {  	int count = TESVSnip.Domain.Services.Spells.CopyRecordsTo (array [0] as BaseRecord[]' array [1] as IGroupRecord);  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,toolStripIncrFindType_SelectedIndexChanged,The following statement contains a magic number: if (item != null && item.Key == SearchType.BasicCriteriaRef) {  	this.toolStripIncrSelectCriteria.Visible = true;  	this.toolStripIncrFindText.Visible = false;  	this.toolStripIncrFindText.Items.Clear ();  	this.toolStripIncrFindGo.Enabled = this.toolStripIncrSelectCriteria.Tag != null;  	this.toolStripSelectColumns.Visible = true;  } else {  	this.toolStripIncrFindGo.Enabled = true;  	this.toolStripIncrSelectCriteria.Visible = false;  	this.toolStripIncrFindText.Visible = true;  	this.toolStripIncrFindText.Items.Clear ();  	if (item != null && item.MRU != null && item.MRU.Count > 0) {  		this.toolStripIncrFindText.Items.AddRange (item.MRU.OfType<object> ().Take (15).ToArray ());  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,toolStripIncrFindType_SelectedIndexChanged,The following statement contains a magic number: if (item != null && item.MRU != null && item.MRU.Count > 0) {  	this.toolStripIncrFindText.Items.AddRange (item.MRU.OfType<object> ().Take (15).ToArray ());  }  
Magic Number,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,toolStripIncrFindType_SelectedIndexChanged,The following statement contains a magic number: this.toolStripIncrFindText.Items.AddRange (item.MRU.OfType<object> ().Take (15).ToArray ());  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: try {  	this.BeginUpdate ();  	this.ClearControl ();  	SuspendLayout ();  	this.fpanel1.SuspendLayout ();  	this.fpanel1.Width = Parent.Width;  	this.controlMap.Clear ();  	this.hexView = hexView;  	this.r = r;  	this.sr = sr;  	var p = this.GetPluginFromNode (r);  	this.ss = sr.Structure;  	// default to blob if no elements  	if (this.ss == null || this.ss.elements == null || hexView) {  		var c = new HexElement ();  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  		if (elem != null) {  			this.controlMap.Add (elem.Structure' c);  			this.fpanel1.Controls.Add (c);  			c.Data = elem.Data;  		}  	} else {  		foreach (var elem in this.ss.elements) {  			Control c = null;  			if (elem.options != null && elem.options.Length > 1) {  				c = new OptionsElement ();  			} else if (elem.flags != null && elem.flags.Length > 1) {  				c = new FlagsElement ();  			} else {  				switch (elem.type) {  				case ElementValueType.LString:  					c = new LStringElement ();  					break;  				case ElementValueType.FormID:  					c = new FormIDElement ();  					break;  				case ElementValueType.Blob:  					c = new HexElement ();  					break;  				default:  					c = new TextElement ();  					break;  				}  			}  			if (c is IElementControl) {  				var ec = c as IElementControl;  				ec.formIDLookup = p.GetRecordByID;  				ec.formIDScan = p.EnumerateRecords;  				ec.strIDLookup = p.LookupFormStrings;  				ec.Element = elem;  				if (elem.repeat > 0) {  					var ge = new RepeatingElement ();  					c = ge;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					ge.InnerControl = ec;  					ge.Element = elem;  					ec = ge;  				} else if (elem.optional > 0) {  					var re = new OptionalElement ();  					c = re;  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  					re.InnerControl = ec;  					re.Element = elem;  					ec = re;  					c = re;  				} else {  					c.Left = 8;  					c.Width = this.fpanel1.Width - 16;  					c.Top = panelOffset;  					c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				}  				c.MinimumSize = c.Size;  				this.controlMap.Add (elem' ec);  				this.fpanel1.Controls.Add (c);  				panelOffset = c.Bottom;  			}  		}  		foreach (Element elem in r.EnumerateElements (sr' true)) {  			var es = elem.Structure;  			IElementControl c;  			if (this.controlMap.TryGetValue (es' out c)) {  				if (c is IGroupedElementControl) {  					var gc = c as IGroupedElementControl;  					gc.Elements.Add (elem.Data);  				} else {  					c.Data = elem.Data;  				}  			}  		}  	}  	Enabled = true;  } catch {  	this.strWarnOnSave = "The subrecord doesn't appear to conform to the expected structure.\nThe formatted information may be incorrect.";  } finally {  	this.fpanel1.ResumeLayout ();  	ResumeLayout ();  	this.EndUpdate ();  	Refresh ();  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (this.ss == null || this.ss.elements == null || hexView) {  	var c = new HexElement ();  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	var elem = r.EnumerateElements (sr' true).FirstOrDefault ();  	if (elem != null) {  		this.controlMap.Add (elem.Structure' c);  		this.fpanel1.Controls.Add (c);  		c.Data = elem.Data;  	}  } else {  	foreach (var elem in this.ss.elements) {  		Control c = null;  		if (elem.options != null && elem.options.Length > 1) {  			c = new OptionsElement ();  		} else if (elem.flags != null && elem.flags.Length > 1) {  			c = new FlagsElement ();  		} else {  			switch (elem.type) {  			case ElementValueType.LString:  				c = new LStringElement ();  				break;  			case ElementValueType.FormID:  				c = new FormIDElement ();  				break;  			case ElementValueType.Blob:  				c = new HexElement ();  				break;  			default:  				c = new TextElement ();  				break;  			}  		}  		if (c is IElementControl) {  			var ec = c as IElementControl;  			ec.formIDLookup = p.GetRecordByID;  			ec.formIDScan = p.EnumerateRecords;  			ec.strIDLookup = p.LookupFormStrings;  			ec.Element = elem;  			if (elem.repeat > 0) {  				var ge = new RepeatingElement ();  				c = ge;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				ge.InnerControl = ec;  				ge.Element = elem;  				ec = ge;  			} else if (elem.optional > 0) {  				var re = new OptionalElement ();  				c = re;  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  				re.InnerControl = ec;  				re.Element = elem;  				ec = re;  				c = re;  			} else {  				c.Left = 8;  				c.Width = this.fpanel1.Width - 16;  				c.Top = panelOffset;  				c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			}  			c.MinimumSize = c.Size;  			this.controlMap.Add (elem' ec);  			this.fpanel1.Controls.Add (c);  			panelOffset = c.Bottom;  		}  	}  	foreach (Element elem in r.EnumerateElements (sr' true)) {  		var es = elem.Structure;  		IElementControl c;  		if (this.controlMap.TryGetValue (es' out c)) {  			if (c is IGroupedElementControl) {  				var gc = c as IGroupedElementControl;  				gc.Elements.Add (elem.Data);  			} else {  				c.Data = elem.Data;  			}  		}  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Left = 8;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Width = this.fpanel1.Width - 16;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: foreach (var elem in this.ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		c.MinimumSize = c.Size;  		this.controlMap.Add (elem' ec);  		this.fpanel1.Controls.Add (c);  		panelOffset = c.Bottom;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: foreach (var elem in this.ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		c.MinimumSize = c.Size;  		this.controlMap.Add (elem' ec);  		this.fpanel1.Controls.Add (c);  		panelOffset = c.Bottom;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: foreach (var elem in this.ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		c.MinimumSize = c.Size;  		this.controlMap.Add (elem' ec);  		this.fpanel1.Controls.Add (c);  		panelOffset = c.Bottom;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: foreach (var elem in this.ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		c.MinimumSize = c.Size;  		this.controlMap.Add (elem' ec);  		this.fpanel1.Controls.Add (c);  		panelOffset = c.Bottom;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: foreach (var elem in this.ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		c.MinimumSize = c.Size;  		this.controlMap.Add (elem' ec);  		this.fpanel1.Controls.Add (c);  		panelOffset = c.Bottom;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: foreach (var elem in this.ss.elements) {  	Control c = null;  	if (elem.options != null && elem.options.Length > 1) {  		c = new OptionsElement ();  	} else if (elem.flags != null && elem.flags.Length > 1) {  		c = new FlagsElement ();  	} else {  		switch (elem.type) {  		case ElementValueType.LString:  			c = new LStringElement ();  			break;  		case ElementValueType.FormID:  			c = new FormIDElement ();  			break;  		case ElementValueType.Blob:  			c = new HexElement ();  			break;  		default:  			c = new TextElement ();  			break;  		}  	}  	if (c is IElementControl) {  		var ec = c as IElementControl;  		ec.formIDLookup = p.GetRecordByID;  		ec.formIDScan = p.EnumerateRecords;  		ec.strIDLookup = p.LookupFormStrings;  		ec.Element = elem;  		if (elem.repeat > 0) {  			var ge = new RepeatingElement ();  			c = ge;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			ge.InnerControl = ec;  			ge.Element = elem;  			ec = ge;  		} else if (elem.optional > 0) {  			var re = new OptionalElement ();  			c = re;  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  			re.InnerControl = ec;  			re.Element = elem;  			ec = re;  			c = re;  		} else {  			c.Left = 8;  			c.Width = this.fpanel1.Width - 16;  			c.Top = panelOffset;  			c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		}  		c.MinimumSize = c.Size;  		this.controlMap.Add (elem' ec);  		this.fpanel1.Controls.Add (c);  		panelOffset = c.Bottom;  	}  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	c.MinimumSize = c.Size;  	this.controlMap.Add (elem' ec);  	this.fpanel1.Controls.Add (c);  	panelOffset = c.Bottom;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	c.MinimumSize = c.Size;  	this.controlMap.Add (elem' ec);  	this.fpanel1.Controls.Add (c);  	panelOffset = c.Bottom;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	c.MinimumSize = c.Size;  	this.controlMap.Add (elem' ec);  	this.fpanel1.Controls.Add (c);  	panelOffset = c.Bottom;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	c.MinimumSize = c.Size;  	this.controlMap.Add (elem' ec);  	this.fpanel1.Controls.Add (c);  	panelOffset = c.Bottom;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	c.MinimumSize = c.Size;  	this.controlMap.Add (elem' ec);  	this.fpanel1.Controls.Add (c);  	panelOffset = c.Bottom;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (c is IElementControl) {  	var ec = c as IElementControl;  	ec.formIDLookup = p.GetRecordByID;  	ec.formIDScan = p.EnumerateRecords;  	ec.strIDLookup = p.LookupFormStrings;  	ec.Element = elem;  	if (elem.repeat > 0) {  		var ge = new RepeatingElement ();  		c = ge;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		ge.InnerControl = ec;  		ge.Element = elem;  		ec = ge;  	} else if (elem.optional > 0) {  		var re = new OptionalElement ();  		c = re;  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  		re.InnerControl = ec;  		re.Element = elem;  		ec = re;  		c = re;  	} else {  		c.Left = 8;  		c.Width = this.fpanel1.Width - 16;  		c.Top = panelOffset;  		c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	}  	c.MinimumSize = c.Size;  	this.controlMap.Add (elem' ec);  	this.fpanel1.Controls.Add (c);  	panelOffset = c.Bottom;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.repeat > 0) {  	var ge = new RepeatingElement ();  	c = ge;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	ge.InnerControl = ec;  	ge.Element = elem;  	ec = ge;  } else if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.repeat > 0) {  	var ge = new RepeatingElement ();  	c = ge;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	ge.InnerControl = ec;  	ge.Element = elem;  	ec = ge;  } else if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.repeat > 0) {  	var ge = new RepeatingElement ();  	c = ge;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	ge.InnerControl = ec;  	ge.Element = elem;  	ec = ge;  } else if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.repeat > 0) {  	var ge = new RepeatingElement ();  	c = ge;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	ge.InnerControl = ec;  	ge.Element = elem;  	ec = ge;  } else if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.repeat > 0) {  	var ge = new RepeatingElement ();  	c = ge;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	ge.InnerControl = ec;  	ge.Element = elem;  	ec = ge;  } else if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.repeat > 0) {  	var ge = new RepeatingElement ();  	c = ge;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	ge.InnerControl = ec;  	ge.Element = elem;  	ec = ge;  } else if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Left = 8;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Width = this.fpanel1.Width - 16;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: if (elem.optional > 0) {  	var re = new OptionalElement ();  	c = re;  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  	re.InnerControl = ec;  	re.Element = elem;  	ec = re;  	c = re;  } else {  	c.Left = 8;  	c.Width = this.fpanel1.Width - 16;  	c.Top = panelOffset;  	c.Anchor = c.Anchor | AnchorStyles.Left | AnchorStyles.Right;  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Left = 8;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Width = this.fpanel1.Width - 16;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Left = 8;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,SetContext,The following statement contains a magic number: c.Width = this.fpanel1.Width - 16;  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,fpanel1_Resize,The following statement contains a magic number: foreach (Control c in this.fpanel1.Controls) {  	c.MinimumSize = new Size (Width - c.Left - 30' c.MinimumSize.Height);  }  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,fpanel1_Resize,The following statement contains a magic number: c.MinimumSize = new Size (Width - c.Left - 30' c.MinimumSize.Height);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (300' 200);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (300' 200);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn ("Name"' "Name"' 50);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn ("Size"' "Size"' 40);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn ("IsValid"' "*"' 20' new Func<SubRecord' string> (a => a.IsValid ? "*" : string.Empty));  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeSubrecordForm,The following statement contains a magic number: this.listSubrecord.AddBindingColumn ("Description"' "Description"' 100);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The following statement contains a magic number: this.toolStripEditSubrecord.Padding = new System.Windows.Forms.Padding (2' 0' 0' 0);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (192' 120);  
Magic Number,TESVSnip.UI.ObjectControls,SubrecordListEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\SubrecordListEditor.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size (192' 120);  
Duplicate Code,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The method contains a code clone-set at the following line numbers (starting from the method definition): ((54' 73)' (83' 102)' (112' 131))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((32' 62)' (66' 96))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((110' 130)' (144' 164))
Duplicate Code,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetFormattedData,The method contains a code clone-set at the following line numbers (starting from the method definition): ((168' 198)' (202' 232))
Missing Default,TESVSnip.UI.Services,Options,F:\newReposMay17\figment_tesvsnip\Application\UI\Services\Options.cs,ParseCommandLine,The following switch statement is missing a default case: switch (char.ToLower (arg [1])) {  case 'c':  	this.SettingsDirectory = (arg.Length > 2 && arg [2] == ':') ? arg.Substring (3) : args [++i];  	break;  }  
Missing Default,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,generateLLXmlToolStripMenuItem_Click,The following switch statement is missing a default case: switch (r.Name) {  case "LVLI":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLI formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLI>");  	}  	sb3.Length = 0;  	break;  case "LVLN":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVLN formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLN>");  	}  	sb3.Length = 0;  	break;  case "LVSP":  	for (int i = 0; i < r.SubRecords.Count; i++) {  		if (r.SubRecords [i].Name == "EDID") {  			edid = r.SubRecords [i].GetStrData ();  		} else if (r.SubRecords [i].Name == "LVLD") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			chance = data [0];  		} else if (r.SubRecords [i].Name == "LVLF") {  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			flags = data [0];  		} else if (r.SubRecords [i].Name == "LVLO") {  			if (r.SubRecords [i].Size != 12) {  				continue;  			}  			byte[] data = r.SubRecords [i].GetReadonlyData ();  			uint formid = TypeConverter.h2i (data [4]' data [5]' data [6]' data [7]);  			// if ((formid & 0xff000000) != mask) continue;  			sb3.AppendLine ("      <LVLO level=\"" + TypeConverter.h2ss (data [0]' data [1]) + "\" formid=\"" + (formid & 0xffffff).ToString ("X6") + "\" count=\"" + TypeConverter.h2ss (data [8]' data [9]) + "\" />");  		}  	}  	if (sb3.Length > 0) {  		sb2.AppendLine ("    <LVSP formid=\"" + r.FormID.ToString ("X6") + "\" edid=\"" + edid + "\">");  		sb2.AppendLine ("      <LVLF flags=\"" + flags + "\"/>");  		sb2.AppendLine ("      <LVLD chance=\"" + chance + "\"/>");  		sb2.Append (sb3.ToString ());  		sb2.AppendLine ("    </LVLC>");  	}  	sb3.Length = 0;  	break;  }  
Missing Default,TESVSnip.UI.Forms,MainView,F:\newReposMay17\figment_tesvsnip\Application\TranslateUI\Localization.cs,importStringsToFileToolStripMenuItem_Click,The following switch statement is missing a default case: switch (lstring.Type) {  case LocalizedStringFormat.Base:  	plugin.Strings [lstring.ID] = lstring.Value;  	break;  case LocalizedStringFormat.DL:  	plugin.DLStrings [lstring.ID] = lstring.Value;  	break;  case LocalizedStringFormat.IL:  	plugin.ILStrings [lstring.ID] = lstring.Value;  	break;  }  
Missing Default,TESVSnip.UI.Forms,BatchEditRecords,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\BatchEditRecords.cs,GetAssignmentType,The following switch statement is missing a default case: switch (type) {  case BatchCondElementType.Set:  	return ElementAssignmentType.Set;  case BatchCondElementType.Add:  	return ElementAssignmentType.Add;  case BatchCondElementType.Subtract:  	return ElementAssignmentType.Subtract;  case BatchCondElementType.Multiply:  	return ElementAssignmentType.Multiply;  case BatchCondElementType.Divide:  	return ElementAssignmentType.Divide;  case BatchCondElementType.BitAnd:  	return ElementAssignmentType.BitAnd;  case BatchCondElementType.BitOr:  	return ElementAssignmentType.BitOr;  case BatchCondElementType.Clear:  	return ElementAssignmentType.Clear;  }  
Missing Default,TESVSnip.UI.Forms,NewMediumLevelRecordEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\NewMediumLevelRecordEditor.cs,bSave_Click,The following switch statement is missing a default case: switch (kvp.Key.type) {  case ElementValueType.UInt:  	{  		var sf = new ArraySegment<byte> (elem.Array' elem.Offset' elem.Count);  		var value = TypeConverter.h2i (sf);  		if (!string.IsNullOrWhiteSpace (kvp.Key.funcw)) {  			bool valueIsChanged = (kvp.Value).Changed;  			if (kvp.Value is OptionalElement)  				valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;  			if (valueIsChanged) {  				value = PyInterpreter.ExecuteFunction<uint> (kvp.Key' value' FunctionOperation.ForWriting);  				var b = TypeConverter.i2h (value);  				Buffer.BlockCopy (b' 0' elem.Array' elem.Offset' elem.Count);  			}  		}  	}  	break;  case ElementValueType.FormID:  	{  	}  	break;  case ElementValueType.Int:  	{  		var sf = new ArraySegment<byte> (elem.Array' elem.Offset' elem.Count);  		var value = TypeConverter.h2si (sf);  		if (!string.IsNullOrWhiteSpace (kvp.Key.funcw)) {  			bool valueIsChanged = (kvp.Value).Changed;  			if (kvp.Value is OptionalElement)  				valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;  			if (valueIsChanged) {  				value = PyInterpreter.ExecuteFunction<int> (kvp.Key' value' FunctionOperation.ForWriting);  				var b = TypeConverter.si2h (value);  				Buffer.BlockCopy (b' 0' elem.Array' elem.Offset' elem.Count);  			}  		}  	}  	break;  case ElementValueType.Float:  	{  		var sf = new ArraySegment<byte> (elem.Array' elem.Offset' elem.Count);  		var value = TypeConverter.h2f (sf);  		if (!string.IsNullOrWhiteSpace (kvp.Key.funcw)) {  			bool valueIsChanged = (kvp.Value).Changed;  			if (kvp.Value is OptionalElement)  				valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;  			if (valueIsChanged) {  				value = PyInterpreter.ExecuteFunction<float> (kvp.Key' value' FunctionOperation.ForWriting);  				var b = TypeConverter.f2h (value);  				Buffer.BlockCopy (b' 0' elem.Array' elem.Offset' elem.Count);  			}  		}  	}  	break;  case ElementValueType.UShort:  	{  		var sf = new ArraySegment<byte> (elem.Array' elem.Offset' elem.Count);  		var value = TypeConverter.h2s (sf);  		if (!string.IsNullOrWhiteSpace (kvp.Key.funcw)) {  			bool valueIsChanged = (kvp.Value).Changed;  			if (kvp.Value is OptionalElement)  				valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;  			if (valueIsChanged) {  				value = PyInterpreter.ExecuteFunction<ushort> (kvp.Key' value' FunctionOperation.ForWriting);  				var b = TypeConverter.s2h (value);  				Buffer.BlockCopy (b' 0' elem.Array' elem.Offset' elem.Count);  			}  		}  	}  	break;  case ElementValueType.Short:  	{  		var sf = new ArraySegment<byte> (elem.Array' elem.Offset' elem.Count);  		var value = TypeConverter.h2ss (sf);  		if (!string.IsNullOrWhiteSpace (kvp.Key.funcw)) {  			bool valueIsChanged = (kvp.Value).Changed;  			if (kvp.Value is OptionalElement)  				valueIsChanged = (((OptionalElement)(kvp.Value)).InnerControl).Changed;  			if (valueIsChanged) {  				value = PyInterpreter.ExecuteFunction<short> (kvp.Key' value' FunctionOperation.ForWriting);  				var b = TypeConverter.ss2h (value);  				Buffer.BlockCopy (b' 0' elem.Array' elem.Offset' elem.Count);  			}  		}  	}  	break;  case ElementValueType.Byte:  	{  	}  	break;  case ElementValueType.SByte:  	{  	}  	break;  case ElementValueType.String:  	break;  case ElementValueType.BString:  	break;  case ElementValueType.IString:  	break;  case ElementValueType.LString:  	{  		// not handled  	}  	break;  case ElementValueType.Str4:  	{  	}  	break;  }  
Missing Default,TESVSnip.UI.Forms,StringsEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\StringsEditor.cs,GetStringDict,The following switch statement is missing a default case: switch (format) {  case LocalizedStringFormat.Base:  	strings = plugin.Strings;  	break;  case LocalizedStringFormat.DL:  	strings = plugin.DLStrings;  	break;  case LocalizedStringFormat.IL:  	strings = plugin.ILStrings;  	break;  }  
Missing Default,TESVSnip.UI.Forms,GroupEditor,F:\newReposMay17\figment_tesvsnip\Application\UI\Forms\GroupEditor.cs,cmbGroupType_SelectedIndexChanged,The following switch statement is missing a default case: switch (this.cmbGroupType.SelectedIndex) {  case 0:  	this.tbRecType.Enabled = true;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 2:  case 3:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = true;  	break;  case 4:  case 5:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = true;  	this.tbY.Enabled = true;  	this.tbParent.Enabled = false;  	this.tbBlock.Enabled = false;  	break;  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	this.tbRecType.Enabled = false;  	this.tbX.Enabled = false;  	this.tbY.Enabled = false;  	this.tbParent.Enabled = true;  	this.tbBlock.Enabled = false;  	break;  }  
Missing Default,TESVSnip.UI.Controls,CustomTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\Controls\CustomTreeView.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case 0x210:  	//WM_PARENTNOTIFY  	this._contextMenuSet = 1;  	break;  case 0x21:  	//WM_MOUSEACTIVATE  	this._contextMenuSet++;  	break;  case 0x7b:  	//WM_CONTEXTMENU  	if (this._contextMenuSet == 1)  		// ignore mouse activate  		if (this.OnContextMenuKey != null)  			this.OnContextMenuKey (this' EventArgs.Empty);  	break;  }  
Missing Default,TESVSnip.UI.Rendering.Extensions,StringRenderer,F:\newReposMay17\figment_tesvsnip\Application\UI\Rendering\StringRenderer.cs,GetSubDesc,The following switch statement is missing a default case: switch (rec.groupType) {  case 0:  	return "(Contains: " + (char)recdata [0] + (char)recdata [1] + (char)recdata [2] + (char)recdata [3] + ")";  case 2:  case 3:  	return "(Block number: " + (recdata [0] + recdata [1] * 256 + recdata [2] * 256 * 256 + recdata [3] * 256 * 256 * 256).ToString () + ")";  case 4:  case 5:  	return "(Coordinates: [" + (recdata [0] + recdata [1] * 256) + "' " + recdata [2] + recdata [3] * 256 + "])";  case 1:  case 6:  case 7:  case 8:  case 9:  case 10:  	return "(Parent FormID: 0x" + recdata [3].ToString ("x2") + recdata [2].ToString ("x2") + recdata [1].ToString ("x2") + recdata [0].ToString ("x2") + ")";  }  
Missing Default,TESVSnip.UI.RecordControls,RepeatingElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\RepeatingElement.cs,bindingNavigatorAddNewItem2_Click,The following switch statement is missing a default case: switch (Element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  case ElementValueType.String:  case ElementValueType.LString:  	bytes = new byte[1];  	break;  case ElementValueType.Float:  case ElementValueType.Str4:  case ElementValueType.FormID:  case ElementValueType.UInt:  case ElementValueType.Int:  case ElementValueType.IString:  	bytes = new byte[4];  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  case ElementValueType.BString:  	bytes = new byte[2];  	break;  }  
Missing Default,TESVSnip.UI.RecordControls,OptionsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\OptionsElement.cs,cboOptions_SelectedIndexChanged,The following switch statement is missing a default case: switch (element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.sb2h ((sbyte)newIndex)));  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.ss2h ((short)newIndex)));  	break;  case ElementValueType.Int:  case ElementValueType.UInt:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.si2h (newIndex)));  	break;  }  
Missing Default,TESVSnip.UI.RecordControls,FlagsElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\FlagsElement.cs,cboFlags_ItemCheck,The following switch statement is missing a default case: switch (element.type) {  case ElementValueType.SByte:  case ElementValueType.Byte:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.b2h ((byte)value)));  	break;  case ElementValueType.Short:  case ElementValueType.UShort:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.s2h ((ushort)value)));  	break;  case ElementValueType.Int:  case ElementValueType.UInt:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.i2h (value)));  	break;  }  
Missing Default,TESVSnip.UI.RecordControls,LStringElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\LStringElement.cs,UpdateAllControls,The following switch statement is missing a default case: switch (Element.type) {  case ElementValueType.UInt:  	this.SetTextByID ();  	break;  case ElementValueType.String:  	this.SetTextAsString ();  	break;  case ElementValueType.LString:  	// can be either  	bool isString = TypeConverter.IsLikelyString (data);  	if (isString) {  		this.SetTextAsString ();  	} else {  		this.SetTextByID ();  	}  	break;  }  
Missing Default,TESVSnip.UI.RecordControls,TextElement,F:\newReposMay17\figment_tesvsnip\Application\UI\RecordControls\TextElement.cs,SaveText,The following switch statement is missing a default case: switch (element.type) {  case ElementValueType.UInt:  case ElementValueType.FormID:  	{  		uint i;  		if (element.type == ElementValueType.FormID) {  			numStyle = NumberStyles.HexNumber;  		}  		if (!uint.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.i2h (i)));  		}  	}  	break;  case ElementValueType.Int:  	{  		int i;  		if (!int.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.si2h (i)));  		}  	}  	break;  case ElementValueType.Float:  	{  		float i;  		if (!float.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.f2h (i)));  		}  	}  	break;  case ElementValueType.UShort:  	{  		ushort i;  		if (!ushort.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.s2h (i)));  		}  	}  	break;  case ElementValueType.Short:  	{  		short i;  		if (!short.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.ss2h (i)));  		}  	}  	break;  case ElementValueType.Byte:  	{  		byte i;  		if (!byte.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.b2h (i)));  		}  	}  	break;  case ElementValueType.SByte:  	{  		sbyte i;  		if (!sbyte.TryParse (tbText' numStyle' null' out i)) {  			Error.SetError (this.TextBox' string.Format ("Invalid {0} Format"' element.type));  		} else {  			Error.SetError (this.TextBox' null);  			SetCurrentData (new ArraySegment<byte> (TypeConverter.sb2h (i)));  		}  	}  	break;  case ElementValueType.String:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.str2h (this.textBox.Text)));  	break;  case ElementValueType.BString:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.bstr2h (this.textBox.Text)));  	break;  case ElementValueType.IString:  	SetCurrentData (new ArraySegment<byte> (TypeConverter.istr2h (this.textBox.Text)));  	break;  case ElementValueType.LString:  	{  		// not handled  	}  	break;  case ElementValueType.Str4:  	{  		var txtbytes = new byte[] {  			0x32'  			0x32'  			0x32'  			0x32  		};  		System.Text.Encoding.Default.GetBytes (tbText' 0' Math.Min (4' tbText.Length)' txtbytes' 0);  		SetCurrentData (new ArraySegment<byte> (txtbytes));  	}  	break;  }  
Missing Default,TESVSnip.Windows.Controls,BindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\bindinglistview.cs,DataSource_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType) {  case ListChangedType.ItemAdded:  	goto case ListChangedType.Reset;  case ListChangedType.ItemChanged:  	goto case ListChangedType.Reset;  case ListChangedType.ItemDeleted:  	goto case ListChangedType.Reset;  case ListChangedType.ItemMoved:  	goto case ListChangedType.Reset;  case ListChangedType.Reset:  	ItemCount = (_data == null) ? 0 : _data.Count;  	Invalidate ();  	break;  }  
Missing Default,TESVSnip.Windows.Controls,ObjectBindingListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\objectbindinglistview.cs,DataSource_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType) {  case ListChangedType.ItemAdded:  	goto case ListChangedType.Reset;  case ListChangedType.ItemChanged:  	goto case ListChangedType.Reset;  case ListChangedType.ItemDeleted:  	goto case ListChangedType.Reset;  case ListChangedType.ItemMoved:  	goto case ListChangedType.Reset;  case ListChangedType.Reset:  	ItemCount = (_data == null) ? 0 : _data.Count;  	Invalidate ();  	break;  }  
Missing Default,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,AutoSizeDropDown,The following switch statement is missing a default case: switch (DropDownSizeMode) {  case SizeMode.UseComboSize:  	DropDownControl.Size = new Size (Width' m_sizeCombo.Height);  	break;  case SizeMode.UseControlSize:  	DropDownControl.Size = new Size (m_sizeOriginal.Width' m_sizeOriginal.Height);  	break;  case SizeMode.UseDropDownSize:  	DropDownControl.Size = m_sizeCombo;  	break;  }  
Missing Default,TESVSnip.Windows.Controls,CustomComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\CustomComboBox.cs,WndProc,The following switch statement is missing a default case: switch (HIWORD ((int)m.WParam)) {  case CBN_DROPDOWN:  	AutoDropDown ();  	return;  case CBN_CLOSEUP:  	if ((DateTime.Now - m_sShowTime).Seconds > 1)  		HideDropDown ();  	return;  }  
Missing Default,TESVSnip.Windows.Controls,FlagComboBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\FlagComboBox.cs,SetItems,The following switch statement is missing a default case: switch (flagSize) {  case 1:  	format = "X2";  	numBits = 8;  	break;  case 2:  	format = "X4";  	numBits = 16;  	break;  }  
Missing Default,TESVSnip.Windows.Controls,GripRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,Render,The following switch statement is missing a default case: switch (mode) {  case GripAlignMode.TopLeft:  	size.Height = -size.Height;  	size.Width = -size.Width;  	break;  case GripAlignMode.TopRight:  	size.Height = -size.Height;  	break;  case GripAlignMode.BottomLeft:  	size.Width = -size.Height;  	break;  }  
Missing Default,TESVSnip.Windows.Controls,PopupDropDown,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\PopupControl.cs,ProcessGrip,The following switch statement is missing a default case: switch (m.Msg) {  case WM_NCHITTEST:  	return OnNcHitTest (ref m' contentControl);  case WM_GETMINMAXINFO:  	return OnGetMinMaxInfo (ref m);  }  
Missing Default,Be.Windows.Forms,HexBox,F:\newReposMay17\figment_tesvsnip\Application\Vendor\HexBox\HexBox.cs,OnPaintBackground,The following switch statement is missing a default case: switch (_borderStyle) {  case BorderStyle.Fixed3D: {  	if (TextBoxRenderer.IsSupported) {  		VisualStyleElement state = VisualStyleElement.TextBox.TextEdit.Normal;  		Color backColor = BackColor;  		if (Enabled) {  			if (ReadOnly)  				state = VisualStyleElement.TextBox.TextEdit.ReadOnly;  			else if (Focused)  				state = VisualStyleElement.TextBox.TextEdit.Focused;  		} else {  			state = VisualStyleElement.TextBox.TextEdit.Disabled;  			backColor = BackColorDisabled;  		}  		var vsr = new VisualStyleRenderer (state);  		vsr.DrawBackground (pevent.Graphics' ClientRectangle);  		Rectangle rectContent = vsr.GetBackgroundContentRectangle (pevent.Graphics' ClientRectangle);  		pevent.Graphics.FillRectangle (new SolidBrush (backColor)' rectContent);  	} else {  		// draw background  		pevent.Graphics.FillRectangle (new SolidBrush (BackColor)' ClientRectangle);  		// draw default border  		ControlPaint.DrawBorder3D (pevent.Graphics' ClientRectangle' Border3DStyle.Sunken);  	}  	break;  }  case BorderStyle.FixedSingle: {  	// draw background  	pevent.Graphics.FillRectangle (new SolidBrush (BackColor)' ClientRectangle);  	// draw fixed single border  	ControlPaint.DrawBorder (pevent.Graphics' ClientRectangle' Color.Black' ButtonBorderStyle.Solid);  	break;  }  }  
Missing Default,BrightIdeasSoftware,CellEditKeyEngine,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleRowChange,The following switch statement is missing a default case: switch (atEdgeBehaviour) {  case CellEditAtEdgeBehaviour.Ignore:  	break;  case CellEditAtEdgeBehaviour.EndEdit:  	ListView.PossibleFinishCellEditing ();  	break;  case CellEditAtEdgeBehaviour.Wrap:  	adjacentOlvi = GetAdjacentItemOrNull (null' isGoingUp);  	StartCellEditIfDifferent (adjacentOlvi' subItemIndex);  	break;  case CellEditAtEdgeBehaviour.ChangeColumn:  	// Figure out the next editable column  	List<OLVColumn> editableColumnsInDisplayOrder = EditableColumnsInDisplayOrder;  	int displayIndex = Math.Max (0' editableColumnsInDisplayOrder.IndexOf (ListView.GetColumn (subItemIndex)));  	if (isGoingUp)  		displayIndex = (editableColumnsInDisplayOrder.Count + displayIndex - 1) % editableColumnsInDisplayOrder.Count;  	else  		displayIndex = (displayIndex + 1) % editableColumnsInDisplayOrder.Count;  	subItemIndex = editableColumnsInDisplayOrder [displayIndex].Index;  	// Wrap to the next row and start the cell edit  	adjacentOlvi = GetAdjacentItemOrNull (null' isGoingUp);  	StartCellEditIfDifferent (adjacentOlvi' subItemIndex);  	break;  }  
Missing Default,BrightIdeasSoftware,CellEditKeyEngine,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\CellEditing\CellEditKeyEngine.cs,HandleColumnChange,The following switch statement is missing a default case: switch (atEdgeBehaviour) {  case CellEditAtEdgeBehaviour.Ignore:  	return;  case CellEditAtEdgeBehaviour.EndEdit:  	HandleEndEdit ();  	return;  case CellEditAtEdgeBehaviour.ChangeRow:  case CellEditAtEdgeBehaviour.Wrap:  	if (atEdgeBehaviour == CellEditAtEdgeBehaviour.ChangeRow)  		olvi = GetAdjacentItem (olvi' displayIndex == 0);  	if (isGoingLeft)  		displayIndex = editableColumns.Count - 1;  	else  		displayIndex = 0;  	break;  }  
Missing Default,BrightIdeasSoftware,SimpleDropSink,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\DragDrop\DropSink.cs,DrawFeedback,The following switch statement is missing a default case: switch (DropTargetLocation) {  case DropTargetLocation.Background:  	DrawFeedbackBackgroundTarget (g' bounds);  	break;  case DropTargetLocation.Item:  	DrawFeedbackItemTarget (g' bounds);  	break;  case DropTargetLocation.AboveItem:  	DrawFeedbackAboveItemTarget (g' bounds);  	break;  case DropTargetLocation.BelowItem:  	DrawFeedbackBelowItemTarget (g' bounds);  	break;  }  
Missing Default,BrightIdeasSoftware,DataSourceAdapter,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\DataSourceAdapter.cs,currencyManager_ListChanged,The following switch statement is missing a default case: switch (e.ListChangedType) {  case ListChangedType.Reset:  	HandleListChanged_Reset (e);  	break;  case ListChangedType.ItemChanged:  	HandleListChanged_ItemChanged (e);  	break;  case ListChangedType.ItemAdded:  	HandleListChanged_ItemAdded (e);  	break;  // An item has gone away.  case ListChangedType.ItemDeleted:  	HandleListChanged_ItemDeleted (e);  	break;  // An item has changed its index.  case ListChangedType.ItemMoved:  	HandleListChanged_ItemMoved (e);  	break;  // Something has changed in the metadata.  // CHECK: When are these events actually fired?  case ListChangedType.PropertyDescriptorAdded:  case ListChangedType.PropertyDescriptorChanged:  case ListChangedType.PropertyDescriptorDeleted:  	HandleListChanged_MetadataChanged (e);  	break;  }  
Missing Default,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,CalculateStandardHitTest,The following switch statement is missing a default case: switch (hti.Column.TextAlign) {  case HorizontalAlignment.Center:  	textBounds.X += (cellBounds.Right - cellBounds.Left - textSize.Width) / 2;  	break;  case HorizontalAlignment.Right:  	textBounds.X = cellBounds.Right - textSize.Width;  	break;  }  
Missing Default,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleCustomDraw,The following switch statement is missing a default case: switch (nmcustomdraw.nmcd.dwDrawStage) {  case CDDS_PREPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_PREPAINT");  	// Remember which items were drawn during this paint cycle  	if (prePaintLevel == 0)  		drawnItems = new List<OLVListItem> ();  	// If there are any items' we have to wait until at least one has been painted  	// before we draw the overlays. If there aren't any items' there will never be any  	// item paint events' so we can draw the overlays whenever  	isAfterItemPaint = (GetItemCount () == 0);  	prePaintLevel++;  	base.WndProc (ref m);  	// Make sure that we get postpaint notifications  	m.Result = (IntPtr)((int)m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);  	return true;  case CDDS_POSTPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_POSTPAINT");  	prePaintLevel--;  	// When in group view' we have two problems. On XP' the control sends  	// a whole heap of PREPAINT/POSTPAINT messages before drawing any items.  	// We have to wait until after the first item paint before we draw overlays.  	// On Vista' we have a different problem. On Vista' the control nests calls  	// to PREPAINT and POSTPAINT. We only want to draw overlays on the outermost  	// POSTPAINT.  	if (prePaintLevel == 0 && (isMarqueSelecting || isAfterItemPaint)) {  		shouldDoCustomDrawing = false;  		// Draw our overlays after everything has been drawn  		using (Graphics g = Graphics.FromHdc (nmcustomdraw.nmcd.hdc)) {  			DrawAllDecorations (g' drawnItems);  		}  	}  	break;  case CDDS_ITEMPREPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREPAINT");  	// When in group view on XP' the control send a whole heap of PREPAINT/POSTPAINT  	// messages before drawing any items.  	// We have to wait until after the first item paint before we draw overlays  	isAfterItemPaint = true;  	// This scheme of catching custom draw msgs works fine' except  	// for Tile view. Something in .NET's handling of Tile view causes lots  	// of invalidates and erases. So' we just ignore completely  	// .NET's handling of Tile view and let the underlying control  	// do its stuff. Strangely' if the Tile view is  	// completely owner drawn' those erasures don't happen.  	if (View == View.Tile) {  		if (OwnerDraw && ItemRenderer != null)  			base.WndProc (ref m);  	} else {  		base.WndProc (ref m);  	}  	m.Result = (IntPtr)((int)m.Result | CDRF_NOTIFYPOSTPAINT | CDRF_NOTIFYPOSTERASE);  	return true;  case CDDS_ITEMPOSTPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTPAINT");  	if (Columns.Count > 0) {  		OLVListItem olvi = GetItem ((int)nmcustomdraw.nmcd.dwItemSpec);  		if (olvi != null)  			drawnItems.Add (olvi);  	}  	break;  case CDDS_SUBITEMPREPAINT:  	//System.Diagnostics.Debug.WriteLine(String.Format("CDDS_SUBITEMPREPAINT ({0}'{1})"' (int)nmcustomdraw.nmcd.dwItemSpec' nmcustomdraw.iSubItem));  	// There is a bug in the .NET framework which appears when column 0 of an owner drawn listview  	// is dragged to another column position.  	// The bounds calculation always returns the left edge of column 0 as being 0.  	// The effects of this bug become apparent  	// when the listview is scrolled horizontally: the control can think that column 0  	// is no longer visible (the horizontal scroll position is subtracted from the bounds' giving a  	// rectangle that is offscreen). In those circumstances' column 0 is not redraw because  	// the control thinks it is not visible and so does not trigger a DrawSubItem event.  	// To fix this problem' we have to detected the situation -- owner drawing column 0 in any column except 0 --  	// trigger our own DrawSubItem' and then prevent the default processing from occuring.  	// Are we owner drawing column 0 when it's in any column except 0?  	if (!OwnerDraw)  		return false;  	int columnIndex = nmcustomdraw.iSubItem;  	if (columnIndex != 0)  		return false;  	int displayIndex = Columns [0].DisplayIndex;  	if (displayIndex == 0)  		return false;  	var rowIndex = (int)nmcustomdraw.nmcd.dwItemSpec;  	OLVListItem item = GetItem (rowIndex);  	if (item == null)  		return false;  	// OK. We have the error condition' so lets do what the .NET framework should do.  	// Trigger an event to draw column 0 when it is not at display index 0  	using (Graphics g = Graphics.FromHdc (nmcustomdraw.nmcd.hdc)) {  		// Correctly calculate the bounds of cell 0  		Rectangle r = item.GetSubItemBounds (0);  		// We can hardcode "0" here since we know we are only doing this for column 0  		var args = new DrawListViewSubItemEventArgs (g' r' item' item.SubItems [0]' rowIndex' 0' Columns [0]' (ListViewItemStates)nmcustomdraw.nmcd.uItemState);  		OnDrawSubItem (args);  		// If the event handler wants to do the default processing (i.e. DrawDefault = true)' we are stuck.  		// There is no way we can force the default drawing because of the bug in .NET we are trying to get around.  		Trace.Assert (!args.DrawDefault' "Default drawing is impossible in this situation");  	}  	m.Result = (IntPtr)4;  	return true;  case CDDS_SUBITEMPOSTPAINT:  	//System.Diagnostics.Debug.WriteLine("CDDS_SUBITEMPOSTPAINT");  	break;  // I have included these stages' but it doesn't seem that they are sent for ListViews.  // http://www.tech-archive.net/Archive/VC/microsoft.public.vc.mfc/2006-08/msg00220.html  case CDDS_PREERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_PREERASE");  	break;  case CDDS_POSTERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_POSTERASE");  	break;  case CDDS_ITEMPREERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPREERASE");  	break;  case CDDS_ITEMPOSTERASE:  	//System.Diagnostics.Debug.WriteLine("CDDS_ITEMPOSTERASE");  	break;  }  
Missing Default,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleReflectNotify,The following switch statement is missing a default case: switch (nmhdr.code) {  case NM_CLICK:  	// The standard ListView does some strange stuff here when the list has checkboxes.  	// If you shift click on non-primary columns when FullRowSelect is true' the   	// checkedness of the selected rows changes.   	// We avoid all that by just saying we've handled this message.  	//System.Diagnostics.Debug.WriteLine("NM_CLICK");  	isMsgHandled = true;  	OnClick (EventArgs.Empty);  	break;  case LVN_BEGINSCROLL:  	isMsgHandled = HandleBeginScroll (ref m);  	break;  case LVN_ENDSCROLL:  	isMsgHandled = HandleEndScroll (ref m);  	break;  case LVN_LINKCLICK:  	isMsgHandled = HandleLinkClick (ref m);  	break;  case LVN_MARQUEEBEGIN:  	//System.Diagnostics.Debug.WriteLine("LVN_MARQUEEBEGIN");  	isMarqueSelecting = true;  	break;  case LVN_GETINFOTIP:  	//System.Diagnostics.Debug.WriteLine("LVN_GETINFOTIP");  	// When virtual lists are in SmallIcon view' they generates tooltip message with invalid item indicies.  	var nmGetInfoTip = (NativeMethods.NMLVGETINFOTIP)m.GetLParam (typeof(NativeMethods.NMLVGETINFOTIP));  	isMsgHandled = nmGetInfoTip.iItem >= GetItemCount ();  	break;  case NM_RELEASEDCAPTURE:  	//System.Diagnostics.Debug.WriteLine("NM_RELEASEDCAPTURE");  	isMarqueSelecting = false;  	Invalidate ();  	break;  case NM_CUSTOMDRAW:  	//System.Diagnostics.Debug.WriteLine("NM_CUSTOMDRAW");  	isMsgHandled = HandleCustomDraw (ref m);  	break;  case NM_DBLCLK:  	// The default behavior of a .NET ListView with checkboxes is to toggle the checkbox on  	// double-click. That's just silly' if you ask me :)  	if (CheckBoxes) {  		// How do we make ListView not do that silliness? We could just ignore the message  		// but the last part of the base code sets up state information' and without that  		// state' the ListView doesn't trigger MouseDoubleClick events. So we fake a  		// right button double click event' which sets up the same state' but without  		// toggling the checkbox.  		nmhdr.code = NM_RDBLCLK;  		Marshal.StructureToPtr (nmhdr' m.LParam' false);  	}  	break;  case LVN_ITEMCHANGED:  	//System.Diagnostics.Debug.WriteLine("LVN_ITEMCHANGED");  	var nmlistviewPtr2 = (NativeMethods.NMLISTVIEW)m.GetLParam (typeof(NativeMethods.NMLISTVIEW));  	if ((nmlistviewPtr2.uChanged & LVIF_STATE) != 0) {  		CheckState currentValue = CalculateCheckState (nmlistviewPtr2.uOldState);  		CheckState newCheckValue = CalculateCheckState (nmlistviewPtr2.uNewState);  		if (currentValue != newCheckValue) {  			// Remove the state indicies so that we don't trigger the OnItemChecked method  			// when we call our base method after exiting this method  			nmlistviewPtr2.uOldState = (nmlistviewPtr2.uOldState & 0x0FFF);  			nmlistviewPtr2.uNewState = (nmlistviewPtr2.uNewState & 0x0FFF);  			Marshal.StructureToPtr (nmlistviewPtr2' m.LParam' false);  		}  	}  	break;  case LVN_ITEMCHANGING:  	//System.Diagnostics.Debug.WriteLine("LVN_ITEMCHANGING");  	var nmlistviewPtr = (NativeMethods.NMLISTVIEW)m.GetLParam (typeof(NativeMethods.NMLISTVIEW));  	if ((nmlistviewPtr.uChanged & LVIF_STATE) != 0) {  		CheckState currentValue = CalculateCheckState (nmlistviewPtr.uOldState);  		CheckState newCheckValue = CalculateCheckState (nmlistviewPtr.uNewState);  		if (currentValue != newCheckValue) {  			// Prevent the base method from seeing the state change'  			// since we handled it elsewhere  			nmlistviewPtr.uChanged &= ~LVIF_STATE;  			Marshal.StructureToPtr (nmlistviewPtr' m.LParam' false);  		}  	}  	break;  }  
Missing Default,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,HandleNotify,The following switch statement is missing a default case: switch (nmheader.nhdr.code) {  case NM_CUSTOMDRAW:  	if (!OwnerDrawnHeader)  		isMsgHandled = HeaderControl.HandleHeaderCustomDraw (ref m);  	break;  case HDN_ITEMCLICKA:  case HDN_ITEMCLICKW:  	if (!PossibleFinishCellEditing ()) {  		m.Result = (IntPtr)1;  		// prevent the change from happening  		isMsgHandled = true;  	}  	break;  case HDN_DIVIDERDBLCLICKA:  case HDN_DIVIDERDBLCLICKW:  case HDN_BEGINTRACKA:  case HDN_BEGINTRACKW:  	if (!PossibleFinishCellEditing ()) {  		m.Result = (IntPtr)1;  		// prevent the change from happening  		isMsgHandled = true;  		break;  	}  	if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count) {  		OLVColumn column = GetColumn (nmheader.iItem);  		// Space filling columns can't be dragged or double-click resized  		if (column.FillsFreeSpace) {  			m.Result = (IntPtr)1;  			// prevent the change from happening  			isMsgHandled = true;  		}  	}  	break;  case HDN_ENDTRACKA:  case HDN_ENDTRACKW:  	if (ShowGroups)  		ResizeLastGroup ();  	break;  case HDN_TRACKA:  case HDN_TRACKW:  	if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count) {  		var hditem = (NativeMethods.HDITEM)Marshal.PtrToStructure (nmheader.pHDITEM' typeof(NativeMethods.HDITEM));  		OLVColumn column = GetColumn (nmheader.iItem);  		if (hditem.cxy < column.MinimumWidth)  			hditem.cxy = column.MinimumWidth;  		else if (column.MaximumWidth != -1 && hditem.cxy > column.MaximumWidth)  			hditem.cxy = column.MaximumWidth;  		Marshal.StructureToPtr (hditem' nmheader.pHDITEM' false);  	}  	break;  case HDN_ITEMCHANGINGA:  case HDN_ITEMCHANGINGW:  	nmheader = (NativeMethods.NMHEADER)m.GetLParam (typeof(NativeMethods.NMHEADER));  	if (nmheader.iItem >= 0 && nmheader.iItem < Columns.Count) {  		var hditem = (NativeMethods.HDITEM)Marshal.PtrToStructure (nmheader.pHDITEM' typeof(NativeMethods.HDITEM));  		OLVColumn column = GetColumn (nmheader.iItem);  		// Check the mask to see if the width field is valid' and if it is' make sure it's within range  		if ((hditem.mask & 1) == 1) {  			if (hditem.cxy < column.MinimumWidth || (column.MaximumWidth != -1 && hditem.cxy > column.MaximumWidth)) {  				m.Result = (IntPtr)1;  				// prevent the change from happening  				isMsgHandled = true;  			}  		}  	}  	break;  case ToolTipControl.TTN_SHOW:  	//System.Diagnostics.Debug.WriteLine("olv TTN_SHOW");  	Trace.Assert (CellToolTip.Handle == nmheader.nhdr.hwndFrom);  	isMsgHandled = CellToolTip.HandleShow (ref m);  	break;  case ToolTipControl.TTN_POP:  	//System.Diagnostics.Debug.WriteLine("olv TTN_POP");  	Trace.Assert (CellToolTip.Handle == nmheader.nhdr.hwndFrom);  	isMsgHandled = CellToolTip.HandlePop (ref m);  	break;  case ToolTipControl.TTN_GETDISPINFO:  	//System.Diagnostics.Debug.WriteLine("olv TTN_GETDISPINFO");  	Trace.Assert (CellToolTip.Handle == nmheader.nhdr.hwndFrom);  	isMsgHandled = CellToolTip.HandleGetDispInfo (ref m);  	break;  }  
Missing Default,BrightIdeasSoftware,ObjectListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Enums.cs,ToggleSubItemCheckBox,The following switch statement is missing a default case: switch (args.NewValue) {  case CheckState.Checked:  	CheckSubItem (rowObject' column);  	break;  case CheckState.Indeterminate:  	CheckIndeterminateSubItem (rowObject' column);  	break;  case CheckState.Unchecked:  	UncheckSubItem (rowObject' column);  	break;  }  
Missing Default,BrightIdeasSoftware,TreeListView,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Implementation\Events.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Left:  	// If the branch is expanded' collapse it. If it's collapsed'  	// select the parent of the branch.  	if (br.IsExpanded)  		Collapse (modelObject);  	else {  		if (br.ParentBranch != null && br.ParentBranch.Model != null)  			SelectObject (br.ParentBranch.Model' true);  	}  	e.Handled = true;  	break;  case Keys.Right:  	// If the branch is expanded' select the first child.  	// If it isn't expanded and can be' expand it.  	if (br.IsExpanded) {  		List<Branch> filtered = br.FilteredChildBranches;  		if (filtered.Count > 0)  			SelectObject (filtered [0].Model' true);  	} else {  		if (br.CanExpand)  			Expand (modelObject);  	}  	e.Handled = true;  	break;  }  
Missing Default,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateAlignedPosition,The following switch statement is missing a default case: switch (corner) {  case ContentAlignment.TopLeft:  	return pt;  case ContentAlignment.TopCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y);  case ContentAlignment.TopRight:  	return new Point (pt.X - size.Width' pt.Y);  case ContentAlignment.MiddleLeft:  	return new Point (pt.X' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - (size.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (pt.X - size.Width' pt.Y - (size.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (pt.X' pt.Y - size.Height);  case ContentAlignment.BottomCenter:  	return new Point (pt.X - (size.Width / 2)' pt.Y - size.Height);  case ContentAlignment.BottomRight:  	return new Point (pt.X - size.Width' pt.Y - size.Height);  }  
Missing Default,BrightIdeasSoftware,GraphicAdornment,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Adornments.cs,CalculateCorner,The following switch statement is missing a default case: switch (corner) {  case ContentAlignment.TopLeft:  	return new Point (r.Left' r.Top);  case ContentAlignment.TopCenter:  	return new Point (r.X + (r.Width / 2)' r.Top);  case ContentAlignment.TopRight:  	return new Point (r.Right' r.Top);  case ContentAlignment.MiddleLeft:  	return new Point (r.Left' r.Top + (r.Height / 2));  case ContentAlignment.MiddleCenter:  	return new Point (r.X + (r.Width / 2)' r.Top + (r.Height / 2));  case ContentAlignment.MiddleRight:  	return new Point (r.Right' r.Top + (r.Height / 2));  case ContentAlignment.BottomLeft:  	return new Point (r.Left' r.Bottom);  case ContentAlignment.BottomCenter:  	return new Point (r.X + (r.Width / 2)' r.Bottom);  case ContentAlignment.BottomRight:  	return new Point (r.Right' r.Bottom);  }  
Missing Default,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,AlignRectangle,The following switch statement is missing a default case: switch (Column.TextAlign) {  case HorizontalAlignment.Left:  	r.X = outer.Left;  	break;  case HorizontalAlignment.Center:  	r.X = outer.Left + ((outer.Width - inner.Width) / 2);  	break;  case HorizontalAlignment.Right:  	r.X = outer.Right - inner.Width - 1;  	break;  }  
Missing Default,BrightIdeasSoftware,BaseRenderer,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Rendering\Renderers.cs,DrawCheckBox,The following switch statement is missing a default case: switch (switchValue) {  case 0x00:  	boxState = CheckBoxState.UncheckedNormal;  	break;  case 0x01:  	boxState = CheckBoxState.UncheckedHot;  	break;  case 0x10:  	boxState = CheckBoxState.CheckedNormal;  	break;  case 0x11:  	boxState = CheckBoxState.CheckedHot;  	break;  case 0x20:  	boxState = CheckBoxState.MixedNormal;  	break;  case 0x21:  	boxState = CheckBoxState.MixedHot;  	break;  }  
Missing Default,BrightIdeasSoftware,GlassPanelForm,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\GlassPanelForm.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  // Ignore all mouse interactions  case WM_NCHITTEST:  	m.Result = (IntPtr)HTTRANSPARENT;  	break;  }  
Missing Default,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg) {  case WM_SETCURSOR:  	if (!HandleSetCursor (ref m))  		return;  	break;  case WM_NOTIFY:  	if (!HandleNotify (ref m))  		return;  	break;  case WM_MOUSEMOVE:  	if (!HandleMouseMove (ref m))  		return;  	break;  case HDM_LAYOUT:  	if (!HandleLayout (ref m))  		return;  	break;  case WM_DESTROY:  	if (!HandleDestroy (ref m))  		return;  	break;  }  
Missing Default,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleNotify,The following switch statement is missing a default case: switch (nmhdr.code) {  case ToolTipControl.TTN_SHOW:  	//System.Diagnostics.Debug.WriteLine("hdr TTN_SHOW");  	//System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);  	return ToolTip.HandleShow (ref m);  case ToolTipControl.TTN_POP:  	//System.Diagnostics.Debug.WriteLine("hdr TTN_POP");  	//System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);  	return ToolTip.HandlePop (ref m);  case ToolTipControl.TTN_GETDISPINFO:  	//System.Diagnostics.Debug.WriteLine("hdr TTN_GETDISPINFO");  	//System.Diagnostics.Trace.Assert(this.ToolTip.Handle == nmhdr.hwndFrom);  	return ToolTip.HandleGetDispInfo (ref m);  }  
Missing Default,BrightIdeasSoftware,HeaderControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\HeaderControl.cs,HandleHeaderCustomDraw,The following switch statement is missing a default case: switch (nmcustomdraw.dwDrawStage) {  case CDDS_PREPAINT:  	cachedNeedsCustomDraw = NeedsCustomDraw ();  	m.Result = (IntPtr)CDRF_NOTIFYITEMDRAW;  	return true;  case CDDS_ITEMPREPAINT:  	int columnIndex = nmcustomdraw.dwItemSpec.ToInt32 ();  	OLVColumn column = ListView.GetColumn (columnIndex);  	// These don't work when visual styles are enabled  	//NativeMethods.SetBkColor(nmcustomdraw.hdc' ColorTranslator.ToWin32(Color.Red));  	//NativeMethods.SetTextColor(nmcustomdraw.hdc' ColorTranslator.ToWin32(Color.Blue));  	//m.Result = IntPtr.Zero;  	if (cachedNeedsCustomDraw) {  		using (Graphics g = Graphics.FromHdc (nmcustomdraw.hdc)) {  			g.TextRenderingHint = ObjectListView.TextRenderingHint;  			CustomDrawHeaderCell (g' columnIndex' nmcustomdraw.uItemState);  		}  		m.Result = (IntPtr)CDRF_SKIPDEFAULT;  	} else {  		const int CDIS_SELECTED = 1;  		bool isPressed = ((nmcustomdraw.uItemState & CDIS_SELECTED) == CDIS_SELECTED);  		Font f = CalculateFont (column' columnIndex == ColumnIndexUnderCursor' isPressed);  		fontHandle = f.ToHfont ();  		NativeMethods.SelectObject (nmcustomdraw.hdc' fontHandle);  		m.Result = (IntPtr)(CDRF_NEWFONT | CDRF_NOTIFYPOSTPAINT);  	}  	return true;  case CDDS_ITEMPOSTPAINT:  	if (fontHandle != IntPtr.Zero) {  		NativeMethods.DeleteObject (fontHandle);  		fontHandle = IntPtr.Zero;  	}  	break;  }  
Missing Default,BrightIdeasSoftware,ToolTipControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,HandleReflectNotify,The following switch statement is missing a default case: switch (nmheader.nhdr.code) {  case TTN_SHOW:  	//System.Diagnostics.Trace.WriteLine("reflect TTN_SHOW");  	if (HandleShow (ref msg))  		return true;  	break;  case TTN_POP:  	//System.Diagnostics.Trace.WriteLine("reflect TTN_POP");  	if (HandlePop (ref msg))  		return true;  	break;  case TTN_LINKCLICK:  	//System.Diagnostics.Trace.WriteLine("reflect TTN_LINKCLICK");  	if (HandleLinkClick (ref msg))  		return true;  	break;  case TTN_GETDISPINFO:  	//System.Diagnostics.Trace.WriteLine("reflect TTN_GETDISPINFO");  	if (HandleGetDispInfo (ref msg))  		return true;  	break;  }  
Missing Default,BrightIdeasSoftware,ToolTipControl,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\SubControls\ToolTipControl.cs,WndProc,The following switch statement is missing a default case: switch (msg.Msg) {  case 0x4E:  	// WM_NOTIFY  	if (!HandleNotify (ref msg))  		return;  	break;  case 0x204E:  	// WM_REFLECT_NOTIFY  	if (!HandleReflectNotify (ref msg))  		return;  	break;  }  
Missing Default,BrightIdeasSoftware,TypedColumn,F:\newReposMay17\figment_tesvsnip\Application\Vendor\ObjectListView\Utilities\TypedObjectListView.cs,GeneratePart,The following switch statement is missing a default case: switch (info.MemberType) {  case MemberTypes.Method:  	var mi = (MethodInfo)info;  	if (mi.IsVirtual)  		il.Emit (OpCodes.Callvirt' mi);  	else  		il.Emit (OpCodes.Call' mi);  	resultType = mi.ReturnType;  	break;  case MemberTypes.Property:  	var pi = (PropertyInfo)info;  	il.Emit (OpCodes.Call' pi.GetGetMethod ());  	resultType = pi.PropertyType;  	break;  case MemberTypes.Field:  	var fi = (FieldInfo)info;  	il.Emit (OpCodes.Ldfld' fi);  	resultType = fi.FieldType;  	break;  }  
Missing Default,RichTextBoxLinks,RichTextBoxEx,F:\newReposMay17\figment_tesvsnip\Application\Vendor\Controls\RichTextBoxEx.cs,EnLinkMsgHandler,The following switch statement is missing a default case: switch (lParam.msg) {  case 0x20:  	//this.LinkCursor = true;  	m.Result = (IntPtr)1;  	return false;  case 0x201: {  	string str = CharRangeToString (lParam.charrange);  	if (!string.IsNullOrEmpty (str)) {  		OnLinkClicked (new LinkClickedEventArgs (str));  	}  	m.Result = (IntPtr)1;  	return true;  }  }  
Missing Default,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Delete:  	this.DeleteSelection ();  	break;  case Keys.Divide:  	this.CollapseAll ();  	break;  case Keys.Multiply:  	this.ExpandAll ();  	break;  case Keys.Add:  	foreach (var item in this.PluginTree.SelectedRecords) {  		this.PluginTree.Expand (item);  	}  	break;  case Keys.Subtract:  	foreach (var item in this.PluginTree.SelectedRecords) {  		this.PluginTree.Collapse (item);  	}  	break;  }  
Missing Default,TESVSnip.UI.ObjectControls,PluginTreeView,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\PluginTreeView.cs,PluginTree_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode) {  case Keys.Divide:  	foreach (var item in this.PluginTree.SelectedRecords) {  		this.CollapseAll (item);  	}  	break;  case Keys.Multiply:  	foreach (var item in this.PluginTree.SelectedRecords) {  		this.ExpandAll (item);  	}  	break;  case Keys.Add:  	foreach (var item in this.PluginTree.SelectedRecords) {  		this.PluginTree.Expand (item);  	}  	break;  case Keys.Subtract:  	foreach (var item in this.PluginTree.SelectedRecords) {  		this.PluginTree.Collapse (item);  	}  	break;  }  
Missing Default,TESVSnip.UI.ObjectControls,RecordSearch,F:\newReposMay17\figment_tesvsnip\Application\UI\ObjectControls\RecordSearch.cs,PerformSearch,The following switch statement is missing a default case: switch (ctx.Type) {  case SearchType.FormID:  	{  		if (string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		uint searchID;  		if (!uint.TryParse (ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  			MainView.PostStatusWarning ("Invalid FormID");  			return null;  		}  		searchFunction = node => {  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			return rec.FormID == searchID;  		};  	}  	break;  case SearchType.TypeEditorIdSearch:  case SearchType.EditorID:  	{  		if (ctx.Type == SearchType.TypeEditorIdSearch && string.IsNullOrEmpty (ctx.Rectype)) {  			return null;  		}  		if (ctx.Type == SearchType.EditorID && string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		string searchString = string.IsNullOrEmpty (ctx.Text) ? null : ctx.Text.ToLowerInvariant ();  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			bool typeOk = true;  			if (ctx.Type == SearchType.TypeEditorIdSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  			}  			if (typeOk) {  				if (string.IsNullOrEmpty (searchString)) {  					return true;  				} else if (ctx.Partial) {  					var val = rec.DescriptiveName.ToLowerInvariant ();  					if (val.Contains (searchString)) {  						return true;  					}  				} else {  					var val = rec.DescriptiveName.ToLowerInvariant ().Substring (2' rec.DescriptiveName.Length - 3);  					if (val == searchString) {  						return true;  					}  				}  			}  			return false;  		};  	}  	break;  case SearchType.TypeFullSearch:  case SearchType.FullSearch:  	{  		if (ctx.Type == SearchType.TypeFullSearch && string.IsNullOrEmpty (ctx.Rectype)) {  			return null;  		}  		if (ctx.Type == SearchType.FullSearch && string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		string searchString = ctx.Text.ToLowerInvariant ();  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			bool typeOk = true;  			if (ctx.Type == SearchType.TypeFullSearch) {  				typeOk = !string.IsNullOrEmpty (rec.Name) && string.Compare (rec.Name' ctx.Rectype' true) == 0;  			}  			if (typeOk) {  				foreach (SubRecord sr in rec.SubRecords) {  					var val = sr.GetStrData ();  					if (!string.IsNullOrEmpty (val)) {  						val = val.ToLowerInvariant ();  						if ((ctx.Partial && val.Contains (searchString)) || (val == searchString)) {  							return true;  						}  					}  				}  			}  			return false;  		};  	}  	break;  case SearchType.FormIDRef:  	{  		if (string.IsNullOrEmpty (ctx.Text)) {  			return null;  		}  		uint searchID;  		if (!uint.TryParse (ctx.Text' NumberStyles.AllowHexSpecifier' null' out searchID)) {  			MainView.PostStatusWarning ("Invalid FormID");  			return null;  		}  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (rec != null) {  				rec.MatchRecordStructureToRecord ();  				if ((from sr in rec.SubRecords  				from elem in rec.EnumerateElements (sr)  				let es = elem.Structure  				where es != null && es.type == ElementValueType.FormID  				select elem).Any (elem => searchID == TypeConverter.h2i (elem.Data))) {  					return true;  				}  			}  			return false;  		};  	}  	break;  case SearchType.BasicCriteriaRef:  	{  		if (ctx.Criteria == null || !ctx.Criteria.Items.Any ()) {  			MainView.PostStatusWarning ("No search criteria selected!");  			return null;  		}  		searchFunction = node => {  			if (ctx.UpdateFunc != null && !ctx.UpdateFunc (node)) {  				return false;  			}  			var rec = node as Record;  			if (rec == null) {  				return node is IGroupRecord;  			}  			if (ctx.Criteria.Type != rec.Name) {  				return false;  			}  			rec.MatchRecordStructureToRecord ();  			bool all = false;  			foreach (var m in ctx.Criteria.Items) {  				bool ok = m.Match (rec);  				if (!ok) {  					return false;  				}  				all = true;  			}  			return all;  		};  	}  	break;  }  
